(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          if (methodName === '$emit') {\n            handlerCtx.$emit.apply(handlerCtx,\n            processEventArgs(\n            _this.$vm,\n            event,\n            eventArray[1],\n            eventArray[2],\n            isCustom,\n            methodName));\n\n            return;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n  // 将 methods 中的方法挂在 getApp() 中\n  var methods = vm.$options.methods;\n  if (methods) {\n    Object.keys(methods).forEach(function (name) {\n      appOptions[name] = methods[name];\n    });\n  }\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属(反向查找:https://github.com/dcloudio/uni-app/issues/1200)\n  for (var i = $children.length - 1; i >= 0; i--) {\n    var childVm = $children[i];\n    if (childVm.$scope._$vueId === vuePid) {\n      return childVm;\n    }\n  }\n  // 反向递归查找\n  var parentVm;\n  for (var _i = $children.length - 1; _i >= 0; _i--) {\n    parentVm = findVmByVueId($children[_i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = {\n    multipleSlots: true,\n    addGlobalClass: true };\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm && this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 10:
/*!***************************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/static/js/date.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) { /*\r\n              时间转换函数工具\r\n              */\n\nmodule.exports = {\n\n  // 时间戳转 YY-mm-dd HH:ii:ss\n  formatDateTime: function formatDateTime(timeStamp, returnType) {\n    var date = new Date();\n    // date.setTime(timeStamp * 1000);\n    date.setTime(timeStamp);\n    var y = date.getFullYear();\n    var m = date.getMonth() + 1;\n    m = m < 10 ? '0' + m : m;\n    var d = date.getDate();\n    d = d < 10 ? '0' + d : d;\n    var h = date.getHours();\n    h = h < 10 ? '0' + h : h;\n    var minute = date.getMinutes();\n    var second = date.getSeconds();\n    minute = minute < 10 ? '0' + minute : minute;\n    second = second < 10 ? '0' + second : second;\n    if (returnType == 'str') {return y + '-' + m + '-' + d + ' ' + h + ':' + minute + ':' + second;}\n    if (returnType == 'H:i:s') {return h + ':' + minute + ':' + second;}\n    return [y, m, d, h, minute, second];\n  },\n\n  // 日期转时间戳\n  dateTimeToTimeStamp: function dateTimeToTimeStamp(timeStamp) {\n    var reg = /^([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})$/;\n    var res = timeStamp.match(reg);\n    if (res == null) {\n      var reg2 = /^([0-9]{2})\\/([0-9]{2})\\/([0-9]{4}) ([0-9]{2}):([0-9]{2}):([0-9]{2})$/;\n      var res2 = timeStamp.match(reg2);\n      if (res2 == null) {\n        __f__(\"log\", '时间格式错误 E001', \" at static\\\\js\\\\date.js:36\");\n        return false;\n      } else {\n        var year = parseInt(res2[3]);\n        var month = parseInt(res2[1]);\n        var day = parseInt(res2[2]);\n        var h = parseInt(res2[4]);\n        var i = parseInt(res2[5]);\n        var s = parseInt(res2[6]);\n      }\n    } else {\n      var year = parseInt(res[1]);\n      var month = parseInt(res[2]);\n      var day = parseInt(res[3]);\n      var h = parseInt(res[4]);\n      var i = parseInt(res[5]);\n      var s = parseInt(res[6]);\n    }\n    if (year < 1000) {__f__(\"log\", '时间格式错误', \" at static\\\\js\\\\date.js:54\");return false;}\n    if (h < 0 || h > 24) {__f__(\"log\", '时间格式错误', \" at static\\\\js\\\\date.js:55\");return false;}\n    if (i < 0 || i > 60) {__f__(\"log\", '时间格式错误', \" at static\\\\js\\\\date.js:56\");return false;}\n    if (s < 0 || s > 60) {__f__(\"log\", '时间格式错误', \" at static\\\\js\\\\date.js:57\");return false;}\n    return Date.parse(new Date(year, month - 1, day, h, i, s)) / 1000;\n  },\n\n  // 过去时间计算\n  fromTimer: function fromTimer(time) {\n    var timer = new Date().getTime() - time * 1000;\n    timer = parseInt(timer / 1000);\n    if (timer < 180) {\n      return '刚刚';\n    } else if (timer >= 180 && timer < 3600) {\n      return parseInt(timer / 60) + '分钟前';\n    } else if (timer >= 3600 && timer < 86400) {\n      return parseInt(timer / 3600) + '小时前';\n    } else if (timer >= 86400 && timer < 2592000) {\n      return parseInt(timer / 86400) + '天前';\n    } else {\n      return this.formatDateTime(time, 'str');\n    }\n  } };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 11)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),

/***/ 104:
/*!************************************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/libs/qqmap-wx-jssdk.min.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var ERROR_CONF = {\n  KEY_ERR: 311,\n  KEY_ERR_MSG: 'key格式错误',\n  PARAM_ERR: 310,\n  PARAM_ERR_MSG: '请求参数信息有误',\n  SYSTEM_ERR: 600,\n  SYSTEM_ERR_MSG: '系统错误',\n  WX_ERR_CODE: 1000,\n  WX_OK_CODE: 200 };\n\nvar BASE_URL = 'https://apis.map.qq.com/ws/';\nvar URL_SEARCH = BASE_URL + 'place/v1/search';\nvar URL_SUGGESTION = BASE_URL + 'place/v1/suggestion';\nvar URL_GET_GEOCODER = BASE_URL + 'geocoder/v1/';\nvar URL_CITY_LIST = BASE_URL + 'district/v1/list';\nvar URL_AREA_LIST = BASE_URL + 'district/v1/getchildren';\nvar URL_DISTANCE = BASE_URL + 'distance/v1/';\nvar URL_DIRECTION = BASE_URL + 'direction/v1/';\nvar MODE = {\n  driving: 'driving',\n  transit: 'transit' };\n\nvar EARTH_RADIUS = 6378136.49;\nvar Utils = {\n  safeAdd: function safeAdd(x, y) {\n    var lsw = (x & 0xffff) + (y & 0xffff);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return msw << 16 | lsw & 0xffff;\n  },\n  bitRotateLeft: function bitRotateLeft(num, cnt) {\n    return num << cnt | num >>> 32 - cnt;\n  },\n  md5cmn: function md5cmn(q, a, b, x, s, t) {\n    return this.safeAdd(this.bitRotateLeft(this.safeAdd(this.safeAdd(a, q), this.safeAdd(x, t)), s), b);\n  },\n  md5ff: function md5ff(a, b, c, d, x, s, t) {\n    return this.md5cmn(b & c | ~b & d, a, b, x, s, t);\n  },\n  md5gg: function md5gg(a, b, c, d, x, s, t) {\n    return this.md5cmn(b & d | c & ~d, a, b, x, s, t);\n  },\n  md5hh: function md5hh(a, b, c, d, x, s, t) {\n    return this.md5cmn(b ^ c ^ d, a, b, x, s, t);\n  },\n  md5ii: function md5ii(a, b, c, d, x, s, t) {\n    return this.md5cmn(c ^ (b | ~d), a, b, x, s, t);\n  },\n  binlMD5: function binlMD5(x, len) {\n    x[len >> 5] |= 0x80 << len % 32;\n    x[(len + 64 >>> 9 << 4) + 14] = len;\n    var i;\n    var olda;\n    var oldb;\n    var oldc;\n    var oldd;\n    var a = 1732584193;\n    var b = -271733879;\n    var c = -1732584194;\n    var d = 271733878;\n    for (i = 0; i < x.length; i += 16) {\n      olda = a;\n      oldb = b;\n      oldc = c;\n      oldd = d;\n      a = this.md5ff(a, b, c, d, x[i], 7, -680876936);\n      d = this.md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n      c = this.md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n      b = this.md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n      a = this.md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n      d = this.md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n      c = this.md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n      b = this.md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n      a = this.md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n      d = this.md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n      c = this.md5ff(c, d, a, b, x[i + 10], 17, -42063);\n      b = this.md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n      a = this.md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n      d = this.md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n      c = this.md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n      b = this.md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n      a = this.md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n      d = this.md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n      c = this.md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n      b = this.md5gg(b, c, d, a, x[i], 20, -373897302);\n      a = this.md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n      d = this.md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n      c = this.md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n      b = this.md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n      a = this.md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n      d = this.md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n      c = this.md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n      b = this.md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n      a = this.md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n      d = this.md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n      c = this.md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n      b = this.md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n      a = this.md5hh(a, b, c, d, x[i + 5], 4, -378558);\n      d = this.md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n      c = this.md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n      b = this.md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n      a = this.md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n      d = this.md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n      c = this.md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n      b = this.md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n      a = this.md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n      d = this.md5hh(d, a, b, c, x[i], 11, -358537222);\n      c = this.md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n      b = this.md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n      a = this.md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n      d = this.md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n      c = this.md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n      b = this.md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n      a = this.md5ii(a, b, c, d, x[i], 6, -198630844);\n      d = this.md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n      c = this.md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n      b = this.md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n      a = this.md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n      d = this.md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n      c = this.md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n      b = this.md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n      a = this.md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n      d = this.md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n      c = this.md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n      b = this.md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n      a = this.md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n      d = this.md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n      c = this.md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n      b = this.md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n      a = this.safeAdd(a, olda);\n      b = this.safeAdd(b, oldb);\n      c = this.safeAdd(c, oldc);\n      d = this.safeAdd(d, oldd);\n    }\n    return [a, b, c, d];\n  },\n  binl2rstr: function binl2rstr(input) {\n    var i;\n    var output = '';\n    var length32 = input.length * 32;\n    for (i = 0; i < length32; i += 8) {\n      output += String.fromCharCode(input[i >> 5] >>> i % 32 & 0xff);\n    }\n    return output;\n  },\n  rstr2binl: function rstr2binl(input) {\n    var i;\n    var output = [];\n    output[(input.length >> 2) - 1] = undefined;\n    for (i = 0; i < output.length; i += 1) {\n      output[i] = 0;\n    }\n    var length8 = input.length * 8;\n    for (i = 0; i < length8; i += 8) {\n      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << i % 32;\n    }\n    return output;\n  },\n  rstrMD5: function rstrMD5(s) {\n    return this.binl2rstr(this.binlMD5(this.rstr2binl(s), s.length * 8));\n  },\n  rstrHMACMD5: function rstrHMACMD5(key, data) {\n    var i;\n    var bkey = this.rstr2binl(key);\n    var ipad = [];\n    var opad = [];\n    var hash;\n    ipad[15] = opad[15] = undefined;\n    if (bkey.length > 16) {\n      bkey = this.binlMD5(bkey, key.length * 8);\n    }\n    for (i = 0; i < 16; i += 1) {\n      ipad[i] = bkey[i] ^ 0x36363636;\n      opad[i] = bkey[i] ^ 0x5c5c5c5c;\n    }\n    hash = this.binlMD5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);\n    return this.binl2rstr(this.binlMD5(opad.concat(hash), 512 + 128));\n  },\n  rstr2hex: function rstr2hex(input) {\n    var hexTab = '0123456789abcdef';\n    var output = '';\n    var x;\n    var i;\n    for (i = 0; i < input.length; i += 1) {\n      x = input.charCodeAt(i);\n      output += hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f);\n    }\n    return output;\n  },\n  str2rstrUTF8: function str2rstrUTF8(input) {\n    return unescape(encodeURIComponent(input));\n  },\n  rawMD5: function rawMD5(s) {\n    return this.rstrMD5(this.str2rstrUTF8(s));\n  },\n  hexMD5: function hexMD5(s) {\n    return this.rstr2hex(this.rawMD5(s));\n  },\n  rawHMACMD5: function rawHMACMD5(k, d) {\n    return this.rstrHMACMD5(this.str2rstrUTF8(k), str2rstrUTF8(d));\n  },\n  hexHMACMD5: function hexHMACMD5(k, d) {\n    return this.rstr2hex(this.rawHMACMD5(k, d));\n  },\n  md5: function md5(string, key, raw) {\n    if (!key) {\n      if (!raw) {\n        return this.hexMD5(string);\n      }\n      return this.rawMD5(string);\n    }\n    if (!raw) {\n      return this.hexHMACMD5(key, string);\n    }\n    return this.rawHMACMD5(key, string);\n  },\n  getSig: function getSig(requestParam, sk, feature, mode) {\n    var sig = null;\n    var requestArr = [];\n    Object.keys(requestParam).sort().forEach(function (key) {\n      requestArr.push(key + '=' + requestParam[key]);\n    });\n    if (feature == 'search') {\n      sig = '/ws/place/v1/search?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'suggest') {\n      sig = '/ws/place/v1/suggestion?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'reverseGeocoder') {\n      sig = '/ws/geocoder/v1/?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'geocoder') {\n      sig = '/ws/geocoder/v1/?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'getCityList') {\n      sig = '/ws/district/v1/list?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'getDistrictByCityId') {\n      sig = '/ws/district/v1/getchildren?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'calculateDistance') {\n      sig = '/ws/distance/v1/?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'direction') {\n      sig = '/ws/direction/v1/' + mode + '?' + requestArr.join('&') + sk;\n    }\n    sig = this.md5(sig);\n    return sig;\n  },\n  location2query: function location2query(data) {\n    if (typeof data == 'string') {\n      return data;\n    }\n    var query = '';\n    for (var i = 0; i < data.length; i++) {\n      var d = data[i];\n      if (!!query) {\n        query += ';';\n      }\n      if (d.location) {\n        query = query + d.location.lat + ',' + d.location.lng;\n      }\n      if (d.latitude && d.longitude) {\n        query = query + d.latitude + ',' + d.longitude;\n      }\n    }\n    return query;\n  },\n  rad: function rad(d) {\n    return d * Math.PI / 180.0;\n  },\n  getEndLocation: function getEndLocation(location) {\n    var to = location.split(';');\n    var endLocation = [];\n    for (var i = 0; i < to.length; i++) {\n      endLocation.push({\n        lat: parseFloat(to[i].split(',')[0]),\n        lng: parseFloat(to[i].split(',')[1]) });\n\n    }\n    return endLocation;\n  },\n  getDistance: function getDistance(latFrom, lngFrom, latTo, lngTo) {\n    var radLatFrom = this.rad(latFrom);\n    var radLatTo = this.rad(latTo);\n    var a = radLatFrom - radLatTo;\n    var b = this.rad(lngFrom) - this.rad(lngTo);\n    var distance = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLatFrom) * Math.cos(radLatTo) *\n    Math.pow(Math.sin(b / 2), 2)));\n    distance = distance * EARTH_RADIUS;\n    distance = Math.round(distance * 10000) / 10000;\n    return parseFloat(distance.toFixed(0));\n  },\n  getWXLocation: function getWXLocation(success, fail, complete) {\n    wx.getLocation({\n      type: 'gcj02',\n      success: success,\n      fail: fail,\n      complete: complete });\n\n  },\n  getLocationParam: function getLocationParam(location) {\n    if (typeof location == 'string') {\n      var locationArr = location.split(',');\n      if (locationArr.length === 2) {\n        location = {\n          latitude: location.split(',')[0],\n          longitude: location.split(',')[1] };\n\n      } else {\n        location = {};\n      }\n    }\n    return location;\n  },\n  polyfillParam: function polyfillParam(param) {\n    param.success = param.success || function () {};\n    param.fail = param.fail || function () {};\n    param.complete = param.complete || function () {};\n  },\n  checkParamKeyEmpty: function checkParamKeyEmpty(param, key) {\n    if (!param[key]) {\n      var errconf = this.buildErrorConfig(ERROR_CONF.PARAM_ERR, ERROR_CONF.PARAM_ERR_MSG + key + '参数格式有误');\n      param.fail(errconf);\n      param.complete(errconf);\n      return true;\n    }\n    return false;\n  },\n  checkKeyword: function checkKeyword(param) {\n    return !this.checkParamKeyEmpty(param, 'keyword');\n  },\n  checkLocation: function checkLocation(param) {\n    var location = this.getLocationParam(param.location);\n    if (!location || !location.latitude || !location.longitude) {\n      var errconf = this.buildErrorConfig(ERROR_CONF.PARAM_ERR, ERROR_CONF.PARAM_ERR_MSG + ' location参数格式有误');\n      param.fail(errconf);\n      param.complete(errconf);\n      return false;\n    }\n    return true;\n  },\n  buildErrorConfig: function buildErrorConfig(errCode, errMsg) {\n    return {\n      status: errCode,\n      message: errMsg };\n\n  },\n  handleData: function handleData(param, data, feature) {\n    if (feature == 'search') {\n      var searchResult = data.data;\n      var searchSimplify = [];\n      for (var i = 0; i < searchResult.length; i++) {\n        searchSimplify.push({\n          id: searchResult[i].id || null,\n          title: searchResult[i].title || null,\n          latitude: searchResult[i].location && searchResult[i].location.lat || null,\n          longitude: searchResult[i].location && searchResult[i].location.lng || null,\n          address: searchResult[i].address || null,\n          category: searchResult[i].category || null,\n          tel: searchResult[i].tel || null,\n          adcode: searchResult[i].ad_info && searchResult[i].ad_info.adcode || null,\n          city: searchResult[i].ad_info && searchResult[i].ad_info.city || null,\n          district: searchResult[i].ad_info && searchResult[i].ad_info.district || null,\n          province: searchResult[i].ad_info && searchResult[i].ad_info.province || null });\n\n      }\n      param.success(data, {\n        searchResult: searchResult,\n        searchSimplify: searchSimplify });\n\n    } else if (feature == 'suggest') {\n      var suggestResult = data.data;\n      var suggestSimplify = [];\n      for (var i = 0; i < suggestResult.length; i++) {\n        suggestSimplify.push({\n          adcode: suggestResult[i].adcode || null,\n          address: suggestResult[i].address || null,\n          category: suggestResult[i].category || null,\n          city: suggestResult[i].city || null,\n          district: suggestResult[i].district || null,\n          id: suggestResult[i].id || null,\n          latitude: suggestResult[i].location && suggestResult[i].location.lat || null,\n          longitude: suggestResult[i].location && suggestResult[i].location.lng || null,\n          province: suggestResult[i].province || null,\n          title: suggestResult[i].title || null,\n          type: suggestResult[i].type || null });\n\n      }\n      param.success(data, {\n        suggestResult: suggestResult,\n        suggestSimplify: suggestSimplify });\n\n    } else if (feature == 'reverseGeocoder') {\n      var reverseGeocoderResult = data.result;\n      var reverseGeocoderSimplify = {\n        address: reverseGeocoderResult.address || null,\n        latitude: reverseGeocoderResult.location && reverseGeocoderResult.location.lat || null,\n        longitude: reverseGeocoderResult.location && reverseGeocoderResult.location.lng || null,\n        adcode: reverseGeocoderResult.ad_info && reverseGeocoderResult.ad_info.adcode || null,\n        city: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.city || null,\n        district: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.district || null,\n        nation: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.nation || null,\n        province: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.province || null,\n        street: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.street || null,\n        street_number: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.street_number ||\n        null,\n        recommend: reverseGeocoderResult.formatted_addresses && reverseGeocoderResult.formatted_addresses.recommend ||\n        null,\n        rough: reverseGeocoderResult.formatted_addresses && reverseGeocoderResult.formatted_addresses.rough || null };\n\n      if (reverseGeocoderResult.pois) {\n        var pois = reverseGeocoderResult.pois;\n        var poisSimplify = [];\n        for (var i = 0; i < pois.length; i++) {\n          poisSimplify.push({\n            id: pois[i].id || null,\n            title: pois[i].title || null,\n            latitude: pois[i].location && pois[i].location.lat || null,\n            longitude: pois[i].location && pois[i].location.lng || null,\n            address: pois[i].address || null,\n            category: pois[i].category || null,\n            adcode: pois[i].ad_info && pois[i].ad_info.adcode || null,\n            city: pois[i].ad_info && pois[i].ad_info.city || null,\n            district: pois[i].ad_info && pois[i].ad_info.district || null,\n            province: pois[i].ad_info && pois[i].ad_info.province || null });\n\n        }\n        param.success(data, {\n          reverseGeocoderResult: reverseGeocoderResult,\n          reverseGeocoderSimplify: reverseGeocoderSimplify,\n          pois: pois,\n          poisSimplify: poisSimplify });\n\n      } else {\n        param.success(data, {\n          reverseGeocoderResult: reverseGeocoderResult,\n          reverseGeocoderSimplify: reverseGeocoderSimplify });\n\n      }\n    } else if (feature == 'geocoder') {\n      var geocoderResult = data.result;\n      var geocoderSimplify = {\n        title: geocoderResult.title || null,\n        latitude: geocoderResult.location && geocoderResult.location.lat || null,\n        longitude: geocoderResult.location && geocoderResult.location.lng || null,\n        adcode: geocoderResult.ad_info && geocoderResult.ad_info.adcode || null,\n        province: geocoderResult.address_components && geocoderResult.address_components.province || null,\n        city: geocoderResult.address_components && geocoderResult.address_components.city || null,\n        district: geocoderResult.address_components && geocoderResult.address_components.district || null,\n        street: geocoderResult.address_components && geocoderResult.address_components.street || null,\n        street_number: geocoderResult.address_components && geocoderResult.address_components.street_number || null,\n        level: geocoderResult.level || null };\n\n      param.success(data, {\n        geocoderResult: geocoderResult,\n        geocoderSimplify: geocoderSimplify });\n\n    } else if (feature == 'getCityList') {\n      var provinceResult = data.result[0];\n      var cityResult = data.result[1];\n      var districtResult = data.result[2];\n      param.success(data, {\n        provinceResult: provinceResult,\n        cityResult: cityResult,\n        districtResult: districtResult });\n\n    } else if (feature == 'getDistrictByCityId') {\n      var districtByCity = data.result[0];\n      param.success(data, districtByCity);\n    } else if (feature == 'calculateDistance') {\n      var calculateDistanceResult = data.result.elements;\n      var distance = [];\n      for (var i = 0; i < calculateDistanceResult.length; i++) {\n        distance.push(calculateDistanceResult[i].distance);\n      }\n      param.success(data, {\n        calculateDistanceResult: calculateDistanceResult,\n        distance: distance });\n\n    } else if (feature == 'direction') {\n      var direction = data.result.routes;\n      param.success(data, direction);\n    } else {\n      param.success(data);\n    }\n  },\n  buildWxRequestConfig: function buildWxRequestConfig(param, options, feature) {\n    var that = this;\n    options.header = {\n      \"content-type\": \"application/json\" };\n\n    options.method = 'GET';\n    options.success = function (res) {\n      var data = res.data;\n      if (data.status === 0) {\n        that.handleData(param, data, feature);\n      } else {\n        param.fail(data);\n      }\n    };\n    options.fail = function (res) {\n      res.statusCode = ERROR_CONF.WX_ERR_CODE;\n      param.fail(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n    };\n    options.complete = function (res) {\n      var statusCode = +res.statusCode;\n      switch (statusCode) {\n        case ERROR_CONF.WX_ERR_CODE:\n          {\n            param.complete(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n            break;\n          }\n        case ERROR_CONF.WX_OK_CODE:\n          {\n            var data = res.data;\n            if (data.status === 0) {\n              param.complete(data);\n            } else {\n              param.complete(that.buildErrorConfig(data.status, data.message));\n            }\n            break;\n          }\n        default:\n          {\n            param.complete(that.buildErrorConfig(ERROR_CONF.SYSTEM_ERR, ERROR_CONF.SYSTEM_ERR_MSG));\n          }}\n\n    };\n    return options;\n  },\n  locationProcess: function locationProcess(param, locationsuccess, locationfail, locationcomplete) {\n    var that = this;\n    locationfail = locationfail || function (res) {\n      res.statusCode = ERROR_CONF.WX_ERR_CODE;\n      param.fail(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n    };\n    locationcomplete = locationcomplete || function (res) {\n      if (res.statusCode == ERROR_CONF.WX_ERR_CODE) {\n        param.complete(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n      }\n    };\n    if (!param.location) {\n      that.getWXLocation(locationsuccess, locationfail, locationcomplete);\n    } else if (that.checkLocation(param)) {\n      var location = Utils.getLocationParam(param.location);\n      locationsuccess(location);\n    }\n  } };var\n\nQQMapWX = /*#__PURE__*/function () {\n  function QQMapWX(options) {_classCallCheck(this, QQMapWX);\n    if (!options.key) {\n      throw Error('key值不能为空');\n    }\n    this.key = options.key;\n  }_createClass(QQMapWX, [{ key: \"search\", value: function search(\n    options) {\n      var that = this;\n      options = options || {};\n      Utils.polyfillParam(options);\n      if (!Utils.checkKeyword(options)) {\n        return;\n      }\n      var requestParam = {\n        keyword: options.keyword,\n        orderby: options.orderby || '_distance',\n        page_size: options.page_size || 10,\n        page_index: options.page_index || 1,\n        output: 'json',\n        key: that.key };\n\n      if (options.address_format) {\n        requestParam.address_format = options.address_format;\n      }\n      if (options.filter) {\n        requestParam.filter = options.filter;\n      }\n      var distance = options.distance || \"1000\";\n      var auto_extend = options.auto_extend || 1;\n      var region = null;\n      var rectangle = null;\n      if (options.region) {\n        region = options.region;\n      }\n      if (options.rectangle) {\n        rectangle = options.rectangle;\n      }\n      var locationsuccess = function locationsuccess(result) {\n        if (region && !rectangle) {\n          requestParam.boundary = \"region(\" + region + \",\" + auto_extend + \",\" + result.latitude + \",\" + result.longitude +\n          \")\";\n          if (options.sig) {\n            requestParam.sig = Utils.getSig(requestParam, options.sig, 'search');\n          }\n        } else if (rectangle && !region) {\n          requestParam.boundary = \"rectangle(\" + rectangle + \")\";\n          if (options.sig) {\n            requestParam.sig = Utils.getSig(requestParam, options.sig, 'search');\n          }\n        } else {\n          requestParam.boundary = \"nearby(\" + result.latitude + \",\" + result.longitude + \",\" + distance + \",\" + auto_extend +\n          \")\";\n          if (options.sig) {\n            requestParam.sig = Utils.getSig(requestParam, options.sig, 'search');\n          }\n        }\n        wx.request(Utils.buildWxRequestConfig(options, {\n          url: URL_SEARCH,\n          data: requestParam },\n        'search'));\n      };\n      Utils.locationProcess(options, locationsuccess);\n    } }, { key: \"getSuggestion\", value: function getSuggestion(\n    options) {\n      var that = this;\n      options = options || {};\n      Utils.polyfillParam(options);\n      if (!Utils.checkKeyword(options)) {\n        return;\n      }\n      var requestParam = {\n        keyword: options.keyword,\n        region: options.region || '全国',\n        region_fix: options.region_fix || 0,\n        policy: options.policy || 0,\n        page_size: options.page_size || 10,\n        page_index: options.page_index || 1,\n        get_subpois: options.get_subpois || 0,\n        output: 'json',\n        key: that.key };\n\n      if (options.address_format) {\n        requestParam.address_format = options.address_format;\n      }\n      if (options.filter) {\n        requestParam.filter = options.filter;\n      }\n      if (options.location) {\n        var locationsuccess = function locationsuccess(result) {\n          requestParam.location = result.latitude + ',' + result.longitude;\n          if (options.sig) {\n            requestParam.sig = Utils.getSig(requestParam, options.sig, 'suggest');\n          }\n          wx.request(Utils.buildWxRequestConfig(options, {\n            url: URL_SUGGESTION,\n            data: requestParam },\n          \"suggest\"));\n        };\n        Utils.locationProcess(options, locationsuccess);\n      } else {\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'suggest');\n        }\n        wx.request(Utils.buildWxRequestConfig(options, {\n          url: URL_SUGGESTION,\n          data: requestParam },\n        \"suggest\"));\n      }\n    } }, { key: \"reverseGeocoder\", value: function reverseGeocoder(\n    options) {\n      var that = this;\n      options = options || {};\n      Utils.polyfillParam(options);\n      var requestParam = {\n        coord_type: options.coord_type || 5,\n        get_poi: options.get_poi || 0,\n        output: 'json',\n        key: that.key };\n\n      if (options.poi_options) {\n        requestParam.poi_options = options.poi_options;\n      }\n      var locationsuccess = function locationsuccess(result) {\n        requestParam.location = result.latitude + ',' + result.longitude;\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'reverseGeocoder');\n        }\n        wx.request(Utils.buildWxRequestConfig(options, {\n          url: URL_GET_GEOCODER,\n          data: requestParam },\n        'reverseGeocoder'));\n      };\n      Utils.locationProcess(options, locationsuccess);\n    } }, { key: \"geocoder\", value: function geocoder(\n    options) {\n      var that = this;\n      options = options || {};\n      Utils.polyfillParam(options);\n      if (Utils.checkParamKeyEmpty(options, 'address')) {\n        return;\n      }\n      var requestParam = {\n        address: options.address,\n        output: 'json',\n        key: that.key };\n\n      if (options.region) {\n        requestParam.region = options.region;\n      }\n      if (options.sig) {\n        requestParam.sig = Utils.getSig(requestParam, options.sig, 'geocoder');\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: URL_GET_GEOCODER,\n        data: requestParam },\n      'geocoder'));\n    } }, { key: \"getCityList\", value: function getCityList(\n    options) {\n      var that = this;\n      options = options || {};\n      Utils.polyfillParam(options);\n      var requestParam = {\n        output: 'json',\n        key: that.key };\n\n      if (options.sig) {\n        requestParam.sig = Utils.getSig(requestParam, options.sig, 'getCityList');\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: URL_CITY_LIST,\n        data: requestParam },\n      'getCityList'));\n    } }, { key: \"getDistrictByCityId\", value: function getDistrictByCityId(\n    options) {\n      var that = this;\n      options = options || {};\n      Utils.polyfillParam(options);\n      if (Utils.checkParamKeyEmpty(options, 'id')) {\n        return;\n      }\n      var requestParam = {\n        id: options.id || '',\n        output: 'json',\n        key: that.key };\n\n      if (options.sig) {\n        requestParam.sig = Utils.getSig(requestParam, options.sig, 'getDistrictByCityId');\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: URL_AREA_LIST,\n        data: requestParam },\n      'getDistrictByCityId'));\n    } }, { key: \"calculateDistance\", value: function calculateDistance(\n    options) {\n      var that = this;\n      options = options || {};\n      Utils.polyfillParam(options);\n      if (Utils.checkParamKeyEmpty(options, 'to')) {\n        return;\n      }\n      var requestParam = {\n        mode: options.mode || 'walking',\n        to: Utils.location2query(options.to),\n        output: 'json',\n        key: that.key };\n\n      if (options.from) {\n        options.location = options.from;\n      }\n      if (requestParam.mode == 'straight') {\n        var locationsuccess = function locationsuccess(result) {\n          var locationTo = Utils.getEndLocation(requestParam.to);\n          var data = {\n            message: \"query ok\",\n            result: {\n              elements: [] },\n\n            status: 0 };\n\n          for (var i = 0; i < locationTo.length; i++) {\n            data.result.elements.push({\n              distance: Utils.getDistance(result.latitude, result.longitude, locationTo[i].lat, locationTo[i].lng),\n              duration: 0,\n              from: {\n                lat: result.latitude,\n                lng: result.longitude },\n\n              to: {\n                lat: locationTo[i].lat,\n                lng: locationTo[i].lng } });\n\n\n          }\n          var calculateResult = data.result.elements;\n          var distanceResult = [];\n          for (var i = 0; i < calculateResult.length; i++) {\n            distanceResult.push(calculateResult[i].distance);\n          }\n          return options.success(data, {\n            calculateResult: calculateResult,\n            distanceResult: distanceResult });\n\n        };\n        Utils.locationProcess(options, locationsuccess);\n      } else {\n        var locationsuccess = function locationsuccess(result) {\n          requestParam.from = result.latitude + ',' + result.longitude;\n          if (options.sig) {\n            requestParam.sig = Utils.getSig(requestParam, options.sig, 'calculateDistance');\n          }\n          wx.request(Utils.buildWxRequestConfig(options, {\n            url: URL_DISTANCE,\n            data: requestParam },\n          'calculateDistance'));\n        };\n        Utils.locationProcess(options, locationsuccess);\n      }\n    } }, { key: \"direction\", value: function direction(\n    options) {\n      var that = this;\n      options = options || {};\n      Utils.polyfillParam(options);\n      if (Utils.checkParamKeyEmpty(options, 'to')) {\n        return;\n      }\n      var requestParam = {\n        output: 'json',\n        key: that.key };\n\n      if (typeof options.to == 'string') {\n        requestParam.to = options.to;\n      } else {\n        requestParam.to = options.to.latitude + ',' + options.to.longitude;\n      }\n      var SET_URL_DIRECTION = null;\n      options.mode = options.mode || MODE.driving;\n      SET_URL_DIRECTION = URL_DIRECTION + options.mode;\n      if (options.from) {\n        options.location = options.from;\n      }\n      if (options.mode == MODE.driving) {\n        if (options.from_poi) {\n          requestParam.from_poi = options.from_poi;\n        }\n        if (options.heading) {\n          requestParam.heading = options.heading;\n        }\n        if (options.speed) {\n          requestParam.speed = options.speed;\n        }\n        if (options.accuracy) {\n          requestParam.accuracy = options.accuracy;\n        }\n        if (options.road_type) {\n          requestParam.road_type = options.road_type;\n        }\n        if (options.to_poi) {\n          requestParam.to_poi = options.to_poi;\n        }\n        if (options.from_track) {\n          requestParam.from_track = options.from_track;\n        }\n        if (options.waypoints) {\n          requestParam.waypoints = options.waypoints;\n        }\n        if (options.policy) {\n          requestParam.policy = options.policy;\n        }\n        if (options.plate_number) {\n          requestParam.plate_number = options.plate_number;\n        }\n      }\n      if (options.mode == MODE.transit) {\n        if (options.departure_time) {\n          requestParam.departure_time = options.departure_time;\n        }\n        if (options.policy) {\n          requestParam.policy = options.policy;\n        }\n      }\n      var locationsuccess = function locationsuccess(result) {\n        requestParam.from = result.latitude + ',' + result.longitude;\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'direction', options.mode);\n        }\n        wx.request(Utils.buildWxRequestConfig(options, {\n          url: SET_URL_DIRECTION,\n          data: requestParam },\n        'direction'));\n      };\n      Utils.locationProcess(options, locationsuccess);\n    } }]);return QQMapWX;}();\n;\nmodule.exports = QQMapWX;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///104\n");

/***/ }),

/***/ 11:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction isDebugMode() {\n  /* eslint-disable no-undef */\n  return typeof __channelId__ === 'string' && __channelId__;\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var type = args.shift();\n  if (isDebugMode()) {\n    args.push(args.pop().replace('at ', 'uni-app:///'));\n    return console[type]['apply'](console, args);\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  console[type](msg);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJpc0RlYnVnTW9kZSIsIl9fY2hhbm5lbElkX18iLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInR5cGUiLCJzaGlmdCIsInB1c2giLCJwb3AiLCJyZXBsYWNlIiwiY29uc29sZSIsIm1zZ3MiLCJtYXAiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQUlDLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVI7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFRCxTQUFTQyxXQUFULEdBQXdCO0FBQ3RCO0FBQ0EsU0FBTyxPQUFPQyxhQUFQLEtBQXlCLFFBQXpCLElBQXFDQSxhQUE1QztBQUNEOztBQUVjLFNBQVNDLFNBQVQsR0FBc0I7QUFDbkMsT0FBSyxJQUFJQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ0wsTUFBckIsRUFBNkJNLElBQUksR0FBRyxJQUFJQyxLQUFKLENBQVVILElBQVYsQ0FBcEMsRUFBcURJLElBQUksR0FBRyxDQUFqRSxFQUFvRUEsSUFBSSxHQUFHSixJQUEzRSxFQUFpRkksSUFBSSxFQUFyRixFQUF5RjtBQUN2RkYsUUFBSSxDQUFDRSxJQUFELENBQUosR0FBYUgsU0FBUyxDQUFDRyxJQUFELENBQXRCO0FBQ0Q7QUFDRCxNQUFNQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksS0FBTCxFQUFiO0FBQ0EsTUFBSVQsV0FBVyxFQUFmLEVBQW1CO0FBQ2pCSyxRQUFJLENBQUNLLElBQUwsQ0FBVUwsSUFBSSxDQUFDTSxHQUFMLEdBQVdDLE9BQVgsQ0FBbUIsS0FBbkIsRUFBMEIsYUFBMUIsQ0FBVjtBQUNBLFdBQU9DLE9BQU8sQ0FBQ0wsSUFBRCxDQUFQLENBQWMsT0FBZCxFQUF1QkssT0FBdkIsRUFBZ0NSLElBQWhDLENBQVA7QUFDRDs7QUFFRCxNQUFJUyxJQUFJLEdBQUdULElBQUksQ0FBQ1UsR0FBTCxDQUFTLFVBQVV2QixDQUFWLEVBQWE7QUFDL0IsUUFBSWdCLElBQUksR0FBR2QsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVg7O0FBRUEsUUFBSWdCLElBQUksQ0FBQ1EsV0FBTCxPQUF1QixpQkFBM0IsRUFBOEM7QUFDNUMsVUFBSTtBQUNGeEIsU0FBQyxHQUFHLHFCQUFxQnlCLElBQUksQ0FBQ0MsU0FBTCxDQUFlMUIsQ0FBZixDQUFyQixHQUF5QyxnQkFBN0M7QUFDRCxPQUZELENBRUUsT0FBTzJCLENBQVAsRUFBVTtBQUNWM0IsU0FBQyxHQUFHLGlCQUFKO0FBQ0Q7QUFDRixLQU5ELE1BTU87QUFDTCxVQUFJQSxDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNkQSxTQUFDLEdBQUcsWUFBSjtBQUNELE9BRkQsTUFFTyxJQUFJQSxDQUFDLEtBQUs0QixTQUFWLEVBQXFCO0FBQzFCNUIsU0FBQyxHQUFHLGlCQUFKO0FBQ0QsT0FGTSxNQUVBO0FBQ0wsWUFBSTZCLEtBQUssR0FBRzlCLEtBQUssQ0FBQ0MsQ0FBRCxDQUFMLENBQVM4QixXQUFULEVBQVo7O0FBRUEsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3QzdCLFdBQUMsR0FBRyxjQUFjNkIsS0FBZCxHQUFzQixLQUF0QixHQUE4QjdCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDNkIsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTDdCLFdBQUMsR0FBRytCLE1BQU0sQ0FBQy9CLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFPQSxDQUFQO0FBQ0QsR0ExQlUsQ0FBWDtBQTJCQSxNQUFJZ0MsR0FBRyxHQUFHLEVBQVY7O0FBRUEsTUFBSVYsSUFBSSxDQUFDZixNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDbkIsUUFBSTBCLE9BQU8sR0FBR1gsSUFBSSxDQUFDSCxHQUFMLEVBQWQ7QUFDQWEsT0FBRyxHQUFHVixJQUFJLENBQUNZLElBQUwsQ0FBVSxhQUFWLENBQU47O0FBRUEsUUFBSUQsT0FBTyxDQUFDRSxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSCxTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBVEQsTUFTTztBQUNMRCxPQUFHLEdBQUdWLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDs7QUFFREQsU0FBTyxDQUFDTCxJQUFELENBQVAsQ0FBY2dCLEdBQWQ7QUFDRCIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgdmFyIHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuICByZXR1cm4gcy5zdWJzdHJpbmcoOCwgcy5sZW5ndGggLSAxKVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0RlYnVnTW9kZSAoKSB7XHJcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuICByZXR1cm4gdHlwZW9mIF9fY2hhbm5lbElkX18gPT09ICdzdHJpbmcnICYmIF9fY2hhbm5lbElkX19cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9nICgpIHtcclxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV1cclxuICB9XHJcbiAgY29uc3QgdHlwZSA9IGFyZ3Muc2hpZnQoKVxyXG4gIGlmIChpc0RlYnVnTW9kZSgpKSB7XHJcbiAgICBhcmdzLnB1c2goYXJncy5wb3AoKS5yZXBsYWNlKCdhdCAnLCAndW5pLWFwcDovLy8nKSlcclxuICAgIHJldHVybiBjb25zb2xlW3R5cGVdWydhcHBseSddKGNvbnNvbGUsIGFyZ3MpXHJcbiAgfVxyXG5cclxuICB2YXIgbXNncyA9IGFyZ3MubWFwKGZ1bmN0aW9uICh2KSB7XHJcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG5cclxuICAgIGlmICh0eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdbb2JqZWN0IG9iamVjdF0nKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdiA9ICctLS1CRUdJTjpKU09OLS0tJyArIEpTT04uc3RyaW5naWZ5KHYpICsgJy0tLUVORDpKU09OLS0tJ1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgdiA9ICdbb2JqZWN0IG9iamVjdF0nXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh2ID09PSBudWxsKSB7XHJcbiAgICAgICAgdiA9ICctLS1OVUxMLS0tJ1xyXG4gICAgICB9IGVsc2UgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHYgPSAnLS0tVU5ERUZJTkVELS0tJ1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciB2VHlwZSA9IHR5cG9mKHYpLnRvVXBwZXJDYXNlKClcclxuXHJcbiAgICAgICAgaWYgKHZUeXBlID09PSAnTlVNQkVSJyB8fCB2VHlwZSA9PT0gJ0JPT0xFQU4nKSB7XHJcbiAgICAgICAgICB2ID0gJy0tLUJFR0lOOicgKyB2VHlwZSArICctLS0nICsgdiArICctLS1FTkQ6JyArIHZUeXBlICsgJy0tLSdcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdiA9IFN0cmluZyh2KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2XHJcbiAgfSlcclxuICB2YXIgbXNnID0gJydcclxuXHJcbiAgaWYgKG1zZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgdmFyIGxhc3RNc2cgPSBtc2dzLnBvcCgpXHJcbiAgICBtc2cgPSBtc2dzLmpvaW4oJy0tLUNPTU1BLS0tJylcclxuXHJcbiAgICBpZiAobGFzdE1zZy5pbmRleE9mKCcgYXQgJykgPT09IDApIHtcclxuICAgICAgbXNnICs9IGxhc3RNc2dcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1zZyArPSAnLS0tQ09NTUEtLS0nICsgbGFzdE1zZ1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBtc2cgPSBtc2dzWzBdXHJcbiAgfVxyXG5cclxuICBjb25zb2xlW3R5cGVdKG1zZylcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n");

/***/ }),

/***/ 12:
/*!******************************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/static/js/imTools.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" //表情图片图床名称 ，由于我上传的第三方图床名称会有改变，所以有此数据来做对应，您实际应用中应该不需要\nvar onlineEmoji = {\n  \"100.gif\": \"AbNQgA.gif\",\n  \"101.gif\": \"AbN3ut.gif\",\n  \"102.gif\": \"AbNM3d.gif\",\n  \"103.gif\": \"AbN8DP.gif\",\n  \"104.gif\": \"AbNljI.gif\",\n  \"105.gif\": \"AbNtUS.gif\",\n  \"106.gif\": \"AbNGHf.gif\",\n  \"107.gif\": \"AbNYE8.gif\",\n  \"108.gif\": \"AbNaCQ.gif\",\n  \"109.gif\": \"AbNN4g.gif\",\n  \"110.gif\": \"AbN0vn.gif\",\n  \"111.gif\": \"AbNd3j.gif\",\n  \"112.gif\": \"AbNsbV.gif\",\n  \"113.gif\": \"AbNwgs.gif\",\n  \"114.gif\": \"AbNrD0.gif\",\n  \"115.gif\": \"AbNDuq.gif\",\n  \"116.gif\": \"AbNg5F.gif\",\n  \"117.gif\": \"AbN6ET.gif\",\n  \"118.gif\": \"AbNcUU.gif\",\n  \"119.gif\": \"AbNRC4.gif\",\n  \"120.gif\": \"AbNhvR.gif\",\n  \"121.gif\": \"AbNf29.gif\",\n  \"122.gif\": \"AbNW8J.gif\",\n  \"123.gif\": \"AbNob6.gif\",\n  \"124.gif\": \"AbN5K1.gif\",\n  \"125.gif\": \"AbNHUO.gif\",\n  \"126.gif\": \"AbNIDx.gif\",\n  \"127.gif\": \"AbN7VK.gif\",\n  \"128.gif\": \"AbNb5D.gif\",\n  \"129.gif\": \"AbNX2d.gif\",\n  \"130.gif\": \"AbNLPe.gif\",\n  \"131.gif\": \"AbNjxA.gif\",\n  \"132.gif\": \"AbNO8H.gif\",\n  \"133.gif\": \"AbNxKI.gif\",\n  \"134.gif\": \"AbNzrt.gif\",\n  \"135.gif\": \"AbU9Vf.gif\",\n  \"136.gif\": \"AbUSqP.gif\",\n  \"137.gif\": \"AbUCa8.gif\",\n  \"138.gif\": \"AbUkGQ.gif\",\n  \"139.gif\": \"AbUFPg.gif\",\n  \"140.gif\": \"AbUPIS.gif\",\n  \"141.gif\": \"AbUZMn.gif\",\n  \"142.gif\": \"AbUExs.gif\",\n  \"143.gif\": \"AbUA2j.gif\",\n  \"144.gif\": \"AbUMIU.gif\",\n  \"145.gif\": \"AbUerq.gif\",\n  \"146.gif\": \"AbUKaT.gif\",\n  \"147.gif\": \"AbUmq0.gif\",\n  \"148.gif\": \"AbUuZV.gif\",\n  \"149.gif\": \"AbUliF.gif\",\n  \"150.gif\": \"AbU1G4.gif\",\n  \"151.gif\": \"AbU8z9.gif\",\n  \"152.gif\": \"AbU3RJ.gif\",\n  \"153.gif\": \"AbUYs1.gif\",\n  \"154.gif\": \"AbUJMR.gif\",\n  \"155.gif\": \"AbUadK.gif\",\n  \"156.gif\": \"AbUtqx.gif\",\n  \"157.gif\": \"AbUUZ6.gif\",\n  \"158.gif\": \"AbUBJe.gif\",\n  \"159.gif\": \"AbUdIO.gif\",\n  \"160.gif\": \"AbU0iD.gif\",\n  \"161.gif\": \"AbUrzd.gif\",\n  \"162.gif\": \"AbUDRH.gif\",\n  \"163.gif\": \"AbUyQA.gif\",\n  \"164.gif\": \"AbUWo8.gif\",\n  \"165.gif\": \"AbU6sI.gif\",\n  \"166.gif\": \"AbU2eP.gif\",\n  \"167.gif\": \"AbUcLt.gif\",\n  \"168.gif\": \"AbU4Jg.gif\",\n  \"169.gif\": \"AbURdf.gif\",\n  \"170.gif\": \"AbUhFS.gif\",\n  \"171.gif\": \"AbU5WQ.gif\",\n  \"172.gif\": \"AbULwV.gif\",\n  \"173.gif\": \"AbUIzj.gif\",\n  \"174.gif\": \"AbUTQs.gif\",\n  \"175.gif\": \"AbU7yn.gif\",\n  \"176.gif\": \"AbUqe0.gif\",\n  \"177.gif\": \"AbUHLq.gif\",\n  \"178.gif\": \"AbUOoT.gif\",\n  \"179.gif\": \"AbUvYF.gif\",\n  \"180.gif\": \"AbUjFU.gif\",\n  \"181.gif\": \"AbaSSJ.gif\",\n  \"182.gif\": \"AbUxW4.gif\",\n  \"183.gif\": \"AbaCO1.gif\",\n  \"184.gif\": \"Abapl9.gif\",\n  \"185.gif\": \"Aba9yR.gif\",\n  \"186.gif\": \"AbaFw6.gif\",\n  \"187.gif\": \"Abaiex.gif\",\n  \"188.gif\": \"AbakTK.gif\",\n  \"189.gif\": \"AbaZfe.png\",\n  \"190.gif\": \"AbaEFO.gif\",\n  \"191.gif\": \"AbaVYD.gif\",\n  \"192.gif\": \"AbamSH.gif\",\n  \"193.gif\": \"AbaKOI.gif\",\n  \"194.gif\": \"Abanld.gif\",\n  \"195.gif\": \"Abau6A.gif\",\n  \"196.gif\": \"AbaQmt.gif\",\n  \"197.gif\": \"Abal0P.gif\",\n  \"198.gif\": \"AbatpQ.gif\",\n  \"199.gif\": \"Aba1Tf.gif\",\n  \"200.png\": \"Aba8k8.png\",\n  \"201.png\": \"AbaGtS.png\",\n  \"202.png\": \"AbaJfg.png\",\n  \"203.png\": \"AbaNlj.png\",\n  \"204.png\": \"Abawmq.png\",\n  \"205.png\": \"AbaU6s.png\",\n  \"206.png\": \"AbaaXn.png\",\n  \"207.png\": \"Aba000.png\",\n  \"208.png\": \"AbarkT.png\",\n  \"209.png\": \"AbastU.png\",\n  \"210.png\": \"AbaB7V.png\",\n  \"211.png\": \"Abafn1.png\",\n  \"212.png\": \"Abacp4.png\",\n  \"213.png\": \"AbayhF.png\",\n  \"214.png\": \"Abag1J.png\",\n  \"215.png\": \"Aba2c9.png\",\n  \"216.png\": \"AbaRXR.png\",\n  \"217.png\": \"Aba476.png\",\n  \"218.png\": \"Abah0x.png\",\n  \"219.png\": \"Abdg58.png\" };\n\n\nvar emojiList = [\n[{\n  \"url\": \"100.gif\",\n  alt: \"[微笑]\" },\n{\n  \"url\": \"101.gif\",\n  alt: \"[伤心]\" },\n{\n  \"url\": \"102.gif\",\n  alt: \"[美女]\" },\n{\n  \"url\": \"103.gif\",\n  alt: \"[发呆]\" },\n{\n  \"url\": \"104.gif\",\n  alt: \"[墨镜]\" },\n{\n  \"url\": \"105.gif\",\n  alt: \"[哭]\" },\n{\n  \"url\": \"106.gif\",\n  alt: \"[羞]\" },\n{\n  \"url\": \"107.gif\",\n  alt: \"[哑]\" },\n{\n  \"url\": \"108.gif\",\n  alt: \"[睡]\" },\n{\n  \"url\": \"109.gif\",\n  alt: \"[哭]\" },\n{\n  \"url\": \"110.gif\",\n  alt: \"[囧]\" },\n{\n  \"url\": \"111.gif\",\n  alt: \"[怒]\" },\n{\n  \"url\": \"112.gif\",\n  alt: \"[调皮]\" },\n{\n  \"url\": \"113.gif\",\n  alt: \"[笑]\" },\n{\n  \"url\": \"114.gif\",\n  alt: \"[惊讶]\" },\n{\n  \"url\": \"115.gif\",\n  alt: \"[难过]\" },\n{\n  \"url\": \"116.gif\",\n  alt: \"[酷]\" },\n{\n  \"url\": \"117.gif\",\n  alt: \"[汗]\" },\n{\n  \"url\": \"118.gif\",\n  alt: \"[抓狂]\" },\n{\n  \"url\": \"119.gif\",\n  alt: \"[吐]\" },\n{\n  \"url\": \"120.gif\",\n  alt: \"[笑]\" },\n{\n  \"url\": \"121.gif\",\n  alt: \"[快乐]\" },\n{\n  \"url\": \"122.gif\",\n  alt: \"[奇]\" },\n{\n  \"url\": \"123.gif\",\n  alt: \"[傲]\" }],\n\n[{\n  \"url\": \"124.gif\",\n  alt: \"[饿]\" },\n{\n  \"url\": \"125.gif\",\n  alt: \"[累]\" },\n{\n  \"url\": \"126.gif\",\n  alt: \"[吓]\" },\n{\n  \"url\": \"127.gif\",\n  alt: \"[汗]\" },\n{\n  \"url\": \"128.gif\",\n  alt: \"[高兴]\" },\n{\n  \"url\": \"129.gif\",\n  alt: \"[闲]\" },\n{\n  \"url\": \"130.gif\",\n  alt: \"[努力]\" },\n{\n  \"url\": \"131.gif\",\n  alt: \"[骂]\" },\n{\n  \"url\": \"132.gif\",\n  alt: \"[疑问]\" },\n{\n  \"url\": \"133.gif\",\n  alt: \"[秘密]\" },\n{\n  \"url\": \"134.gif\",\n  alt: \"[乱]\" },\n{\n  \"url\": \"135.gif\",\n  alt: \"[疯]\" },\n{\n  \"url\": \"136.gif\",\n  alt: \"[哀]\" },\n{\n  \"url\": \"137.gif\",\n  alt: \"[鬼]\" },\n{\n  \"url\": \"138.gif\",\n  alt: \"[打击]\" },\n{\n  \"url\": \"139.gif\",\n  alt: \"[bye]\" },\n{\n  \"url\": \"140.gif\",\n  alt: \"[汗]\" },\n{\n  \"url\": \"141.gif\",\n  alt: \"[抠]\" },\n{\n  \"url\": \"142.gif\",\n  alt: \"[鼓掌]\" },\n{\n  \"url\": \"143.gif\",\n  alt: \"[糟糕]\" },\n{\n  \"url\": \"144.gif\",\n  alt: \"[恶搞]\" },\n{\n  \"url\": \"145.gif\",\n  alt: \"[什么]\" },\n{\n  \"url\": \"146.gif\",\n  alt: \"[什么]\" },\n{\n  \"url\": \"147.gif\",\n  alt: \"[累]\" }],\n\n[{\n  \"url\": \"148.gif\",\n  alt: \"[看]\" },\n{\n  \"url\": \"149.gif\",\n  alt: \"[难过]\" },\n{\n  \"url\": \"150.gif\",\n  alt: \"[难过]\" },\n{\n  \"url\": \"151.gif\",\n  alt: \"[坏]\" },\n{\n  \"url\": \"152.gif\",\n  alt: \"[亲]\" },\n{\n  \"url\": \"153.gif\",\n  alt: \"[吓]\" },\n{\n  \"url\": \"154.gif\",\n  alt: \"[可怜]\" },\n{\n  \"url\": \"155.gif\",\n  alt: \"[刀]\" },\n{\n  \"url\": \"156.gif\",\n  alt: \"[水果]\" },\n{\n  \"url\": \"157.gif\",\n  alt: \"[酒]\" },\n{\n  \"url\": \"158.gif\",\n  alt: \"[篮球]\" },\n{\n  \"url\": \"159.gif\",\n  alt: \"[乒乓]\" },\n{\n  \"url\": \"160.gif\",\n  alt: \"[咖啡]\" },\n{\n  \"url\": \"161.gif\",\n  alt: \"[美食]\" },\n{\n  \"url\": \"162.gif\",\n  alt: \"[动物]\" },\n{\n  \"url\": \"163.gif\",\n  alt: \"[鲜花]\" },\n{\n  \"url\": \"164.gif\",\n  alt: \"[枯]\" },\n{\n  \"url\": \"165.gif\",\n  alt: \"[唇]\" },\n{\n  \"url\": \"166.gif\",\n  alt: \"[爱]\" },\n{\n  \"url\": \"167.gif\",\n  alt: \"[分手]\" },\n{\n  \"url\": \"168.gif\",\n  alt: \"[生日]\" },\n{\n  \"url\": \"169.gif\",\n  alt: \"[电]\" },\n{\n  \"url\": \"170.gif\",\n  alt: \"[炸弹]\" },\n{\n  \"url\": \"171.gif\",\n  alt: \"[刀子]\" }],\n\n[{\n  \"url\": \"172.gif\",\n  alt: \"[足球]\" },\n{\n  \"url\": \"173.gif\",\n  alt: \"[瓢虫]\" },\n{\n  \"url\": \"174.gif\",\n  alt: \"[翔]\" },\n{\n  \"url\": \"175.gif\",\n  alt: \"[月亮]\" },\n{\n  \"url\": \"176.gif\",\n  alt: \"[太阳]\" },\n{\n  \"url\": \"177.gif\",\n  alt: \"[礼物]\" },\n{\n  \"url\": \"178.gif\",\n  alt: \"[抱抱]\" },\n{\n  \"url\": \"179.gif\",\n  alt: \"[拇指]\" },\n{\n  \"url\": \"180.gif\",\n  alt: \"[贬低]\" },\n{\n  \"url\": \"181.gif\",\n  alt: \"[握手]\" },\n{\n  \"url\": \"182.gif\",\n  alt: \"[剪刀手]\" },\n{\n  \"url\": \"183.gif\",\n  alt: \"[抱拳]\" },\n{\n  \"url\": \"184.gif\",\n  alt: \"[勾引]\" },\n{\n  \"url\": \"185.gif\",\n  alt: \"[拳头]\" },\n{\n  \"url\": \"186.gif\",\n  alt: \"[小拇指]\" },\n{\n  \"url\": \"187.gif\",\n  alt: \"[拇指八]\" },\n{\n  \"url\": \"188.gif\",\n  alt: \"[食指]\" },\n{\n  \"url\": \"189.gif\",\n  alt: \"[ok]\" },\n{\n  \"url\": \"190.gif\",\n  alt: \"[情侣]\" },\n{\n  \"url\": \"191.gif\",\n  alt: \"[爱心]\" },\n{\n  \"url\": \"192.gif\",\n  alt: \"[蹦哒]\" },\n{\n  \"url\": \"193.gif\",\n  alt: \"[颤抖]\" },\n{\n  \"url\": \"194.gif\",\n  alt: \"[怄气]\" },\n{\n  \"url\": \"195.gif\",\n  alt: \"[跳舞]\" }],\n\n[{\n  \"url\": \"196.gif\",\n  alt: \"[发呆]\" },\n{\n  \"url\": \"197.gif\",\n  alt: \"[背着]\" },\n{\n  \"url\": \"198.gif\",\n  alt: \"[伸手]\" },\n{\n  \"url\": \"199.gif\",\n  alt: \"[耍帅]\" },\n{\n  \"url\": \"200.png\",\n  alt: \"[微笑]\" },\n{\n  \"url\": \"201.png\",\n  alt: \"[生病]\" },\n{\n  \"url\": \"202.png\",\n  alt: \"[哭泣]\" },\n{\n  \"url\": \"203.png\",\n  alt: \"[吐舌]\" },\n{\n  \"url\": \"204.png\",\n  alt: \"[迷糊]\" },\n{\n  \"url\": \"205.png\",\n  alt: \"[瞪眼]\" },\n{\n  \"url\": \"206.png\",\n  alt: \"[恐怖]\" },\n{\n  \"url\": \"207.png\",\n  alt: \"[忧愁]\" },\n{\n  \"url\": \"208.png\",\n  alt: \"[眨眉]\" },\n{\n  \"url\": \"209.png\",\n  alt: \"[闭眼]\" },\n{\n  \"url\": \"210.png\",\n  alt: \"[鄙视]\" },\n{\n  \"url\": \"211.png\",\n  alt: \"[阴暗]\" },\n{\n  \"url\": \"212.png\",\n  alt: \"[小鬼]\" },\n{\n  \"url\": \"213.png\",\n  alt: \"[礼物]\" },\n{\n  \"url\": \"214.png\",\n  alt: \"[拜佛]\" },\n{\n  \"url\": \"215.png\",\n  alt: \"[力量]\" },\n{\n  \"url\": \"216.png\",\n  alt: \"[金钱]\" },\n{\n  \"url\": \"217.png\",\n  alt: \"[蛋糕]\" },\n{\n  \"url\": \"218.png\",\n  alt: \"[彩带]\" },\n{\n  \"url\": \"219.png\",\n  alt: \"[礼物]\" }]];\n\n\nmodule.exports = {\n  emojiList: emojiList,\n  onlineEmoji: onlineEmoji,\n  // 替换表情符号为图片\n  replaceEmoji: function replaceEmoji(str) {\n    var replacedStr = str.replace(/\\[([^(\\]|\\[)]*)\\]/g, function (item, index) {\n      // console.log(\"item: \" + item);\n      for (var i = 0; i < emojiList.length; i++) {\n        var row = emojiList[i];\n        for (var j = 0; j < row.length; j++) {\n          var EM = row[j];\n          if (EM.alt == item) {\n            //在线表情路径，图文混排必须使用网络路径，请上传一份表情到你的服务器后再替换此路径 \n            //比如你上传服务器后，你的100.gif路径为https://www.xxx.com/emoji/100.gif 则替换onlinePath填写为https://www.xxx.com/emoji/\n            var onlinePath = 'https://s2.ax1x.com/2019/04/12/';\n            var imgstr = '<img src=\"' + onlinePath + onlineEmoji[EM.url] + '\">';\n            // console.log(\"imgstr: \" + imgstr);\n            return imgstr;\n          }\n        }\n      }\n    });\n    return '<div style=\"display: flex;align-items: center;word-wrap:break-word;\">' + replacedStr + '</div>';\n    // return replacedStr;\n  },\n\n  //按指定字段升序\n  compareAscSort: function compareAscSort(propertyName) {\n    return function (object1, object2) {\n      var value1 = object1[propertyName];\n      var value2 = object2[propertyName];\n      if (value2 < value1) {\n        return 1;\n      } else if (value2 > value1) {\n        return -1;\n      } else {\n        return 0;\n      }\n    };\n  },\n  //按指定字段降序\t  \n  compareDescSort: function compareDescSort(propertyName) {\n    return function (object1, object2) {\n      var value1 = object1[propertyName];\n      var value2 = object2[propertyName];\n      if (value2 > value1) {\n        return 1;\n      } else if (value2 < value1) {\n        return -1;\n      } else {\n        return 0;\n      }\n    };\n  },\n  // 获取性别\n  getGender: function getGender(txt) {\n    var gender = 0; // 未知\n    switch (txt) {\n      case \"unknown\":\n        break;\n      case \"male\":\n        gender = 1; // 男\n        break;\n      case \"female\":\n        gender = 2; // 女\n        break;\n      default:\n        break;}\n\n    return gender;\n  },\n  // 数组去除重复，item为重复判定项\n  combineObjectInList: function combineObjectInList(arr, item) {\n    var obj = {};\n    var a = [];\n    for (var i in arr) {\n      if (!obj[arr[i][item]]) {\n        obj[arr[i][item]] = arr[i]; //数组克隆\n      }\n    }\n    for (var k in obj) {\n      a.push(obj[k]);\n    }\n    return a;\n  } };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 13:
/*!*************************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/static/js/im.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {\n// if(plus.os.name == 'iOS'){\nvar jpushIMWeexPlugin = uni.requireNativePlugin('YOYO-JPushIM');\n\nvar EventHandlers = {\n  receiveMessage: [],\n  receiptMessage: [],\n  clickMessageNotification: [],\n  loginStateChanged: [],\n  sendMessageResponse: [], // 发送消息回调\n  friendInvitiaonChange: [] // 好友事件回调\n};\n\nvar jpushIM = {\n  /**\r\n                 * 初始化 , JPushIM 必须先初始化才能执行其他操作(比如接收事件传递)\r\n                 */\n  init: function init() {\n    // console.log('极光初始化')\n    jpushIMWeexPlugin.setup(function (notification) {\n      for (var index in EventHandlers.receiveMessage) {\n        EventHandlers.receiveMessage[index].apply(undefined, [notification]);\n      }\n\n    }, function (notification) {\n      // 两种用法都可以\n      __f__(\"log\", \"JMessagePlugin 消息已读回执: \" + JSON.stringify(notification), \" at static\\\\js\\\\im.js:27\");\n      for (var index in EventHandlers.receiptMessage) {\n        EventHandlers.receiptMessage[index].apply(undefined, [notification]);\n      }\n\n    }, function (notification) {\n      __f__(\"log\", \"JMessagePlugin 点击通知栏消息事件: \" + JSON.stringify(notification), \" at static\\\\js\\\\im.js:33\");\n      for (var index in EventHandlers.clickMessageNotification) {\n        EventHandlers.clickMessageNotification[index].apply(undefined, [notification]);\n      }\n\n    }, function (notification) {\n      // uni.$emit('loginStateChanged', notification)\n      __f__(\"log\", \"JMessagePlugin 登录状态变更: \" + JSON.stringify(notification), \" at static\\\\js\\\\im.js:40\");\n      for (var index in EventHandlers.loginStateChanged) {\n        EventHandlers.loginStateChanged[index].apply(undefined, [notification]);\n      }\n      // EventHandlers.loginStateChanged.apply([notification]);\n    }, function (notification) {\n      // console.log(\"JMessagePlugin 消息发送结果回执：\" + JSON.stringify(notification));\n      for (var index in EventHandlers.sendMessageResponse) {\n        EventHandlers.sendMessageResponse[index].apply(undefined, [notification]);\n      }\n    }, function (notification) {\n      // console.log(\"JMessagePlugin 好友事件变更回调：\" + JSON.stringify(notification));\n      for (var index in EventHandlers.friendInvitiaonChange) {\n        EventHandlers.friendInvitiaonChange[index].apply(undefined, [notification]);\n      }\n    });\n  },\n  // 获取当前版本信息\n  getVersion: function getVersion(callback) {\n    jpushIMWeexPlugin.getVersion(callback);\n  },\n  /**\r\n      * 注册用户。\r\n      * @param {object} params = {\r\n      *  username: String,\r\n      *  password: String,\r\n      *  nickname: String,\r\n      *  ...\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息',data:null}) {}\r\n      */\n  userRegister: function userRegister(params, callback) {\n    __f__(\"log\", params, \" at static\\\\js\\\\im.js:72\");\n    jpushIMWeexPlugin.userRegister(params, callback);\n  },\n  /**\r\n      * 用户登录\r\n      * @param {object} params = {\r\n      *  username: 'yourUsername',\r\n      *  password: 'yourPassword',\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息',data:null}) {}\r\n      */\n  userLogin: function userLogin(params, callback) {\n    __f__(\"log\", params, \" at static\\\\js\\\\im.js:84\");\n    jpushIMWeexPlugin.userLogin(params, callback);\n  },\n  // 用户登录退出\n  logout: function logout(callback) {\n    jpushIMWeexPlugin.logout(callback);\n  },\n  /**\r\n      * 登录成功则返回用户信息，未登录则对应用户信息为空对象。\r\n      *\r\n      * @param {function} success = function (myInfo) {}\r\n      */\n  getMyInfo: function getMyInfo(callback) {\n    jpushIMWeexPlugin.getMyInfo(callback);\n  },\n  /**\r\n      * 获取用户信息，此接口可用来获取不同 appKey 下用户的信息，如果 appKey 为空，则默认获取当前 appKey 下的用户信息。\r\n      *\r\n      * @param {object} params = {'username': String, 'appKey': string}\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息',data:null}) {}\r\n      */\n  getUserInfo: function getUserInfo(params, callback) {\n    jpushIMWeexPlugin.getUserInfo(params, callback);\n  },\n  /**\r\n      * @param {object} params = {'oldPwd': String, 'newPwd': string}\r\n      */\n  updateMyPassword: function updateMyPassword(params, callback) {\n    jpushIMWeexPlugin.updateMyPassword(params, callback);\n  },\n  /**\r\n      * 更新当前用户头像。\r\n      * @param {object} params = {\r\n      *  imgPath: string // 本地图片绝对路径。\r\n      * }\r\n      * 注意 Android 与 iOS 的文件路径是不同的：\r\n      *   - Android 类似：/storage/emulated/0/DCIM/Camera/IMG_20160526_130223.jpg\r\n      *   - iOS 类似：/var/mobile/Containers/Data/Application/7DC5CDFF-6581-4AD3-B165-B604EBAB1250/tmp/photo.jpg\r\n      */\n  updateMyAvatar: function updateMyAvatar(params, callback) {\n    jpushIMWeexPlugin.updateMyAvatar(params, callback);\n  },\n  /**\r\n      * 更新当前登录用户的信息。\r\n      *\r\n      * @param {object} params = {'field': '需要更新的字段值'}\r\n      *\r\n      *  field 包括：nickname（昵称）, birthday（生日）, signature（签名）, gender（性别）, region（地区）, address（具体地址），extras（附加字段）。\r\n      *  如：{\r\n      *    'birthday': Number,  // 生日日期的毫秒数\r\n      *    'gender': String,    // Android中为：'male' / 'female' / 'unknown' iOS为0男，1女\r\n      *    'extras': Object     // 附加字段 value 必须为 String\r\n      *    ...                  // 其余皆为 String 类型\r\n      *  }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息'}) {}\r\n      */\n  updateMyInfo: function updateMyInfo(params, callback) {\n    jpushIMWeexPlugin.updateMyInfo(params, callback);\n  },\n  /**\r\n      * 获取所有会话未读消息总数\r\n      * @param {function} callback = function([{count: number}])\r\n      */\n  getAllUnreadCount: function getAllUnreadCount(callback) {\n    jpushIMWeexPlugin.getAllUnreadCount(callback);\n  },\n  /**\r\n      * 仅限iOS支持\r\n      * @param {Object} params\r\n      */\n  setBadge: function setBadge(number) {\n    if (plus.os.name == \"iOS\") {\n      jpushIMWeexPlugin.setBadge(number);\n    }\n  },\n  /**\r\n      * 设置消息已读\r\n      * @param {object} params = {\r\n      *   必填，不可为空\r\n      *  ‘type’: String  single/group/chatroom\r\n      *\r\n      *   type为single时,除了下面的其他值可缺省\r\n      *  'username': String\r\n      *  'appKey': String\r\n      *\r\n      *   type为group时,除了下面的其他值可缺省\r\n      *  'groupId': String\r\n      *\r\n      *   type为chatroom时,除了下面的其他值可缺省\r\n      *  'roomId': String\r\n      *\r\n      *    必填，不可为空\r\n      *   'id': String\r\n      *\r\n      * }\r\n      *  @param {function} success =  function () {}\r\n      *  @param {function} error =  function ({'errorCode': '错误码', 'errorMsg': '错误信息'}) {}\r\n      */\n  setMessageHaveRead: function setMessageHaveRead(params, callback) {\n    jpushIMWeexPlugin.setMessageHaveRead(params, callback);\n  },\n  /**\r\n      * 发送文本消息\r\n      * @param {object} params = {\r\n      *  'type': String,                                // 'single' / 'group' / 'chatRoom'\r\n      *  'groupId': String,                             // 当 type 为 'group' 时，groupId 不能为空\r\n      *  'username': String,                            // 当 type 为 'single' 时，username 不能为空\r\n      *  'appKey': String,                              // 当 type 为 'single' 时，用于指定对象所属应用的 appKey。如果为空，默认为当前应用\r\n      *  'roomId': String,                              // 当 type 为 'chatRoom' 时，roomId 不能为空\r\n      *  'text': String,                                // 消息内容\r\n      *  'extras': Object,                              // Optional. 自定义键值对 = {'key1': 'value1'}\r\n      *  'messageSendingOptions': MessageSendingOptions // Optional. MessageSendingOptions 对象\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息','data':{}}) {}\r\n      */\n  sendTextMessage: function sendTextMessage(params, callback) {\n    jpushIMWeexPlugin.sendTextMessage(params, callback);\n  },\n  /**\r\n      * @param {object} params = {\r\n      *  'type': String,                                // 'single' / 'group' / 'chatRoom'\r\n      *  'groupId': String,                             // 当 type 为 'group' 时，groupId 不能为空\r\n      *  'username': String,                            // 当 type 为 'single' 时，username 不能为空\r\n      *  'appKey': String,                              // 当 type 为 'single' 时，用于指定对象所属应用的 appKey。如果为空，默认为当前应用\r\n      *  'roomId': String,                              // 当 type 为 'chatRoom' 时，roomId 不能为空\r\n      *  'path': String,                                // 本地图片绝对路径。\r\n      *  'extras': object,                              // Optional. 自定义键值对 = {'key1': 'value1'}\r\n      *  'messageSendingOptions': MessageSendingOptions // Optional. MessageSendingOptions 对象\r\n      * }\r\n      * 注意 Android 与 iOS 的文件路径是不同的：\r\n      *   - Android 类似：/storage/emulated/0/DCIM/Camera/IMG_20160526_130223.jpg\r\n      *   - iOS 类似：/var/mobile/Containers/Data/Application/7DC5CDFF-6581-4AD3-B165-B604EBAB1250/tmp/photo.jpg\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息','data':{}}) {}\r\n      */\n  sendImageMessage: function sendImageMessage(params, callback) {\n    jpushIMWeexPlugin.sendImageMessage(params, callback);\n  },\n  /**\r\n      * @param {object} params = {\r\n      *  'type': String,                                // 'single' / 'group'\r\n      *  'groupId': String,                             // 当 type 为 'group' 时，groupId 不能为空\r\n      *  'username': String,                            // 当 type 为 'single' 时，username 不能为空\r\n      *  'appKey': String,                              // 当 type 为 'single' 时，用于指定对象所属应用的 appKey。如果为空，默认为当前应用。\r\n      *  'roomId': String,                              // 当 type 为 'chatRoom' 时，roomId 不能为空\r\n      *  'path': String,                                // 本地语音文件路径。\r\n      *  'extras': object,                              // Optional. 自定义键值对 = {'key1': 'value1'}\r\n      *  'messageSendingOptions': MessageSendingOptions // Optional. MessageSendingOptions 对象。\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息','data':{}})\r\n      */\n  sendVoiceMessage: function sendVoiceMessage(params, callback) {\n    jpushIMWeexPlugin.sendVoiceMessage(params, callback);\n  },\n  /**\r\n      * 从最新的消息开始获取历史消息。\r\n      * 当 limit = -1 而 from >= 0 时，返回从 from 开始余下的所有历史消息。如果 from 大于历史消息总数，则返回空数组。\r\n      * 例如：当 from = 0 && limit = -1 时，返回所有历史消息。\r\n      *\r\n      * @param {object} params = {\r\n      *  'type': String,            // 'single' / 'group' / 'chatRoom'\r\n      *  'groupId': String,         // 当 type 为 'group' 时，groupId 不能为空。\r\n      *  'username': String,        // 当 type 为 'single' 时，username 不能为空。\r\n      *  'appKey': String,          // 当 type 为 'single' 时，用于指定对象所属应用的 appKey。如果为空，默认为当前应用。\r\n      *  'roomId': String,          // 当 type 为 'chatRoom' 时，roomId 不能为空。\r\n      *  'from': Number,            // 开始的消息下标。\r\n      *  'limit': Number            // 要获取的消息数。比如当 from = 0, limit = 10 时，是获取第 0 - 9 的 10 条历史消息。\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息',\"data\":messageArray}) {}\r\n      */\n  getHistoryMessages: function getHistoryMessages(params, callback) {\n    jpushIMWeexPlugin.getHistoryMessages(params, callback);\n  },\n  // 创建单聊会话，会检测该用户名是否有效\n  skipToSingleChat: function skipToSingleChat(params, success, fail) {\n    jpushIMWeexPlugin.skipToSingleChat(params, success, fail);\n  },\n  // 发送图片消息\n  sendSingleImageMessage: function sendSingleImageMessage(params, callback) {\n    jpushIMWeexPlugin.sendSingleImageMessage(params, callback);\n  },\n  // 获取本地数据库中的会话列表\n  getConversations: function getConversations(callback) {\n    jpushIMWeexPlugin.getConversations(callback);\n  },\n  /**\r\n      * 删除聊天会话，同时将删除本地聊天记录。\r\n      *\r\n      * @param {object} params = {\r\n      *  'type': String,            // 'single' / 'group' / 'chatRoom'\r\n      *  'groupId': String,         // 目标群组 id。\r\n      *  'username': String,        // 目标用户名。\r\n      *  'appKey': String,          // 目标用户所属 AppKey。\r\n      *  'roomId': String           // 目标聊天室 id。\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息'}) {}\r\n      */\n  deleteConversation: function deleteConversation(params, callback) {\n    jpushIMWeexPlugin.deleteConversation(params, callback);\n  },\n  /**\r\n      * 重置单个会话的未读消息数。\r\n      *\r\n      * @param {object} params = {\r\n      *  'type': String,            // 'single' / 'group' / 'chatRoom'\r\n      *  'groupId': String,         // 目标群组 id。\r\n      *  'username': String,        // 目标用户名。\r\n      *  'appKey': String,          // 目标用户所属 AppKey。\r\n      *  'roomId': String           // 聊天室 id。\r\n      * }\r\n      * @param {function} success = function () {}\r\n      * @param {function} error = function ({'errorCode': '错误码', 'errorMsg': '错误信息'}) {}\r\n      */\n  resetUnreadMessageCount: function resetUnreadMessageCount(params, callback) {\n    jpushIMWeexPlugin.resetUnreadMessageCount(params, callback);\n  },\n  /**\r\n      * 以参数形式返回好友对象数组\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息','data':{}}) {}\r\n      */\n  getFriends: function getFriends(callback) {\n    jpushIMWeexPlugin.getFriends(callback);\n  },\n  /**\r\n      * 发送好友请求。\r\n      *\r\n      * @param {object} params = {\r\n      *  username: String,   // 对方用户用户名。\r\n      *  appKey: String,     // 对方用户所属应用的 AppKey。\r\n      *  reason: String      // 申请原因。\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息'}) {}\r\n      */\n  sendInvitationRequest: function sendInvitationRequest(params, callback) {\n    jpushIMWeexPlugin.sendInvitationRequest(params, callback);\n  },\n  /**\r\n      * 接受申请好友请求，调用后对方会收到 friendInvitiaonChange 事件。\r\n      * @param {object} params = {\r\n      *  'username': String,   // 对方用户用户名。\r\n      *  'appKey': String,     // 对方用户所属应用的 AppKey。\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息'}) {}\r\n      */\n  acceptInvitation: function acceptInvitation(params, callback) {\n    jpushIMWeexPlugin.acceptInvitation(params, callback);\n  },\n  /**\r\n      * 拒绝申请好友请求，调用后对方会收到 friendInvitiaonChange 事件。\r\n      * @param {object} params = {\r\n      *  'username': String,   // 对方用户用户名。\r\n      *  'appKey': String,     // 对方用户所属应用的 AppKey。\r\n      *  'reason': string      // 拒绝原因。\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息'}) {}\r\n      */\n  declineInvitation: function declineInvitation(params, callback) {\n    jpushIMWeexPlugin.declineInvitation(params, callback);\n  },\n  /**\r\n      * @param {object} params = {\r\n      *  'username': String,   // 好友用户名。\r\n      *  'appKey': String,     // 好友所属应用的 AppKey。\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息'}) {}\r\n      */\n  removeFromFriendList: function removeFromFriendList(params, callback) {\n    jpushIMWeexPlugin.removeFromFriendList(params, callback);\n  },\n  /**\r\n      * @param {object} params = {\r\n      *  'username': String,   // 好友用户名。\r\n      *  'appKey': String,     // 好友所属应用的 AppKey。\r\n      *  'noteName': string    // 备注名。\r\n      * }\r\n      * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息'}) {}\r\n      */\n  updateFriendNoteName: function updateFriendNoteName(params, callback) {\n    jpushIMWeexPlugin.updateFriendNoteName(params, callback);\n  },\n  // 事件监听 - start\n  /**\r\n   * 添加收到消息事件监听。\r\n   *\r\n   * @param {function} listener = function (message) {}  // 以参数形式返回消息对象。\r\n   * message = {\r\n   *  'id': String,\r\n   *  'from': object,    // 消息发送者信息对象。\r\n   *  'target': object,  // 消息接收方信息（可能为用户或者群组）。\r\n   *  'type': string     // 'text' / 'image' / 'voice' / 'location' / 'file' / 'custom' / 'event'\r\n   *  ...                // 不同消息类型还有其他对应的相关字段，具体可参考文档。\r\n   * }\r\n   */\n  addReceiveMessageListener: function addReceiveMessageListener(listener) {\n    // console.log(JSON.stringify(EventHandlers.receiveMessage));\n    EventHandlers.receiveMessage.push(listener);\n  },\n  removeReceiveMessageListener: function removeReceiveMessageListener(listener) {\n    var handlerIndex = EventHandlers.receiveMessage.indexOf(listener);\n    if (handlerIndex >= 0) {\n      EventHandlers.receiveMessage.splice(handlerIndex, 1);\n    }\n  },\n  /**\r\n      * 添加收到消息已读回执事件监听。\r\n      *\r\n      * @param {function} listener = function (message) {}  // 以参数形式返回消息对象。\r\n      * message = {\r\n      *  'id': String,\r\n      *  'from': object,    // 消息发送者信息对象。\r\n      *  'target': object,  // 消息接收方信息（可能为用户或者群组）。\r\n      *  'type': string     // 'text' / 'image' / 'voice' / 'location' / 'file' / 'custom' / 'event'\r\n      *  ...                // 不同消息类型还有其他对应的相关字段，具体可参考文档。\r\n      * }\r\n      */\n  addReceiptMessageListener: function addReceiptMessageListener(listener) {\n    EventHandlers.receiptMessage.push(listener);\n  },\n  removeReceiptMessageListener: function removeReceiptMessageListener(listener) {\n    var handlerIndex = EventHandlers.receiptMessage.indexOf(listener);\n    if (handlerIndex >= 0) {\n      EventHandlers.receiptMessage.splice(handlerIndex, 1);\n    }\n  },\n  /**\r\n      * 添加点击通知栏消息通知事件监听。\r\n      * Note: Android only, (如果想要 iOS 端实现相同的功能，需要同时集成 极光推送SDK)\r\n      * @param {function} listener = function (message) {}  // 以参数形式返回消息对象。\r\n      */\n  addClickMessageNotificationListener: function addClickMessageNotificationListener(listener) {\n    EventHandlers.clickMessageNotification.push(listener);\n  },\n  removeClickMessageNotificationListener: function removeClickMessageNotificationListener(listener) {\n    var handlerIndex = EventHandlers.clickMessageNotification.indexOf(listener);\n    if (handlerIndex >= 0) {\n      EventHandlers.clickMessageNotification.splice(handlerIndex, 1);\n    }\n  },\n  /**\r\n      * 添加登录状态变更事件监听。\r\n      *\r\n      * @param {function} listener = function (event) {}  // 以参数形式返回事件信息。\r\n      * event = {\r\n      *  'type': String, // 'user_password_change' / 'user_logout' / 'user_deleted' / 'user_login_status_unexpected'\r\n      * }\r\n      */\n  addLoginStateChangedListener: function addLoginStateChangedListener(listener) {\n    EventHandlers.loginStateChanged.push(listener);\n  },\n  removeLoginStateChangedListener: function removeLoginStateChangedListener(listener) {\n    var handlerIndex = EventHandlers.loginStateChanged.indexOf(listener);\n    if (handlerIndex >= 0) {\n      EventHandlers.loginStateChanged.splice(handlerIndex, 1);\n    }\n  },\n  /**\r\n      * 添加会话消息资源异步下载结果监听。\r\n      * @param {function} listener = function (message) {}  // 以参数形式返回消息对象。\r\n      */\n  addMessageDownloadCallbackListener: function addMessageDownloadCallbackListener(listener) {\n    EventHandlers.messageDownload.push(listener);\n  },\n  removeAddMessageDownloadCallbackListener: function removeAddMessageDownloadCallbackListener(listener) {\n    var handlerIndex = EventHandlers.messageDownload.indexOf(listener);\n    if (handlerIndex >= 0) {\n      EventHandlers.messageDownload.splice(handlerIndex, 1);\n    }\n  },\n  /**\r\n      * 添加会话消息发送结果回执事件监听。\r\n      * @param {function} listener = function (message) {}  // 以参数形式返回消息对象。\r\n      */\n  addSendMessageResponseCallbackListener: function addSendMessageResponseCallbackListener(listener) {\n    EventHandlers.sendMessageResponse.push(listener);\n  },\n  removeSendMessageResponseCallbackListener: function removeSendMessageResponseCallbackListener(listener) {\n    var handlerIndex = EventHandlers.sendMessageResponse.indexOf(listener);\n    if (handlerIndex >= 0) {\n      EventHandlers.sendMessageResponse.splice(handlerIndex, 1);\n    }\n  },\n  /**\r\n      * 好友相关通知事件。\r\n      *\r\n      * @param {function} listener = function (event) {}  // 以参数形式返回事件信息。\r\n      * event = {\r\n      *  'type': String,            // 'invite_received' / 'invite_accepted' / 'invite_declined' / 'contact_deleted'\r\n      *  'reason': String,          // 事件发生的理由，该字段由对方发起请求时所填，对方如果未填则返回默认字符串。\r\n      *  'fromUsername': String,    // 事件发送者的 username。\r\n      *  'fromUserAppKey': string   // 事件发送者的 AppKey。\r\n      * }\r\n      */\n  addfriendInvitiaonChangeListener: function addfriendInvitiaonChangeListener(listener) {\n    EventHandlers.friendInvitiaonChange.push(listener);\n  },\n  removefriendInvitiaonChangeListener: function removefriendInvitiaonChangeListener(listener) {\n    var handlerIndex = EventHandlers.friendInvitiaonChange.indexOf(listener);\n    if (handlerIndex >= 0) {\n      EventHandlers.friendInvitiaonChange.splice(handlerIndex, 1);\n    }\n  } };\n\nmodule.exports = jpushIM;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 11)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),

/***/ 14:
/*!******************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/store.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 15));var _im = _interopRequireDefault(__webpack_require__(/*! ./static/js/im.js */ 13));\nvar _imTools = _interopRequireDefault(__webpack_require__(/*! ./static/js/imTools.js */ 12));\n\nvar _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 18));\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}\n_vue.default.use(_vuex.default);\nvar store = new _vuex.default.Store({\n  state: {\n    addresslist1: {}, //地址信息\n    houseinfolist1: {}, //房源概况信息\n    PhotoInfolist1: {}, //房源图片信息\n    datainfolist1: {}, //预订设置信息\n    viewinfolist1: {}, //房东须知信息\n    allList: {}, //所有列表信息\n\n    addresslistOK: false,\n    houseinfolistOK: false,\n    PhotoInfolistOK: false,\n    datainfolistOK: false,\n    viewinfolist: false,\n    userInfo: {},\n    userid: '',\n    hasLogin: false,\n    productlist: [],\n\n    loginProvider: \"\", // 用户名或其他唯一值\n    nickname: \"\", // 昵称\n    signature: \"\", // 签名\n    avatar: \"/static/images/preview.jpg\", // 头像\n    gender: \"\", // 性别，0未知，1男，2女\n    openid: null,\n    testvuex: false,\n    graceIMMsgs: {},\n    graceIMScTop: 0,\n    receiveMessage: {}, // 接收新消息\n    loginStateChanged: {}, // 登录状态变更\n    sendMessageResponse: {}, // 消息发送结果回执\n    friendInvitiaon: [], // 好友事件本地存储\n    newFriendInvitiaon: 0 // 待处理的好友事件数量\n  },\n  mutations: {\n    login: function login(state, provider) {//改变登录状态  \t\t\n      state.loginProvider = provider.phone;\n      state.hasLogin = true;\n      state.userInfo = provider;\n      state.userid = provider.userId;\n      uni.setStorage({ //将用户信息保存在本地  \n        key: 'userInfo',\n        data: provider });\n\n      // uni.getStorage({\n      // \tkey: \"\"\n      // })\n    },\n\n    //退出登录    务必清除登录状态 以及 本地用户信息，防止下次打开app重现、以及出现不正确状态\n    logout: function logout(state) {\n      state.hasLogin = false;\n      state.uerInfo = {};\n      uni.removeStorage({\n        key: 'uerInfo' });\n\n    },\n    saveAdresslist: function saveAdresslist(state, provider) {\n      state.addresslist1 = provider;\n      state.addresslistOK = true;\n    },\n    saveHouseInfolist: function saveHouseInfolist(state, provider) {\n      state.houseinfolist1 = provider;\n      state.houseinfolistOK = true;\n    },\n    savePhotoInfolist: function savePhotoInfolist(state, provider) {\n      state.PhotoInfolist1 = provider;\n      state.PhotoInfolistOK = true;\n    },\n    saveDataInfolist: function saveDataInfolist(state, provider) {\n      state.datainfolist1 = provider;\n      state.datainfolistOK = true;\n    },\n    saveViewInfolist: function saveViewInfolist(state, provider) {\n      // state.viewinfolist1 = provider\n      state.viewinfolistOK = true;\n    },\n    saveAllList: function saveAllList(state, provider) {\n      state.allList = provider;\n    },\n    saveProductlist: function saveProductlist(state, provider) {\n      state.productlist = provider;\n    },\n\n    setOpenid: function setOpenid(state, openid) {\n      state.openid = openid;\n    },\n    setNickname: function setNickname(state, val) {\n      // console.log(\"setNickname：\" + val);\n      state.nickname = val;\n    },\n    // 赋值性别\n    setGender: function setGender(state, val) {\n      state.gender = val;\n    },\n    // 赋值个人签名\n    setSignature: function setSignature(state, val) {\n      state.signature = val;\n    },\n    // 赋值头像\n    setAvatar: function setAvatar(state, val) {\n      state.avatar = val;\n    },\n    // 赋值接收到的消息\n    setReceiveMessage: function setReceiveMessage(state, param) {\n      __f__(\"log\", param, \" at store.js:112\");\n      state.receiveMessage = param;\n    },\n    // 用户登录状态\n    setLoginStateChanged: function setLoginStateChanged(state, param) {\n      state.loginStateChanged = param;\n    },\n    // 消息发送结果回执\n    setSendMessageResponse: function setSendMessageResponse(state, param) {\n      state.sendMessageResponse = param;\n    },\n    // 新增好友消息事件\n    addFriendInvitiaonChange: function addFriendInvitiaonChange(state, param) {\n      state.newFriendInvitiaon++;\n      var items = state.friendInvitiaon;\n      items.unshift(param); // 保存在缓存中,此处应该配合API存在服务器上\n      items = _imTools.default.combineObjectInList(items, \"fromUsername\"); // 数组去除重复，item为重复判定项\n      state.friendInvitiaon = items; // 去重,重新赋值\n    },\n    setNewFriendInvitiaon: function setNewFriendInvitiaon(state, num) {\n      state.newFriendInvitiaon = num; // 设置需要处理的好友数量\n    },\n    setFriendInvitiaon: function setFriendInvitiaon(state, param) {\n      state.friendInvitiaon = param;\n      state.newFriendInvitiaon = param.length;\n    } },\n\n  actions: {\n    // 提交聊天文字信息\n    submitChatMsg: function () {var _submitChatMsg = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref,\n\n\n\n      params) {var commit, state, rootState;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:commit = _ref.commit, state = _ref.state, rootState = _ref.rootState;_context.next = 3;return (\n                  new Promise(function (resolve, reject) {\n                    if (!state.hasLogin) {\n                      reject(\"请先登录\");\n                    } else {\n                      __f__(\"log\", params, \" at store.js:150\");\n                      switch (params.msgType) {\n                        case \"text\":\n                          // 文本消息\n                          delete params[\"msgType\"];\n                          // console.log(\"JMessagePlugin 文本消息传参：\" + JSON.stringify(params));\n                          _im.default.sendTextMessage(params, function (res) {\n                            __f__(\"log\", 777, \" at store.js:157\");\n                            __f__(\"log\", res, \" at store.js:158\");\n                            if (res.errorCode == 0) {\n                              uni.showModal({\n                                title: '发送消息返回',\n                                content: '',\n                                showCancel: false,\n                                cancelText: '',\n                                confirmText: '',\n                                success: function success(res) {},\n                                fail: function fail() {},\n                                complete: function complete() {} });\n\n                              resolve(res.data);\n                            } else {\n                              reject(res.errorMsg);\n                            }\n                          });\n                          break;\n                        case \"img\":\n                          // 图片消息\n                          // 将本地URL路径转换成绝对路径\n                          params.path = plus.io.convertLocalFileSystemURL(params.path);\n                          delete params[\"msgType\"];\n                          _im.default.sendImageMessage(params, function (res) {\n                            if (res.errorCode == 0) {\n                              resolve(res.data);\n                            } else {\n                              reject(res.errorMsg);\n                            }\n                          });\n                          break;\n                        case \"voice\":\n                          // 语音消息\n                          params.path = plus.io.convertLocalFileSystemURL(params.path);\n                          delete params[\"msgType\"];\n                          __f__(\"log\", \"JMessagePlugin 发送语音消息:\" + JSON.stringify(params), \" at store.js:193\");\n                          _im.default.sendVoiceMessage(params, function (res) {\n                            if (res.errorCode == 0) {\n                              resolve(res.data);\n                            } else {\n                              reject(res.errorMsg);\n                            }\n                          });\n                          break;\n                        default:\n                          break;}\n\n\n                    }\n                  }));case 3:return _context.abrupt(\"return\", _context.sent);case 4:case \"end\":return _context.stop();}}}, _callee, this);}));function submitChatMsg(_x, _x2) {return _submitChatMsg.apply(this, arguments);}return submitChatMsg;}(),\n\n    // 获取当前IM用户信息是否存在，存在则登录commit, state,rootState\n    // 不用传参\n    checkCurrentIMUser: function () {var _checkCurrentIMUser = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(_ref2,\n\n\n      params) {var dispatch, commit;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:dispatch = _ref2.dispatch, commit = _ref2.commit;_context2.next = 3;return (\n                  new Promise(function (resolve, reject) {\n                    _im.default.getMyInfo(function (res) {\n                      if (res.errorCode == 0) {\n                        // console.log(res);\n                        var data = res.data;\n                        commit('setLoginProvider', data.username);\n                        commit('setNickname', data.nickname);\n                        commit('setGender', data.gender);\n                        commit('setSignature', data.signature);\n                        commit('setAvatar', data.avatar);\n                        resolve(data);\n                      } else {\n                        reject(res.errorMsg);\n                      }\n                    });\n                  }));case 3:return _context2.abrupt(\"return\", _context2.sent);case 4:case \"end\":return _context2.stop();}}}, _callee2, this);}));function checkCurrentIMUser(_x3, _x4) {return _checkCurrentIMUser.apply(this, arguments);}return checkCurrentIMUser;}(),\n\n    /**\r\n                                                                                                                                                                                                                                                                            * 更新我的头像\r\n                                                                                                                                                                                                                                                                            * @param {object} params = {\r\n                                                                                                                                                                                                                                                                            *  imgPath: string // 相册/拍照后的图片路径。\r\n                                                                                                                                                                                                                                                                            * }\r\n                                                                                                                                                                                                                                                                            * @param {function} callback = function ({'errorCode': '错误码', 'errorMsg': '错误信息',data:null}) {}\r\n                                                                                                                                                                                                                                                                            */\n    updateMyAvatar: function () {var _updateMyAvatar = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3(_ref3,\n\n\n\n      params) {var commit, state, rootState;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:commit = _ref3.commit, state = _ref3.state, rootState = _ref3.rootState;_context3.next = 3;return (\n                  new Promise(function (resolve, reject) {\n                    var origin = params.imgPath;\n                    if (origin) {\n                      // 将本地URL路径转换成平台绝对路径\n                      params.imgPath = plus.io.convertLocalFileSystemURL(params.imgPath);\n                    }\n                    _im.default.updateMyAvatar(params, function (res) {\n                      if (res.errorCode == 0) {\n                        // var path = plus.io.convertAbsoluteFileSystem(params.imgPath);\n                        commit('setAvatar', origin);\n                        resolve(res);\n                      } else {\n                        reject(res.errorMsg);\n                      }\n                    });\n                  }));case 3:return _context3.abrupt(\"return\", _context3.sent);case 4:case \"end\":return _context3.stop();}}}, _callee3, this);}));function updateMyAvatar(_x5, _x6) {return _updateMyAvatar.apply(this, arguments);}return updateMyAvatar;}() } });var _default =\n\n\n\n\n\nstore;\n\n\n// <script>  \n//     import {  \n//         mapMutations  \n//     } from 'vuex';  \n//     export default {  \n//         methods: {  \n//             bindLogin(e) {  \n//                 let name = e.detail.value.nameValue,  \n//                     password = e.detail.value.passwordValue;  \n//                 uni.request({  \n//                     url: `${this.$serverUrl}/login.php`,  \n//                     header: {  \n//                         \"Content-Type\": \"application/x-www-form-urlencoded\"  \n//                     },  \n//                     data: {  \n//                         \"username\": name,  \n//                         \"password\": password  \n//                     },  \n//                     method: \"POST\",  \n//                     success: (e) => {  \n//                         if (e.data.code === 0) {//登录成功后改变vuex的状态，并退出登录页面  \n//                             this.login(e.data)  \n//                             uni.navigateBack()  \n//                         }  \n//                     }  \n//                 })  \n//             },  \n//             ...mapMutations(['login'])  \n//         }  \n//     }  \n// </script>\nexports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 11)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),

/***/ 15:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ 16);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDZCQUFxQiIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ 17);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG1CQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVGhpcyBtZXRob2Qgb2Ygb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0IG5lZWRzIHRvIGJlXG4vLyBrZXB0IGlkZW50aWNhbCB0byB0aGUgd2F5IGl0IGlzIG9idGFpbmVkIGluIHJ1bnRpbWUuanNcbnZhciBnID0gKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZik7XG59KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 17:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 18:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNamespacedHelpers\", function() { return createNamespacedHelpers; });\n/**\n * vuex v3.0.1\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: { configurable: true } };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if (true) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (path, targetModule, newModule) {\n  if (true) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if (true) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if (true) {\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"Store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  if (typeof state === 'function') {\n    state = state() || {};\n  }\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  if (Vue.config.devtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors = { state: { configurable: true } };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors.state.set = function (v) {\n  if (true) {\n    assert(false, \"Use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n     true &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });\n\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  return genericSubscribe(fn, this._subscribers)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn) {\n  return genericSubscribe(fn, this._actionSubscribers)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if (true) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction genericSubscribe (fn, subs) {\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); };\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if (true) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if (true) {\n      assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if (true) {\n    assert(typeof type === 'string', (\"Expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (true) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      );\n    }\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if ( true && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if ( true && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '3.0.1',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers\n};\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 207:
/*!***************************************************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/components/uni-swipe-action-item/mpwxs.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  data: function data() {\n    return {\n      position: [],\n      button: [] };\n\n  },\n  computed: {\n    pos: function pos() {\n      return JSON.stringify(this.position);\n    },\n    btn: function btn() {\n      return JSON.stringify(this.button);\n    } },\n\n  watch: {\n    show: function show(newVal) {\n      if (this.autoClose) return;\n      var valueObj = this.position[0];\n      if (!valueObj) {\n        this.init();\n        return;\n      }\n      valueObj.show = newVal;\n      this.$set(this.position, 0, valueObj);\n    } },\n\n  created: function created() {\n    if (this.swipeaction.children !== undefined) {\n      this.swipeaction.children.push(this);\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n\n  },\n  beforeDestroy: function beforeDestroy() {var _this = this;\n    this.swipeaction.children.forEach(function (item, index) {\n      if (item === _this) {\n        _this.swipeaction.children.splice(index, 1);\n      }\n    });\n  },\n  methods: {\n    init: function init() {var _this2 = this;\n\n      setTimeout(function () {\n        _this2.getSize();\n        _this2.getButtonSize();\n      }, 50);\n    },\n    closeSwipe: function closeSwipe(e) {\n      if (!this.autoClose) return;\n      this.swipeaction.closeOther(this);\n    },\n\n    change: function change(e) {\n      this.$emit('change', e.open);\n      var valueObj = this.position[0];\n      if (valueObj.show !== e.open) {\n        valueObj.show = e.open;\n        this.$set(this.position, 0, valueObj);\n      }\n    },\n    onClick: function onClick(index, item) {\n      this.$emit('click', {\n        content: item,\n        index: index });\n\n    },\n    getSize: function getSize() {var _this3 = this;\n      var views = uni.createSelectorQuery().in(this);\n      views.\n      selectAll('.selector-query-hock').\n      boundingClientRect(function (data) {\n        if (_this3.autoClose) {\n          data[0].show = false;\n        } else {\n          data[0].show = _this3.show;\n        }\n        _this3.position = data;\n      }).\n      exec();\n    },\n    getButtonSize: function getButtonSize() {var _this4 = this;\n      var views = uni.createSelectorQuery().in(this);\n      views.\n      selectAll('.button-hock').\n      boundingClientRect(function (data) {\n        _this4.button = data;\n      }).\n      exec();\n    } } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy91bmktc3dpcGUtYWN0aW9uLWl0ZW0vbXB3eHMuanMiXSwibmFtZXMiOlsiZGF0YSIsInBvc2l0aW9uIiwiYnV0dG9uIiwiY29tcHV0ZWQiLCJwb3MiLCJKU09OIiwic3RyaW5naWZ5IiwiYnRuIiwid2F0Y2giLCJzaG93IiwibmV3VmFsIiwiYXV0b0Nsb3NlIiwidmFsdWVPYmoiLCJpbml0IiwiJHNldCIsImNyZWF0ZWQiLCJzd2lwZWFjdGlvbiIsImNoaWxkcmVuIiwidW5kZWZpbmVkIiwicHVzaCIsIm1vdW50ZWQiLCJiZWZvcmVEZXN0cm95IiwiZm9yRWFjaCIsIml0ZW0iLCJpbmRleCIsInNwbGljZSIsIm1ldGhvZHMiLCJzZXRUaW1lb3V0IiwiZ2V0U2l6ZSIsImdldEJ1dHRvblNpemUiLCJjbG9zZVN3aXBlIiwiZSIsImNsb3NlT3RoZXIiLCJjaGFuZ2UiLCIkZW1pdCIsIm9wZW4iLCJvbkNsaWNrIiwiY29udGVudCIsInZpZXdzIiwidW5pIiwiY3JlYXRlU2VsZWN0b3JRdWVyeSIsImluIiwic2VsZWN0QWxsIiwiYm91bmRpbmdDbGllbnRSZWN0IiwiZXhlYyJdLCJtYXBwaW5ncyI6ImlKQUFlO0FBQ2RBLE1BRGMsa0JBQ1A7QUFDTixXQUFPO0FBQ05DLGNBQVEsRUFBRSxFQURKO0FBRU5DLFlBQU0sRUFBRSxFQUZGLEVBQVA7O0FBSUEsR0FOYTtBQU9kQyxVQUFRLEVBQUU7QUFDVEMsT0FEUyxpQkFDSDtBQUNMLGFBQU9DLElBQUksQ0FBQ0MsU0FBTCxDQUFlLEtBQUtMLFFBQXBCLENBQVA7QUFDQSxLQUhRO0FBSVRNLE9BSlMsaUJBSUg7QUFDTCxhQUFPRixJQUFJLENBQUNDLFNBQUwsQ0FBZSxLQUFLSixNQUFwQixDQUFQO0FBQ0EsS0FOUSxFQVBJOztBQWVkTSxPQUFLLEVBQUU7QUFDTkMsUUFETSxnQkFDREMsTUFEQyxFQUNPO0FBQ1osVUFBSSxLQUFLQyxTQUFULEVBQW9CO0FBQ3BCLFVBQUlDLFFBQVEsR0FBRyxLQUFLWCxRQUFMLENBQWMsQ0FBZCxDQUFmO0FBQ0EsVUFBSSxDQUFDVyxRQUFMLEVBQWU7QUFDZCxhQUFLQyxJQUFMO0FBQ0E7QUFDQTtBQUNERCxjQUFRLENBQUNILElBQVQsR0FBZ0JDLE1BQWhCO0FBQ0EsV0FBS0ksSUFBTCxDQUFVLEtBQUtiLFFBQWYsRUFBeUIsQ0FBekIsRUFBNEJXLFFBQTVCO0FBQ0EsS0FWSyxFQWZPOztBQTJCZEcsU0EzQmMscUJBMkJKO0FBQ1QsUUFBSSxLQUFLQyxXQUFMLENBQWlCQyxRQUFqQixLQUE4QkMsU0FBbEMsRUFBNkM7QUFDNUMsV0FBS0YsV0FBTCxDQUFpQkMsUUFBakIsQ0FBMEJFLElBQTFCLENBQStCLElBQS9CO0FBQ0E7QUFDRCxHQS9CYTtBQWdDZEMsU0FoQ2MscUJBZ0NKO0FBQ1QsU0FBS1AsSUFBTDs7QUFFQSxHQW5DYTtBQW9DZFEsZUFwQ2MsMkJBb0NFO0FBQ2YsU0FBS0wsV0FBTCxDQUFpQkMsUUFBakIsQ0FBMEJLLE9BQTFCLENBQWtDLFVBQUNDLElBQUQsRUFBT0MsS0FBUCxFQUFpQjtBQUNsRCxVQUFJRCxJQUFJLEtBQUssS0FBYixFQUFtQjtBQUNsQixhQUFJLENBQUNQLFdBQUwsQ0FBaUJDLFFBQWpCLENBQTBCUSxNQUExQixDQUFpQ0QsS0FBakMsRUFBd0MsQ0FBeEM7QUFDQTtBQUNELEtBSkQ7QUFLQSxHQTFDYTtBQTJDZEUsU0FBTyxFQUFFO0FBQ1JiLFFBRFEsa0JBQ0Q7O0FBRU5jLGdCQUFVLENBQUMsWUFBTTtBQUNoQixjQUFJLENBQUNDLE9BQUw7QUFDQSxjQUFJLENBQUNDLGFBQUw7QUFDQSxPQUhTLEVBR1AsRUFITyxDQUFWO0FBSUEsS0FQTztBQVFSQyxjQVJRLHNCQVFHQyxDQVJILEVBUU07QUFDYixVQUFJLENBQUMsS0FBS3BCLFNBQVYsRUFBcUI7QUFDckIsV0FBS0ssV0FBTCxDQUFpQmdCLFVBQWpCLENBQTRCLElBQTVCO0FBQ0EsS0FYTzs7QUFhUkMsVUFiUSxrQkFhREYsQ0FiQyxFQWFFO0FBQ1QsV0FBS0csS0FBTCxDQUFXLFFBQVgsRUFBcUJILENBQUMsQ0FBQ0ksSUFBdkI7QUFDQSxVQUFJdkIsUUFBUSxHQUFHLEtBQUtYLFFBQUwsQ0FBYyxDQUFkLENBQWY7QUFDQSxVQUFJVyxRQUFRLENBQUNILElBQVQsS0FBa0JzQixDQUFDLENBQUNJLElBQXhCLEVBQThCO0FBQzdCdkIsZ0JBQVEsQ0FBQ0gsSUFBVCxHQUFnQnNCLENBQUMsQ0FBQ0ksSUFBbEI7QUFDQSxhQUFLckIsSUFBTCxDQUFVLEtBQUtiLFFBQWYsRUFBeUIsQ0FBekIsRUFBNEJXLFFBQTVCO0FBQ0E7QUFDRCxLQXBCTztBQXFCUndCLFdBckJRLG1CQXFCQVosS0FyQkEsRUFxQk9ELElBckJQLEVBcUJhO0FBQ3BCLFdBQUtXLEtBQUwsQ0FBVyxPQUFYLEVBQW9CO0FBQ25CRyxlQUFPLEVBQUVkLElBRFU7QUFFbkJDLGFBQUssRUFBTEEsS0FGbUIsRUFBcEI7O0FBSUEsS0ExQk87QUEyQlJJLFdBM0JRLHFCQTJCRTtBQUNULFVBQU1VLEtBQUssR0FBR0MsR0FBRyxDQUFDQyxtQkFBSixHQUEwQkMsRUFBMUIsQ0FBNkIsSUFBN0IsQ0FBZDtBQUNBSCxXQUFLO0FBQ0hJLGVBREYsQ0FDWSxzQkFEWjtBQUVFQyx3QkFGRixDQUVxQixVQUFBM0MsSUFBSSxFQUFJO0FBQzNCLFlBQUksTUFBSSxDQUFDVyxTQUFULEVBQW9CO0FBQ25CWCxjQUFJLENBQUMsQ0FBRCxDQUFKLENBQVFTLElBQVIsR0FBZSxLQUFmO0FBQ0EsU0FGRCxNQUVPO0FBQ05ULGNBQUksQ0FBQyxDQUFELENBQUosQ0FBUVMsSUFBUixHQUFlLE1BQUksQ0FBQ0EsSUFBcEI7QUFDQTtBQUNELGNBQUksQ0FBQ1IsUUFBTCxHQUFnQkQsSUFBaEI7QUFDQSxPQVRGO0FBVUU0QyxVQVZGO0FBV0EsS0F4Q087QUF5Q1JmLGlCQXpDUSwyQkF5Q1E7QUFDZixVQUFNUyxLQUFLLEdBQUdDLEdBQUcsQ0FBQ0MsbUJBQUosR0FBMEJDLEVBQTFCLENBQTZCLElBQTdCLENBQWQ7QUFDQUgsV0FBSztBQUNISSxlQURGLENBQ1ksY0FEWjtBQUVFQyx3QkFGRixDQUVxQixVQUFBM0MsSUFBSSxFQUFJO0FBQzNCLGNBQUksQ0FBQ0UsTUFBTCxHQUFjRixJQUFkO0FBQ0EsT0FKRjtBQUtFNEMsVUFMRjtBQU1BLEtBakRPLEVBM0NLLEUiLCJmaWxlIjoiMjA3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xyXG5cdGRhdGEoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRwb3NpdGlvbjogW10sXHJcblx0XHRcdGJ1dHRvbjogW11cclxuXHRcdH1cclxuXHR9LFxyXG5cdGNvbXB1dGVkOiB7XHJcblx0XHRwb3MoKSB7XHJcblx0XHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnBvc2l0aW9uKVxyXG5cdFx0fSxcclxuXHRcdGJ0bigpIHtcclxuXHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuYnV0dG9uKVxyXG5cdFx0fVxyXG5cdH0sXHJcblx0d2F0Y2g6IHtcclxuXHRcdHNob3cobmV3VmFsKSB7XHJcblx0XHRcdGlmICh0aGlzLmF1dG9DbG9zZSkgcmV0dXJuXHJcblx0XHRcdGxldCB2YWx1ZU9iaiA9IHRoaXMucG9zaXRpb25bMF1cclxuXHRcdFx0aWYgKCF2YWx1ZU9iaikge1xyXG5cdFx0XHRcdHRoaXMuaW5pdCgpXHJcblx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdH1cclxuXHRcdFx0dmFsdWVPYmouc2hvdyA9IG5ld1ZhbFxyXG5cdFx0XHR0aGlzLiRzZXQodGhpcy5wb3NpdGlvbiwgMCwgdmFsdWVPYmopXHJcblx0XHR9XHJcblx0fSxcclxuXHRjcmVhdGVkKCkge1xyXG5cdFx0aWYgKHRoaXMuc3dpcGVhY3Rpb24uY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLnN3aXBlYWN0aW9uLmNoaWxkcmVuLnB1c2godGhpcylcclxuXHRcdH1cclxuXHR9LFxyXG5cdG1vdW50ZWQoKSB7XHJcblx0XHR0aGlzLmluaXQoKVxyXG5cclxuXHR9LFxyXG5cdGJlZm9yZURlc3Ryb3koKSB7XHJcblx0XHR0aGlzLnN3aXBlYWN0aW9uLmNoaWxkcmVuLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcblx0XHRcdGlmIChpdGVtID09PSB0aGlzKSB7XHJcblx0XHRcdFx0dGhpcy5zd2lwZWFjdGlvbi5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0fSxcclxuXHRtZXRob2RzOiB7XHJcblx0XHRpbml0KCkge1xyXG5cdFx0XHRcclxuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5nZXRTaXplKClcclxuXHRcdFx0XHR0aGlzLmdldEJ1dHRvblNpemUoKVxyXG5cdFx0XHR9LCA1MClcclxuXHRcdH0sXHJcblx0XHRjbG9zZVN3aXBlKGUpIHtcclxuXHRcdFx0aWYgKCF0aGlzLmF1dG9DbG9zZSkgcmV0dXJuXHJcblx0XHRcdHRoaXMuc3dpcGVhY3Rpb24uY2xvc2VPdGhlcih0aGlzKVxyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0Y2hhbmdlKGUpIHtcclxuXHRcdFx0dGhpcy4kZW1pdCgnY2hhbmdlJywgZS5vcGVuKVxyXG5cdFx0XHRsZXQgdmFsdWVPYmogPSB0aGlzLnBvc2l0aW9uWzBdXHJcblx0XHRcdGlmICh2YWx1ZU9iai5zaG93ICE9PSBlLm9wZW4pIHtcclxuXHRcdFx0XHR2YWx1ZU9iai5zaG93ID0gZS5vcGVuXHJcblx0XHRcdFx0dGhpcy4kc2V0KHRoaXMucG9zaXRpb24sIDAsIHZhbHVlT2JqKVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0b25DbGljayhpbmRleCwgaXRlbSkge1xyXG5cdFx0XHR0aGlzLiRlbWl0KCdjbGljaycsIHtcclxuXHRcdFx0XHRjb250ZW50OiBpdGVtLFxyXG5cdFx0XHRcdGluZGV4XHJcblx0XHRcdH0pXHJcblx0XHR9LFxyXG5cdFx0Z2V0U2l6ZSgpIHtcclxuXHRcdFx0Y29uc3Qgdmlld3MgPSB1bmkuY3JlYXRlU2VsZWN0b3JRdWVyeSgpLmluKHRoaXMpXHJcblx0XHRcdHZpZXdzXHJcblx0XHRcdFx0LnNlbGVjdEFsbCgnLnNlbGVjdG9yLXF1ZXJ5LWhvY2snKVxyXG5cdFx0XHRcdC5ib3VuZGluZ0NsaWVudFJlY3QoZGF0YSA9PiB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5hdXRvQ2xvc2UpIHtcclxuXHRcdFx0XHRcdFx0ZGF0YVswXS5zaG93ID0gZmFsc2VcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGRhdGFbMF0uc2hvdyA9IHRoaXMuc2hvd1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dGhpcy5wb3NpdGlvbiA9IGRhdGFcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdC5leGVjKClcclxuXHRcdH0sXHJcblx0XHRnZXRCdXR0b25TaXplKCkge1xyXG5cdFx0XHRjb25zdCB2aWV3cyA9IHVuaS5jcmVhdGVTZWxlY3RvclF1ZXJ5KCkuaW4odGhpcylcclxuXHRcdFx0dmlld3NcclxuXHRcdFx0XHQuc2VsZWN0QWxsKCcuYnV0dG9uLWhvY2snKVxyXG5cdFx0XHRcdC5ib3VuZGluZ0NsaWVudFJlY3QoZGF0YSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLmJ1dHRvbiA9IGRhdGFcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdC5leGVjKClcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///207\n");

/***/ }),

/***/ 224:
/*!***************************************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/components/uni-icons/icons.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  'contact': \"\\uE100\",\n  'person': \"\\uE101\",\n  'personadd': \"\\uE102\",\n  'contact-filled': \"\\uE130\",\n  'person-filled': \"\\uE131\",\n  'personadd-filled': \"\\uE132\",\n  'phone': \"\\uE200\",\n  'email': \"\\uE201\",\n  'chatbubble': \"\\uE202\",\n  'chatboxes': \"\\uE203\",\n  'phone-filled': \"\\uE230\",\n  'email-filled': \"\\uE231\",\n  'chatbubble-filled': \"\\uE232\",\n  'chatboxes-filled': \"\\uE233\",\n  'weibo': \"\\uE260\",\n  'weixin': \"\\uE261\",\n  'pengyouquan': \"\\uE262\",\n  'chat': \"\\uE263\",\n  'qq': \"\\uE264\",\n  'videocam': \"\\uE300\",\n  'camera': \"\\uE301\",\n  'mic': \"\\uE302\",\n  'location': \"\\uE303\",\n  'mic-filled': \"\\uE332\",\n  'speech': \"\\uE332\",\n  'location-filled': \"\\uE333\",\n  'micoff': \"\\uE360\",\n  'image': \"\\uE363\",\n  'map': \"\\uE364\",\n  'compose': \"\\uE400\",\n  'trash': \"\\uE401\",\n  'upload': \"\\uE402\",\n  'download': \"\\uE403\",\n  'close': \"\\uE404\",\n  'redo': \"\\uE405\",\n  'undo': \"\\uE406\",\n  'refresh': \"\\uE407\",\n  'star': \"\\uE408\",\n  'plus': \"\\uE409\",\n  'minus': \"\\uE410\",\n  'circle': \"\\uE411\",\n  'checkbox': \"\\uE411\",\n  'close-filled': \"\\uE434\",\n  'clear': \"\\uE434\",\n  'refresh-filled': \"\\uE437\",\n  'star-filled': \"\\uE438\",\n  'plus-filled': \"\\uE439\",\n  'minus-filled': \"\\uE440\",\n  'circle-filled': \"\\uE441\",\n  'checkbox-filled': \"\\uE442\",\n  'closeempty': \"\\uE460\",\n  'refreshempty': \"\\uE461\",\n  'reload': \"\\uE462\",\n  'starhalf': \"\\uE463\",\n  'spinner': \"\\uE464\",\n  'spinner-cycle': \"\\uE465\",\n  'search': \"\\uE466\",\n  'plusempty': \"\\uE468\",\n  'forward': \"\\uE470\",\n  'back': \"\\uE471\",\n  'left-nav': \"\\uE471\",\n  'checkmarkempty': \"\\uE472\",\n  'home': \"\\uE500\",\n  'navigate': \"\\uE501\",\n  'gear': \"\\uE502\",\n  'paperplane': \"\\uE503\",\n  'info': \"\\uE504\",\n  'help': \"\\uE505\",\n  'locked': \"\\uE506\",\n  'more': \"\\uE507\",\n  'flag': \"\\uE508\",\n  'home-filled': \"\\uE530\",\n  'gear-filled': \"\\uE532\",\n  'info-filled': \"\\uE534\",\n  'help-filled': \"\\uE535\",\n  'more-filled': \"\\uE537\",\n  'settings': \"\\uE560\",\n  'list': \"\\uE562\",\n  'bars': \"\\uE563\",\n  'loop': \"\\uE565\",\n  'paperclip': \"\\uE567\",\n  'eye': \"\\uE568\",\n  'arrowup': \"\\uE580\",\n  'arrowdown': \"\\uE581\",\n  'arrowleft': \"\\uE582\",\n  'arrowright': \"\\uE583\",\n  'arrowthinup': \"\\uE584\",\n  'arrowthindown': \"\\uE585\",\n  'arrowthinleft': \"\\uE586\",\n  'arrowthinright': \"\\uE587\",\n  'pulldown': \"\\uE588\",\n  'closefill': \"\\uE589\",\n  'sound': \"\\uE590\",\n  'scan': \"\\uE612\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy91bmktaWNvbnMvaWNvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InNHQUFlO0FBQ2QsYUFBVyxRQURHO0FBRWQsWUFBVSxRQUZJO0FBR2QsZUFBYSxRQUhDO0FBSWQsb0JBQWtCLFFBSko7QUFLZCxtQkFBaUIsUUFMSDtBQU1kLHNCQUFvQixRQU5OO0FBT2QsV0FBUyxRQVBLO0FBUWQsV0FBUyxRQVJLO0FBU2QsZ0JBQWMsUUFUQTtBQVVkLGVBQWEsUUFWQztBQVdkLGtCQUFnQixRQVhGO0FBWWQsa0JBQWdCLFFBWkY7QUFhZCx1QkFBcUIsUUFiUDtBQWNkLHNCQUFvQixRQWROO0FBZWQsV0FBUyxRQWZLO0FBZ0JkLFlBQVUsUUFoQkk7QUFpQmQsaUJBQWUsUUFqQkQ7QUFrQmQsVUFBUSxRQWxCTTtBQW1CZCxRQUFNLFFBbkJRO0FBb0JkLGNBQVksUUFwQkU7QUFxQmQsWUFBVSxRQXJCSTtBQXNCZCxTQUFPLFFBdEJPO0FBdUJkLGNBQVksUUF2QkU7QUF3QmQsZ0JBQWMsUUF4QkE7QUF5QmQsWUFBVSxRQXpCSTtBQTBCZCxxQkFBbUIsUUExQkw7QUEyQmQsWUFBVSxRQTNCSTtBQTRCZCxXQUFTLFFBNUJLO0FBNkJkLFNBQU8sUUE3Qk87QUE4QmQsYUFBVyxRQTlCRztBQStCZCxXQUFTLFFBL0JLO0FBZ0NkLFlBQVUsUUFoQ0k7QUFpQ2QsY0FBWSxRQWpDRTtBQWtDZCxXQUFTLFFBbENLO0FBbUNkLFVBQVEsUUFuQ007QUFvQ2QsVUFBUSxRQXBDTTtBQXFDZCxhQUFXLFFBckNHO0FBc0NkLFVBQVEsUUF0Q007QUF1Q2QsVUFBUSxRQXZDTTtBQXdDZCxXQUFTLFFBeENLO0FBeUNkLFlBQVUsUUF6Q0k7QUEwQ2QsY0FBWSxRQTFDRTtBQTJDZCxrQkFBZ0IsUUEzQ0Y7QUE0Q2QsV0FBUyxRQTVDSztBQTZDZCxvQkFBa0IsUUE3Q0o7QUE4Q2QsaUJBQWUsUUE5Q0Q7QUErQ2QsaUJBQWUsUUEvQ0Q7QUFnRGQsa0JBQWdCLFFBaERGO0FBaURkLG1CQUFpQixRQWpESDtBQWtEZCxxQkFBbUIsUUFsREw7QUFtRGQsZ0JBQWMsUUFuREE7QUFvRGQsa0JBQWdCLFFBcERGO0FBcURkLFlBQVUsUUFyREk7QUFzRGQsY0FBWSxRQXRERTtBQXVEZCxhQUFXLFFBdkRHO0FBd0RkLG1CQUFpQixRQXhESDtBQXlEZCxZQUFVLFFBekRJO0FBMERkLGVBQWEsUUExREM7QUEyRGQsYUFBVyxRQTNERztBQTREZCxVQUFRLFFBNURNO0FBNkRkLGNBQVksUUE3REU7QUE4RGQsb0JBQWtCLFFBOURKO0FBK0RkLFVBQVEsUUEvRE07QUFnRWQsY0FBWSxRQWhFRTtBQWlFZCxVQUFRLFFBakVNO0FBa0VkLGdCQUFjLFFBbEVBO0FBbUVkLFVBQVEsUUFuRU07QUFvRWQsVUFBUSxRQXBFTTtBQXFFZCxZQUFVLFFBckVJO0FBc0VkLFVBQVEsUUF0RU07QUF1RWQsVUFBUSxRQXZFTTtBQXdFZCxpQkFBZSxRQXhFRDtBQXlFZCxpQkFBZSxRQXpFRDtBQTBFZCxpQkFBZSxRQTFFRDtBQTJFZCxpQkFBZSxRQTNFRDtBQTRFZCxpQkFBZSxRQTVFRDtBQTZFZCxjQUFZLFFBN0VFO0FBOEVkLFVBQVEsUUE5RU07QUErRWQsVUFBUSxRQS9FTTtBQWdGZCxVQUFRLFFBaEZNO0FBaUZkLGVBQWEsUUFqRkM7QUFrRmQsU0FBTyxRQWxGTztBQW1GZCxhQUFXLFFBbkZHO0FBb0ZkLGVBQWEsUUFwRkM7QUFxRmQsZUFBYSxRQXJGQztBQXNGZCxnQkFBYyxRQXRGQTtBQXVGZCxpQkFBZSxRQXZGRDtBQXdGZCxtQkFBaUIsUUF4Rkg7QUF5RmQsbUJBQWlCLFFBekZIO0FBMEZkLG9CQUFrQixRQTFGSjtBQTJGZCxjQUFZLFFBM0ZFO0FBNEZkLGVBQWEsUUE1RkM7QUE2RmQsV0FBUyxRQTdGSztBQThGZCxVQUFRLFFBOUZNLEUiLCJmaWxlIjoiMjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuXHQnY29udGFjdCc6ICdcXHVlMTAwJyxcblx0J3BlcnNvbic6ICdcXHVlMTAxJyxcblx0J3BlcnNvbmFkZCc6ICdcXHVlMTAyJyxcblx0J2NvbnRhY3QtZmlsbGVkJzogJ1xcdWUxMzAnLFxuXHQncGVyc29uLWZpbGxlZCc6ICdcXHVlMTMxJyxcblx0J3BlcnNvbmFkZC1maWxsZWQnOiAnXFx1ZTEzMicsXG5cdCdwaG9uZSc6ICdcXHVlMjAwJyxcblx0J2VtYWlsJzogJ1xcdWUyMDEnLFxuXHQnY2hhdGJ1YmJsZSc6ICdcXHVlMjAyJyxcblx0J2NoYXRib3hlcyc6ICdcXHVlMjAzJyxcblx0J3Bob25lLWZpbGxlZCc6ICdcXHVlMjMwJyxcblx0J2VtYWlsLWZpbGxlZCc6ICdcXHVlMjMxJyxcblx0J2NoYXRidWJibGUtZmlsbGVkJzogJ1xcdWUyMzInLFxuXHQnY2hhdGJveGVzLWZpbGxlZCc6ICdcXHVlMjMzJyxcblx0J3dlaWJvJzogJ1xcdWUyNjAnLFxuXHQnd2VpeGluJzogJ1xcdWUyNjEnLFxuXHQncGVuZ3lvdXF1YW4nOiAnXFx1ZTI2MicsXG5cdCdjaGF0JzogJ1xcdWUyNjMnLFxuXHQncXEnOiAnXFx1ZTI2NCcsXG5cdCd2aWRlb2NhbSc6ICdcXHVlMzAwJyxcblx0J2NhbWVyYSc6ICdcXHVlMzAxJyxcblx0J21pYyc6ICdcXHVlMzAyJyxcblx0J2xvY2F0aW9uJzogJ1xcdWUzMDMnLFxuXHQnbWljLWZpbGxlZCc6ICdcXHVlMzMyJyxcblx0J3NwZWVjaCc6ICdcXHVlMzMyJyxcblx0J2xvY2F0aW9uLWZpbGxlZCc6ICdcXHVlMzMzJyxcblx0J21pY29mZic6ICdcXHVlMzYwJyxcblx0J2ltYWdlJzogJ1xcdWUzNjMnLFxuXHQnbWFwJzogJ1xcdWUzNjQnLFxuXHQnY29tcG9zZSc6ICdcXHVlNDAwJyxcblx0J3RyYXNoJzogJ1xcdWU0MDEnLFxuXHQndXBsb2FkJzogJ1xcdWU0MDInLFxuXHQnZG93bmxvYWQnOiAnXFx1ZTQwMycsXG5cdCdjbG9zZSc6ICdcXHVlNDA0Jyxcblx0J3JlZG8nOiAnXFx1ZTQwNScsXG5cdCd1bmRvJzogJ1xcdWU0MDYnLFxuXHQncmVmcmVzaCc6ICdcXHVlNDA3Jyxcblx0J3N0YXInOiAnXFx1ZTQwOCcsXG5cdCdwbHVzJzogJ1xcdWU0MDknLFxuXHQnbWludXMnOiAnXFx1ZTQxMCcsXG5cdCdjaXJjbGUnOiAnXFx1ZTQxMScsXG5cdCdjaGVja2JveCc6ICdcXHVlNDExJyxcblx0J2Nsb3NlLWZpbGxlZCc6ICdcXHVlNDM0Jyxcblx0J2NsZWFyJzogJ1xcdWU0MzQnLFxuXHQncmVmcmVzaC1maWxsZWQnOiAnXFx1ZTQzNycsXG5cdCdzdGFyLWZpbGxlZCc6ICdcXHVlNDM4Jyxcblx0J3BsdXMtZmlsbGVkJzogJ1xcdWU0MzknLFxuXHQnbWludXMtZmlsbGVkJzogJ1xcdWU0NDAnLFxuXHQnY2lyY2xlLWZpbGxlZCc6ICdcXHVlNDQxJyxcblx0J2NoZWNrYm94LWZpbGxlZCc6ICdcXHVlNDQyJyxcblx0J2Nsb3NlZW1wdHknOiAnXFx1ZTQ2MCcsXG5cdCdyZWZyZXNoZW1wdHknOiAnXFx1ZTQ2MScsXG5cdCdyZWxvYWQnOiAnXFx1ZTQ2MicsXG5cdCdzdGFyaGFsZic6ICdcXHVlNDYzJyxcblx0J3NwaW5uZXInOiAnXFx1ZTQ2NCcsXG5cdCdzcGlubmVyLWN5Y2xlJzogJ1xcdWU0NjUnLFxuXHQnc2VhcmNoJzogJ1xcdWU0NjYnLFxuXHQncGx1c2VtcHR5JzogJ1xcdWU0NjgnLFxuXHQnZm9yd2FyZCc6ICdcXHVlNDcwJyxcblx0J2JhY2snOiAnXFx1ZTQ3MScsXG5cdCdsZWZ0LW5hdic6ICdcXHVlNDcxJyxcblx0J2NoZWNrbWFya2VtcHR5JzogJ1xcdWU0NzInLFxuXHQnaG9tZSc6ICdcXHVlNTAwJyxcblx0J25hdmlnYXRlJzogJ1xcdWU1MDEnLFxuXHQnZ2Vhcic6ICdcXHVlNTAyJyxcblx0J3BhcGVycGxhbmUnOiAnXFx1ZTUwMycsXG5cdCdpbmZvJzogJ1xcdWU1MDQnLFxuXHQnaGVscCc6ICdcXHVlNTA1Jyxcblx0J2xvY2tlZCc6ICdcXHVlNTA2Jyxcblx0J21vcmUnOiAnXFx1ZTUwNycsXG5cdCdmbGFnJzogJ1xcdWU1MDgnLFxuXHQnaG9tZS1maWxsZWQnOiAnXFx1ZTUzMCcsXG5cdCdnZWFyLWZpbGxlZCc6ICdcXHVlNTMyJyxcblx0J2luZm8tZmlsbGVkJzogJ1xcdWU1MzQnLFxuXHQnaGVscC1maWxsZWQnOiAnXFx1ZTUzNScsXG5cdCdtb3JlLWZpbGxlZCc6ICdcXHVlNTM3Jyxcblx0J3NldHRpbmdzJzogJ1xcdWU1NjAnLFxuXHQnbGlzdCc6ICdcXHVlNTYyJyxcblx0J2JhcnMnOiAnXFx1ZTU2MycsXG5cdCdsb29wJzogJ1xcdWU1NjUnLFxuXHQncGFwZXJjbGlwJzogJ1xcdWU1NjcnLFxuXHQnZXllJzogJ1xcdWU1NjgnLFxuXHQnYXJyb3d1cCc6ICdcXHVlNTgwJyxcblx0J2Fycm93ZG93bic6ICdcXHVlNTgxJyxcblx0J2Fycm93bGVmdCc6ICdcXHVlNTgyJyxcblx0J2Fycm93cmlnaHQnOiAnXFx1ZTU4MycsXG5cdCdhcnJvd3RoaW51cCc6ICdcXHVlNTg0Jyxcblx0J2Fycm93dGhpbmRvd24nOiAnXFx1ZTU4NScsXG5cdCdhcnJvd3RoaW5sZWZ0JzogJ1xcdWU1ODYnLFxuXHQnYXJyb3d0aGlucmlnaHQnOiAnXFx1ZTU4NycsXG5cdCdwdWxsZG93bic6ICdcXHVlNTg4Jyxcblx0J2Nsb3NlZmlsbCc6ICdcXHVlNTg5Jyxcblx0J3NvdW5kJzogJ1xcdWU1OTAnLFxuXHQnc2Nhbic6ICdcXHVlNjEyJ1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///224\n");

/***/ }),

/***/ 24:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode, /* vue-cli only */\n  components, // fixed by xxxxxx auto components\n  renderjs // fixed by xxxxxx renderjs\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // fixed by xxxxxx auto components\n  if (components) {\n    options.components = Object.assign(components, options.components || {})\n  }\n  // fixed by xxxxxx renderjs\n  if (renderjs) {\n    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {\n      this[renderjs.__module] = this\n    });\n    (options.mixins || (options.mixins = [])).push(renderjs)\n  }\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJFQUEyRTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUsIC8qIHZ1ZS1jbGkgb25seSAqL1xuICBjb21wb25lbnRzLCAvLyBmaXhlZCBieSB4eHh4eHggYXV0byBjb21wb25lbnRzXG4gIHJlbmRlcmpzIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gZml4ZWQgYnkgeHh4eHh4IGF1dG8gY29tcG9uZW50c1xuICBpZiAoY29tcG9uZW50cykge1xuICAgIG9wdGlvbnMuY29tcG9uZW50cyA9IE9iamVjdC5hc3NpZ24oY29tcG9uZW50cywgb3B0aW9ucy5jb21wb25lbnRzIHx8IHt9KVxuICB9XG4gIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuICBpZiAocmVuZGVyanMpIHtcbiAgICAocmVuZGVyanMuYmVmb3JlQ3JlYXRlIHx8IChyZW5kZXJqcy5iZWZvcmVDcmVhdGUgPSBbXSkpLnVuc2hpZnQoZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzW3JlbmRlcmpzLl9fbW9kdWxlXSA9IHRoaXNcbiAgICB9KTtcbiAgICAob3B0aW9ucy5taXhpbnMgfHwgKG9wdGlvbnMubWl4aW5zID0gW10pKS5wdXNoKHJlbmRlcmpzKVxuICB9XG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.11\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  // fixed by xxxxxx (nvue vuex)\n  /* eslint-disable no-undef */\n  if(typeof SharedObject !== 'undefined'){\n    this.id = SharedObject.uid++;\n  } else {\n    this.id = uid++;\n  }\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\n// fixed by xxxxxx (mp properties)\r\nfunction extractPropertiesFromVNodeData(data, Ctor, res, context) {\r\n  var propOptions = Ctor.options.mpOptions && Ctor.options.mpOptions.properties;\r\n  if (isUndef(propOptions)) {\r\n    return res\r\n  }\n  var externalClasses = Ctor.options.mpOptions.externalClasses || [];\r\n  var attrs = data.attrs;\n  var props = data.props;\r\n  if (isDef(attrs) || isDef(props)) {\r\n    for (var key in propOptions) {\r\n      var altKey = hyphenate(key);\n      var result = checkProp(res, props, key, altKey, true) ||\n          checkProp(res, attrs, key, altKey, false);\n      // externalClass\n      if (\n        result &&\n        res[key] &&\n        externalClasses.indexOf(altKey) !== -1 &&\n        context[camelize(res[key])]\n      ) {\n        // 赋值 externalClass 真正的值(模板里 externalClass 的值可能是字符串)\n        res[key] = context[camelize(res[key])];\n      }\r\n    }\r\n  }\r\n  return res\r\n}\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag,\n  context// fixed by xxxxxx\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    // fixed by xxxxxx\n    return extractPropertiesFromVNodeData(data, Ctor, {}, context)\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  // fixed by xxxxxx\n  return extractPropertiesFromVNodeData(data, Ctor, res, context)\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i, i, i); // fixed by xxxxxx\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i, i, i); // fixed by xxxxxx\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length, i++, i)); // fixed by xxxxxx\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i, i); // fixed by xxxxxx\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    // fixed by xxxxxx app-plus scopedSlot\n    nodes = scopedSlotFn(props, this, props._i) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      callHook(componentInstance, 'onServiceCreated');\n      callHook(componentInstance, 'onServiceAttached');\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag, context); // fixed by xxxxxx\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if ( true && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  \n  // fixed by xxxxxx update properties(mp runtime)\n  vm._$updateProperties && vm._$updateProperties(vm);\n  \n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.11';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\n    /* eslint-disable no-undef */\r\n    var app = getApp();\r\n    if (app && app.onError) {\r\n      app.onError(err);\r\n    } else {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope && this.$scope[method]) {\r\n        return this.$scope[method](args)\r\n      }\r\n      // mp-alipay\r\n      if (typeof my === 'undefined') {\r\n        return\r\n      }\r\n      if (method === 'createSelectorQuery') {\r\n        /* eslint-disable no-undef */\r\n        return my.createSelectorQuery(args)\r\n      } else if (method === 'createIntersectionObserver') {\r\n        /* eslint-disable no-undef */\r\n        return my.createIntersectionObserver(args)\r\n      }\r\n      // TODO mp-alipay 暂不支持 selectAllComponents,selectComponent\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook, args);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 31:
/*!*******************************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/static/js/arealist.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  province_list: {\n    110000: '北京市',\n    120000: '天津市',\n    130000: '河北省',\n    140000: '山西省',\n    150000: '内蒙古自治区',\n    210000: '辽宁省',\n    220000: '吉林省',\n    230000: '黑龙江省',\n    310000: '上海市',\n    320000: '江苏省',\n    330000: '浙江省',\n    340000: '安徽省',\n    350000: '福建省',\n    360000: '江西省',\n    370000: '山东省',\n    410000: '河南省',\n    420000: '湖北省',\n    430000: '湖南省',\n    440000: '广东省',\n    450000: '广西壮族自治区',\n    460000: '海南省',\n    500000: '重庆市',\n    510000: '四川省',\n    520000: '贵州省',\n    530000: '云南省',\n    540000: '西藏自治区',\n    610000: '陕西省',\n    620000: '甘肃省',\n    630000: '青海省',\n    640000: '宁夏回族自治区',\n    650000: '新疆维吾尔自治区',\n    710000: '台湾省',\n    810000: '香港特别行政区',\n    820000: '澳门特别行政区',\n    900000: '海外' },\n\n  city_list: {\n    110100: '北京市',\n    120100: '天津市',\n    130100: '石家庄市',\n    130200: '唐山市',\n    130300: '秦皇岛市',\n    130400: '邯郸市',\n    130500: '邢台市',\n    130600: '保定市',\n    130700: '张家口市',\n    130800: '承德市',\n    130900: '沧州市',\n    131000: '廊坊市',\n    131100: '衡水市',\n    140100: '太原市',\n    140200: '大同市',\n    140300: '阳泉市',\n    140400: '长治市',\n    140500: '晋城市',\n    140600: '朔州市',\n    140700: '晋中市',\n    140800: '运城市',\n    140900: '忻州市',\n    141000: '临汾市',\n    141100: '吕梁市',\n    150100: '呼和浩特市',\n    150200: '包头市',\n    150300: '乌海市',\n    150400: '赤峰市',\n    150500: '通辽市',\n    150600: '鄂尔多斯市',\n    150700: '呼伦贝尔市',\n    150800: '巴彦淖尔市',\n    150900: '乌兰察布市',\n    152200: '兴安盟',\n    152500: '锡林郭勒盟',\n    152900: '阿拉善盟',\n    210100: '沈阳市',\n    210200: '大连市',\n    210300: '鞍山市',\n    210400: '抚顺市',\n    210500: '本溪市',\n    210600: '丹东市',\n    210700: '锦州市',\n    210800: '营口市',\n    210900: '阜新市',\n    211000: '辽阳市',\n    211100: '盘锦市',\n    211200: '铁岭市',\n    211300: '朝阳市',\n    211400: '葫芦岛市',\n    220100: '长春市',\n    220200: '吉林市',\n    220300: '四平市',\n    220400: '辽源市',\n    220500: '通化市',\n    220600: '白山市',\n    220700: '松原市',\n    220800: '白城市',\n    222400: '延边朝鲜族自治州',\n    230100: '哈尔滨市',\n    230200: '齐齐哈尔市',\n    230300: '鸡西市',\n    230400: '鹤岗市',\n    230500: '双鸭山市',\n    230600: '大庆市',\n    230700: '伊春市',\n    230800: '佳木斯市',\n    230900: '七台河市',\n    231000: '牡丹江市',\n    231100: '黑河市',\n    231200: '绥化市',\n    232700: '大兴安岭地区',\n    310100: '上海市',\n    320100: '南京市',\n    320200: '无锡市',\n    320300: '徐州市',\n    320400: '常州市',\n    320500: '苏州市',\n    320600: '南通市',\n    320700: '连云港市',\n    320800: '淮安市',\n    320900: '盐城市',\n    321000: '扬州市',\n    321100: '镇江市',\n    321200: '泰州市',\n    321300: '宿迁市',\n    330100: '杭州市',\n    330200: '宁波市',\n    330300: '温州市',\n    330400: '嘉兴市',\n    330500: '湖州市',\n    330600: '绍兴市',\n    330700: '金华市',\n    330800: '衢州市',\n    330900: '舟山市',\n    331000: '台州市',\n    331100: '丽水市',\n    340100: '合肥市',\n    340200: '芜湖市',\n    340300: '蚌埠市',\n    340400: '淮南市',\n    340500: '马鞍山市',\n    340600: '淮北市',\n    340700: '铜陵市',\n    340800: '安庆市',\n    341000: '黄山市',\n    341100: '滁州市',\n    341200: '阜阳市',\n    341300: '宿州市',\n    341500: '六安市',\n    341600: '亳州市',\n    341700: '池州市',\n    341800: '宣城市',\n    350100: '福州市',\n    350200: '厦门市',\n    350300: '莆田市',\n    350400: '三明市',\n    350500: '泉州市',\n    350600: '漳州市',\n    350700: '南平市',\n    350800: '龙岩市',\n    350900: '宁德市',\n    360100: '南昌市',\n    360200: '景德镇市',\n    360300: '萍乡市',\n    360400: '九江市',\n    360500: '新余市',\n    360600: '鹰潭市',\n    360700: '赣州市',\n    360800: '吉安市',\n    360900: '宜春市',\n    361000: '抚州市',\n    361100: '上饶市',\n    370100: '济南市',\n    370200: '青岛市',\n    370300: '淄博市',\n    370400: '枣庄市',\n    370500: '东营市',\n    370600: '烟台市',\n    370700: '潍坊市',\n    370800: '济宁市',\n    370900: '泰安市',\n    371000: '威海市',\n    371100: '日照市',\n    371300: '临沂市',\n    371400: '德州市',\n    371500: '聊城市',\n    371600: '滨州市',\n    371700: '菏泽市',\n    410100: '郑州市',\n    410200: '开封市',\n    410300: '洛阳市',\n    410400: '平顶山市',\n    410500: '安阳市',\n    410600: '鹤壁市',\n    410700: '新乡市',\n    410800: '焦作市',\n    410900: '濮阳市',\n    411000: '许昌市',\n    411100: '漯河市',\n    411200: '三门峡市',\n    411300: '南阳市',\n    411400: '商丘市',\n    411500: '信阳市',\n    411600: '周口市',\n    411700: '驻马店市',\n    419000: '省直辖县',\n    420100: '武汉市',\n    420200: '黄石市',\n    420300: '十堰市',\n    420500: '宜昌市',\n    420600: '襄阳市',\n    420700: '鄂州市',\n    420800: '荆门市',\n    420900: '孝感市',\n    421000: '荆州市',\n    421100: '黄冈市',\n    421200: '咸宁市',\n    421300: '随州市',\n    422800: '恩施土家族苗族自治州',\n    429000: '省直辖县',\n    430100: '长沙市',\n    430200: '株洲市',\n    430300: '湘潭市',\n    430400: '衡阳市',\n    430500: '邵阳市',\n    430600: '岳阳市',\n    430700: '常德市',\n    430800: '张家界市',\n    430900: '益阳市',\n    431000: '郴州市',\n    431100: '永州市',\n    431200: '怀化市',\n    431300: '娄底市',\n    433100: '湘西土家族苗族自治州',\n    440100: '广州市',\n    440200: '韶关市',\n    440300: '深圳市',\n    440400: '珠海市',\n    440500: '汕头市',\n    440600: '佛山市',\n    440700: '江门市',\n    440800: '湛江市',\n    440900: '茂名市',\n    441200: '肇庆市',\n    441300: '惠州市',\n    441400: '梅州市',\n    441500: '汕尾市',\n    441600: '河源市',\n    441700: '阳江市',\n    441800: '清远市',\n    441900: '东莞市',\n    442000: '中山市',\n    445100: '潮州市',\n    445200: '揭阳市',\n    445300: '云浮市',\n    450100: '南宁市',\n    450200: '柳州市',\n    450300: '桂林市',\n    450400: '梧州市',\n    450500: '北海市',\n    450600: '防城港市',\n    450700: '钦州市',\n    450800: '贵港市',\n    450900: '玉林市',\n    451000: '百色市',\n    451100: '贺州市',\n    451200: '河池市',\n    451300: '来宾市',\n    451400: '崇左市',\n    460100: '海口市',\n    460200: '三亚市',\n    460300: '三沙市',\n    460400: '儋州市',\n    469000: '省直辖县',\n    500100: '重庆市',\n    500200: '县',\n    510100: '成都市',\n    510300: '自贡市',\n    510400: '攀枝花市',\n    510500: '泸州市',\n    510600: '德阳市',\n    510700: '绵阳市',\n    510800: '广元市',\n    510900: '遂宁市',\n    511000: '内江市',\n    511100: '乐山市',\n    511300: '南充市',\n    511400: '眉山市',\n    511500: '宜宾市',\n    511600: '广安市',\n    511700: '达州市',\n    511800: '雅安市',\n    511900: '巴中市',\n    512000: '资阳市',\n    513200: '阿坝藏族羌族自治州',\n    513300: '甘孜藏族自治州',\n    513400: '凉山彝族自治州',\n    520100: '贵阳市',\n    520200: '六盘水市',\n    520300: '遵义市',\n    520400: '安顺市',\n    520500: '毕节市',\n    520600: '铜仁市',\n    522300: '黔西南布依族苗族自治州',\n    522600: '黔东南苗族侗族自治州',\n    522700: '黔南布依族苗族自治州',\n    530100: '昆明市',\n    530300: '曲靖市',\n    530400: '玉溪市',\n    530500: '保山市',\n    530600: '昭通市',\n    530700: '丽江市',\n    530800: '普洱市',\n    530900: '临沧市',\n    532300: '楚雄彝族自治州',\n    532500: '红河哈尼族彝族自治州',\n    532600: '文山壮族苗族自治州',\n    532800: '西双版纳傣族自治州',\n    532900: '大理白族自治州',\n    533100: '德宏傣族景颇族自治州',\n    533300: '怒江傈僳族自治州',\n    533400: '迪庆藏族自治州',\n    540100: '拉萨市',\n    540200: '日喀则市',\n    540300: '昌都市',\n    540400: '林芝市',\n    540500: '山南市',\n    540600: '那曲市',\n    542500: '阿里地区',\n    610100: '西安市',\n    610200: '铜川市',\n    610300: '宝鸡市',\n    610400: '咸阳市',\n    610500: '渭南市',\n    610600: '延安市',\n    610700: '汉中市',\n    610800: '榆林市',\n    610900: '安康市',\n    611000: '商洛市',\n    620100: '兰州市',\n    620200: '嘉峪关市',\n    620300: '金昌市',\n    620400: '白银市',\n    620500: '天水市',\n    620600: '武威市',\n    620700: '张掖市',\n    620800: '平凉市',\n    620900: '酒泉市',\n    621000: '庆阳市',\n    621100: '定西市',\n    621200: '陇南市',\n    622900: '临夏回族自治州',\n    623000: '甘南藏族自治州',\n    630100: '西宁市',\n    630200: '海东市',\n    632200: '海北藏族自治州',\n    632300: '黄南藏族自治州',\n    632500: '海南藏族自治州',\n    632600: '果洛藏族自治州',\n    632700: '玉树藏族自治州',\n    632800: '海西蒙古族藏族自治州',\n    640100: '银川市',\n    640200: '石嘴山市',\n    640300: '吴忠市',\n    640400: '固原市',\n    640500: '中卫市',\n    650100: '乌鲁木齐市',\n    650200: '克拉玛依市',\n    650400: '吐鲁番市',\n    650500: '哈密市',\n    652300: '昌吉回族自治州',\n    652700: '博尔塔拉蒙古自治州',\n    652800: '巴音郭楞蒙古自治州',\n    652900: '阿克苏地区',\n    653000: '克孜勒苏柯尔克孜自治州',\n    653100: '喀什地区',\n    653200: '和田地区',\n    654000: '伊犁哈萨克自治州',\n    654200: '塔城地区',\n    654300: '阿勒泰地区',\n    659000: '自治区直辖县级行政区划',\n    710100: '台北市',\n    710200: '高雄市',\n    710300: '台南市',\n    710400: '台中市',\n    710500: '金门县',\n    710600: '南投县',\n    710700: '基隆市',\n    710800: '新竹市',\n    710900: '嘉义市',\n    711100: '新北市',\n    711200: '宜兰县',\n    711300: '新竹县',\n    711400: '桃园县',\n    711500: '苗栗县',\n    711700: '彰化县',\n    711900: '嘉义县',\n    712100: '云林县',\n    712400: '屏东县',\n    712500: '台东县',\n    712600: '花莲县',\n    712700: '澎湖县',\n    712800: '连江县',\n    810100: '香港岛',\n    810200: '九龙',\n    810300: '新界',\n    820100: '澳门半岛',\n    820200: '离岛',\n    900400: '阿富汗',\n    900800: '阿尔巴尼亚',\n    901000: '南极洲',\n    901200: '阿尔及利亚',\n    901600: '美属萨摩亚',\n    902000: '安道尔',\n    902400: '安哥拉',\n    902800: '安提瓜和巴布达',\n    903100: '阿塞拜疆',\n    903200: '阿根廷',\n    903600: '澳大利亚',\n    904000: '奥地利',\n    904400: '巴哈马',\n    904800: '巴林',\n    905000: '孟加拉',\n    905100: '亚美尼亚',\n    905200: '巴巴多斯',\n    905600: '比利时',\n    906000: '百慕大',\n    906400: '不丹',\n    906800: '玻利维亚',\n    907000: '波黑',\n    907200: '博茨瓦纳',\n    907400: '布韦岛',\n    907600: '巴西',\n    908400: '伯利兹',\n    908600: '英属印度洋领地',\n    909000: '所罗门群岛',\n    909200: '英属维尔京群岛',\n    909600: '文莱',\n    910000: '保加利亚',\n    910400: '缅甸',\n    910800: '布隆迪',\n    911200: '白俄罗斯',\n    911600: '柬埔寨',\n    912000: '喀麦隆',\n    912400: '加拿大',\n    913200: '佛得角',\n    913600: '开曼群岛',\n    914000: '中非',\n    914400: '斯里兰卡',\n    914800: '乍得',\n    915200: '智利',\n    916200: '圣诞岛',\n    916600: '科科斯群岛',\n    917000: '哥伦比亚',\n    917400: '科摩罗',\n    917500: '马约特',\n    917800: '刚果（布）',\n    918000: '刚果（金）',\n    918400: '库克群岛',\n    918800: '哥斯达黎加',\n    919100: '克罗地亚',\n    919200: '古巴',\n    919600: '塞浦路斯',\n    920300: '捷克',\n    920400: '贝宁',\n    920800: '丹麦',\n    921200: '多米尼克',\n    921400: '多米尼加',\n    921800: '厄瓜多尔',\n    922200: '萨尔瓦多',\n    922600: '赤道几内亚',\n    923100: '埃塞俄比亚',\n    923200: '厄立特里亚',\n    923300: '爱沙尼亚',\n    923400: '法罗群岛',\n    923800: '马尔维纳斯群岛（ 福克兰）',\n    923900: '南乔治亚岛和南桑威奇群岛',\n    924200: '斐济群岛',\n    924600: '芬兰',\n    924800: '奥兰群岛',\n    925000: '法国',\n    925400: '法属圭亚那',\n    925800: '法属波利尼西亚',\n    926000: '法属南部领地',\n    926200: '吉布提',\n    926600: '加蓬',\n    926800: '格鲁吉亚',\n    927000: '冈比亚',\n    927500: '巴勒斯坦',\n    927600: '德国',\n    928800: '加纳',\n    929200: '直布罗陀',\n    929600: '基里巴斯',\n    930000: '希腊',\n    930400: '格陵兰',\n    930800: '格林纳达',\n    931200: '瓜德罗普',\n    931600: '关岛',\n    932000: '危地马拉',\n    932400: '几内亚',\n    932800: '圭亚那',\n    933200: '海地',\n    933400: '赫德岛和麦克唐纳群岛',\n    933600: '梵蒂冈',\n    934000: '洪都拉斯',\n    934800: '匈牙利',\n    935200: '冰岛',\n    935600: '印度',\n    936000: '印尼',\n    936400: '伊朗',\n    936800: '伊拉克',\n    937200: '爱尔兰',\n    937600: '以色列',\n    938000: '意大利',\n    938400: '科特迪瓦',\n    938800: '牙买加',\n    939200: '日本',\n    939800: '哈萨克斯坦',\n    940000: '约旦',\n    940400: '肯尼亚',\n    940800: '朝鲜 北朝鲜',\n    941000: '韩国',\n    941400: '科威特',\n    941700: '吉尔吉斯斯坦',\n    941800: '老挝',\n    942200: '黎巴嫩',\n    942600: '莱索托',\n    942800: '拉脱维亚',\n    943000: '利比里亚',\n    943400: '利比亚',\n    943800: '列支敦士登',\n    944000: '立陶宛',\n    944200: '卢森堡',\n    945000: '马达加斯加',\n    945400: '马拉维',\n    945800: '马来西亚',\n    946200: '马尔代夫',\n    946600: '马里',\n    947000: '马耳他',\n    947400: '马提尼克',\n    947800: '毛里塔尼亚',\n    948000: '毛里求斯',\n    948400: '墨西哥',\n    949200: '摩纳哥',\n    949600: '蒙古国',\n    949800: '摩尔多瓦',\n    949900: '黑山',\n    950000: '蒙塞拉特岛',\n    950400: '摩洛哥',\n    950800: '莫桑比克',\n    951200: '阿曼',\n    951600: '纳米比亚',\n    952000: '瑙鲁',\n    952400: '尼泊尔',\n    952800: '荷兰',\n    953300: '阿鲁巴',\n    953500: '荷兰加勒比区',\n    954000: '新喀里多尼亚',\n    954800: '瓦努阿图',\n    955400: '新西兰',\n    955800: '尼加拉瓜',\n    956200: '尼日尔',\n    956600: '尼日利亚',\n    957000: '纽埃',\n    957400: '诺福克岛',\n    957800: '挪威',\n    958000: '北马里亚纳群岛',\n    958100: '美国本土外小岛屿',\n    958300: '密克罗尼西亚联邦',\n    958400: '马绍尔群岛',\n    958500: '帕劳',\n    958600: '巴基斯坦',\n    959100: '巴拿马',\n    959800: '巴布亚新几内亚',\n    960000: '巴拉圭',\n    960400: '秘鲁',\n    960800: '菲律宾',\n    961200: '皮特凯恩群岛',\n    961600: '波兰',\n    962000: '葡萄牙',\n    962400: '几内亚比绍',\n    962600: '东帝汶',\n    963000: '波多黎各',\n    963400: '卡塔尔',\n    963800: '留尼汪',\n    964200: '罗马尼亚',\n    964300: '俄罗斯',\n    964600: '卢旺达',\n    965200: '圣巴泰勒米岛',\n    965400: '圣赫勒拿',\n    965900: '圣基茨和尼维斯',\n    966000: '安圭拉',\n    966200: '圣卢西亚',\n    966300: '法属圣马丁',\n    966600: '圣皮埃尔和密克隆',\n    967000: '圣文森特和格林纳丁斯',\n    967400: '圣马力诺',\n    967800: '圣多美和普林西比',\n    968200: '沙特阿拉伯',\n    968600: '塞内加尔',\n    968800: '塞尔维亚',\n    969000: '塞舌尔',\n    969400: '塞拉利昂',\n    970200: '新加坡',\n    970300: '斯洛伐克',\n    970400: '越南',\n    970500: '斯洛文尼亚',\n    970600: '索马里',\n    971000: '南非',\n    971600: '津巴布韦',\n    972400: '西班牙',\n    972800: '南苏丹',\n    972900: '苏丹',\n    973200: '西撒哈拉',\n    974000: '苏里南',\n    974400: '斯瓦尔巴群岛和 扬马延岛',\n    974800: '斯威士兰',\n    975200: '瑞典',\n    975600: '瑞士',\n    976000: '叙利亚',\n    976200: '塔吉克斯坦',\n    976400: '泰国',\n    976800: '多哥',\n    977200: '托克劳',\n    977600: '汤加',\n    978000: '特立尼达和多巴哥',\n    978400: '阿联酋',\n    978800: '突尼斯',\n    979200: '土耳其',\n    979500: '土库曼斯坦',\n    979600: '特克斯和凯科斯群岛',\n    979800: '图瓦卢',\n    980000: '乌干达',\n    980400: '乌克兰',\n    980700: '马其顿',\n    981800: '埃及',\n    982600: '英国',\n    983100: '根西岛',\n    983200: '泽西岛',\n    983300: '马恩岛',\n    983400: '坦桑尼亚',\n    984000: '美国',\n    985000: '美属维尔京群岛',\n    985400: '布基纳法索',\n    985800: '乌拉圭',\n    986000: '乌兹别克斯坦',\n    986200: '委内瑞拉',\n    987600: '瓦利斯和富图纳',\n    988200: '萨摩亚',\n    988700: '也门',\n    989400: '赞比亚' },\n\n  county_list: {\n    110101: '东城区',\n    110102: '西城区',\n    110105: '朝阳区',\n    110106: '丰台区',\n    110107: '石景山区',\n    110108: '海淀区',\n    110109: '门头沟区',\n    110111: '房山区',\n    110112: '通州区',\n    110113: '顺义区',\n    110114: '昌平区',\n    110115: '大兴区',\n    110116: '怀柔区',\n    110117: '平谷区',\n    110118: '密云区',\n    110119: '延庆区',\n    120101: '和平区',\n    120102: '河东区',\n    120103: '河西区',\n    120104: '南开区',\n    120105: '河北区',\n    120106: '红桥区',\n    120110: '东丽区',\n    120111: '西青区',\n    120112: '津南区',\n    120113: '北辰区',\n    120114: '武清区',\n    120115: '宝坻区',\n    120116: '滨海新区',\n    120117: '宁河区',\n    120118: '静海区',\n    120119: '蓟州区',\n    130102: '长安区',\n    130104: '桥西区',\n    130105: '新华区',\n    130107: '井陉矿区',\n    130108: '裕华区',\n    130109: '藁城区',\n    130110: '鹿泉区',\n    130111: '栾城区',\n    130121: '井陉县',\n    130123: '正定县',\n    130125: '行唐县',\n    130126: '灵寿县',\n    130127: '高邑县',\n    130128: '深泽县',\n    130129: '赞皇县',\n    130130: '无极县',\n    130131: '平山县',\n    130132: '元氏县',\n    130133: '赵县',\n    130181: '辛集市',\n    130183: '晋州市',\n    130184: '新乐市',\n    130202: '路南区',\n    130203: '路北区',\n    130204: '古冶区',\n    130205: '开平区',\n    130207: '丰南区',\n    130208: '丰润区',\n    130209: '曹妃甸区',\n    130224: '滦南县',\n    130225: '乐亭县',\n    130227: '迁西县',\n    130229: '玉田县',\n    130281: '遵化市',\n    130283: '迁安市',\n    130284: '滦州市',\n    130302: '海港区',\n    130303: '山海关区',\n    130304: '北戴河区',\n    130306: '抚宁区',\n    130321: '青龙满族自治县',\n    130322: '昌黎县',\n    130324: '卢龙县',\n    130390: '经济技术开发区',\n    130402: '邯山区',\n    130403: '丛台区',\n    130404: '复兴区',\n    130406: '峰峰矿区',\n    130407: '肥乡区',\n    130408: '永年区',\n    130423: '临漳县',\n    130424: '成安县',\n    130425: '大名县',\n    130426: '涉县',\n    130427: '磁县',\n    130430: '邱县',\n    130431: '鸡泽县',\n    130432: '广平县',\n    130433: '馆陶县',\n    130434: '魏县',\n    130435: '曲周县',\n    130481: '武安市',\n    130502: '桥东区',\n    130503: '桥西区',\n    130521: '邢台县',\n    130522: '临城县',\n    130523: '内丘县',\n    130524: '柏乡县',\n    130525: '隆尧县',\n    130526: '任县',\n    130527: '南和县',\n    130528: '宁晋县',\n    130529: '巨鹿县',\n    130530: '新河县',\n    130531: '广宗县',\n    130532: '平乡县',\n    130533: '威县',\n    130534: '清河县',\n    130535: '临西县',\n    130581: '南宫市',\n    130582: '沙河市',\n    130602: '竞秀区',\n    130606: '莲池区',\n    130607: '满城区',\n    130608: '清苑区',\n    130609: '徐水区',\n    130623: '涞水县',\n    130624: '阜平县',\n    130626: '定兴县',\n    130627: '唐县',\n    130628: '高阳县',\n    130629: '容城县',\n    130630: '涞源县',\n    130631: '望都县',\n    130632: '安新县',\n    130633: '易县',\n    130634: '曲阳县',\n    130635: '蠡县',\n    130636: '顺平县',\n    130637: '博野县',\n    130638: '雄县',\n    130681: '涿州市',\n    130682: '定州市',\n    130683: '安国市',\n    130684: '高碑店市',\n    130702: '桥东区',\n    130703: '桥西区',\n    130705: '宣化区',\n    130706: '下花园区',\n    130708: '万全区',\n    130709: '崇礼区',\n    130722: '张北县',\n    130723: '康保县',\n    130724: '沽源县',\n    130725: '尚义县',\n    130726: '蔚县',\n    130727: '阳原县',\n    130728: '怀安县',\n    130730: '怀来县',\n    130731: '涿鹿县',\n    130732: '赤城县',\n    130802: '双桥区',\n    130803: '双滦区',\n    130804: '鹰手营子矿区',\n    130821: '承德县',\n    130822: '兴隆县',\n    130824: '滦平县',\n    130825: '隆化县',\n    130826: '丰宁满族自治县',\n    130827: '宽城满族自治县',\n    130828: '围场满族蒙古族自治县',\n    130881: '平泉市',\n    130902: '新华区',\n    130903: '运河区',\n    130921: '沧县',\n    130922: '青县',\n    130923: '东光县',\n    130924: '海兴县',\n    130925: '盐山县',\n    130926: '肃宁县',\n    130927: '南皮县',\n    130928: '吴桥县',\n    130929: '献县',\n    130930: '孟村回族自治县',\n    130981: '泊头市',\n    130982: '任丘市',\n    130983: '黄骅市',\n    130984: '河间市',\n    131002: '安次区',\n    131003: '广阳区',\n    131022: '固安县',\n    131023: '永清县',\n    131024: '香河县',\n    131025: '大城县',\n    131026: '文安县',\n    131028: '大厂回族自治县',\n    131081: '霸州市',\n    131082: '三河市',\n    131090: '开发区',\n    131102: '桃城区',\n    131103: '冀州区',\n    131121: '枣强县',\n    131122: '武邑县',\n    131123: '武强县',\n    131124: '饶阳县',\n    131125: '安平县',\n    131126: '故城县',\n    131127: '景县',\n    131128: '阜城县',\n    131182: '深州市',\n    140105: '小店区',\n    140106: '迎泽区',\n    140107: '杏花岭区',\n    140108: '尖草坪区',\n    140109: '万柏林区',\n    140110: '晋源区',\n    140121: '清徐县',\n    140122: '阳曲县',\n    140123: '娄烦县',\n    140181: '古交市',\n    140212: '新荣区',\n    140213: '平城区',\n    140214: '云冈区',\n    140215: '云州区',\n    140221: '阳高县',\n    140222: '天镇县',\n    140223: '广灵县',\n    140224: '灵丘县',\n    140225: '浑源县',\n    140226: '左云县',\n    140302: '城区',\n    140303: '矿区',\n    140311: '郊区',\n    140321: '平定县',\n    140322: '盂县',\n    140403: '潞州区',\n    140404: '上党区',\n    140405: '屯留区',\n    140406: '潞城区',\n    140423: '襄垣县',\n    140425: '平顺县',\n    140426: '黎城县',\n    140427: '壶关县',\n    140428: '长子县',\n    140429: '武乡县',\n    140430: '沁县',\n    140431: '沁源县',\n    140502: '城区',\n    140521: '沁水县',\n    140522: '阳城县',\n    140524: '陵川县',\n    140525: '泽州县',\n    140581: '高平市',\n    140602: '朔城区',\n    140603: '平鲁区',\n    140621: '山阴县',\n    140622: '应县',\n    140623: '右玉县',\n    140681: '怀仁市',\n    140702: '榆次区',\n    140721: '榆社县',\n    140722: '左权县',\n    140723: '和顺县',\n    140724: '昔阳县',\n    140725: '寿阳县',\n    140726: '太谷县',\n    140727: '祁县',\n    140728: '平遥县',\n    140729: '灵石县',\n    140781: '介休市',\n    140802: '盐湖区',\n    140821: '临猗县',\n    140822: '万荣县',\n    140823: '闻喜县',\n    140824: '稷山县',\n    140825: '新绛县',\n    140826: '绛县',\n    140827: '垣曲县',\n    140828: '夏县',\n    140829: '平陆县',\n    140830: '芮城县',\n    140881: '永济市',\n    140882: '河津市',\n    140902: '忻府区',\n    140921: '定襄县',\n    140922: '五台县',\n    140923: '代县',\n    140924: '繁峙县',\n    140925: '宁武县',\n    140926: '静乐县',\n    140927: '神池县',\n    140928: '五寨县',\n    140929: '岢岚县',\n    140930: '河曲县',\n    140931: '保德县',\n    140932: '偏关县',\n    140981: '原平市',\n    141002: '尧都区',\n    141021: '曲沃县',\n    141022: '翼城县',\n    141023: '襄汾县',\n    141024: '洪洞县',\n    141025: '古县',\n    141026: '安泽县',\n    141027: '浮山县',\n    141028: '吉县',\n    141029: '乡宁县',\n    141030: '大宁县',\n    141031: '隰县',\n    141032: '永和县',\n    141033: '蒲县',\n    141034: '汾西县',\n    141081: '侯马市',\n    141082: '霍州市',\n    141102: '离石区',\n    141121: '文水县',\n    141122: '交城县',\n    141123: '兴县',\n    141124: '临县',\n    141125: '柳林县',\n    141126: '石楼县',\n    141127: '岚县',\n    141128: '方山县',\n    141129: '中阳县',\n    141130: '交口县',\n    141181: '孝义市',\n    141182: '汾阳市',\n    150102: '新城区',\n    150103: '回民区',\n    150104: '玉泉区',\n    150105: '赛罕区',\n    150121: '土默特左旗',\n    150122: '托克托县',\n    150123: '和林格尔县',\n    150124: '清水河县',\n    150125: '武川县',\n    150202: '东河区',\n    150203: '昆都仑区',\n    150204: '青山区',\n    150205: '石拐区',\n    150206: '白云鄂博矿区',\n    150207: '九原区',\n    150221: '土默特右旗',\n    150222: '固阳县',\n    150223: '达尔罕茂明安联合旗',\n    150302: '海勃湾区',\n    150303: '海南区',\n    150304: '乌达区',\n    150402: '红山区',\n    150403: '元宝山区',\n    150404: '松山区',\n    150421: '阿鲁科尔沁旗',\n    150422: '巴林左旗',\n    150423: '巴林右旗',\n    150424: '林西县',\n    150425: '克什克腾旗',\n    150426: '翁牛特旗',\n    150428: '喀喇沁旗',\n    150429: '宁城县',\n    150430: '敖汉旗',\n    150502: '科尔沁区',\n    150521: '科尔沁左翼中旗',\n    150522: '科尔沁左翼后旗',\n    150523: '开鲁县',\n    150524: '库伦旗',\n    150525: '奈曼旗',\n    150526: '扎鲁特旗',\n    150581: '霍林郭勒市',\n    150602: '东胜区',\n    150603: '康巴什区',\n    150621: '达拉特旗',\n    150622: '准格尔旗',\n    150623: '鄂托克前旗',\n    150624: '鄂托克旗',\n    150625: '杭锦旗',\n    150626: '乌审旗',\n    150627: '伊金霍洛旗',\n    150702: '海拉尔区',\n    150703: '扎赉诺尔区',\n    150721: '阿荣旗',\n    150722: '莫力达瓦达斡尔族自治旗',\n    150723: '鄂伦春自治旗',\n    150724: '鄂温克族自治旗',\n    150725: '陈巴尔虎旗',\n    150726: '新巴尔虎左旗',\n    150727: '新巴尔虎右旗',\n    150781: '满洲里市',\n    150782: '牙克石市',\n    150783: '扎兰屯市',\n    150784: '额尔古纳市',\n    150785: '根河市',\n    150802: '临河区',\n    150821: '五原县',\n    150822: '磴口县',\n    150823: '乌拉特前旗',\n    150824: '乌拉特中旗',\n    150825: '乌拉特后旗',\n    150826: '杭锦后旗',\n    150902: '集宁区',\n    150921: '卓资县',\n    150922: '化德县',\n    150923: '商都县',\n    150924: '兴和县',\n    150925: '凉城县',\n    150926: '察哈尔右翼前旗',\n    150927: '察哈尔右翼中旗',\n    150928: '察哈尔右翼后旗',\n    150929: '四子王旗',\n    150981: '丰镇市',\n    152201: '乌兰浩特市',\n    152202: '阿尔山市',\n    152221: '科尔沁右翼前旗',\n    152222: '科尔沁右翼中旗',\n    152223: '扎赉特旗',\n    152224: '突泉县',\n    152501: '二连浩特市',\n    152502: '锡林浩特市',\n    152522: '阿巴嘎旗',\n    152523: '苏尼特左旗',\n    152524: '苏尼特右旗',\n    152525: '东乌珠穆沁旗',\n    152526: '西乌珠穆沁旗',\n    152527: '太仆寺旗',\n    152528: '镶黄旗',\n    152529: '正镶白旗',\n    152530: '正蓝旗',\n    152531: '多伦县',\n    152921: '阿拉善左旗',\n    152922: '阿拉善右旗',\n    152923: '额济纳旗',\n    210102: '和平区',\n    210103: '沈河区',\n    210104: '大东区',\n    210105: '皇姑区',\n    210106: '铁西区',\n    210111: '苏家屯区',\n    210112: '浑南区',\n    210113: '沈北新区',\n    210114: '于洪区',\n    210115: '辽中区',\n    210123: '康平县',\n    210124: '法库县',\n    210181: '新民市',\n    210190: '经济技术开发区',\n    210202: '中山区',\n    210203: '西岗区',\n    210204: '沙河口区',\n    210211: '甘井子区',\n    210212: '旅顺口区',\n    210213: '金州区',\n    210214: '普兰店区',\n    210224: '长海县',\n    210281: '瓦房店市',\n    210283: '庄河市',\n    210302: '铁东区',\n    210303: '铁西区',\n    210304: '立山区',\n    210311: '千山区',\n    210321: '台安县',\n    210323: '岫岩满族自治县',\n    210381: '海城市',\n    210390: '高新区',\n    210402: '新抚区',\n    210403: '东洲区',\n    210404: '望花区',\n    210411: '顺城区',\n    210421: '抚顺县',\n    210422: '新宾满族自治县',\n    210423: '清原满族自治县',\n    210502: '平山区',\n    210503: '溪湖区',\n    210504: '明山区',\n    210505: '南芬区',\n    210521: '本溪满族自治县',\n    210522: '桓仁满族自治县',\n    210602: '元宝区',\n    210603: '振兴区',\n    210604: '振安区',\n    210624: '宽甸满族自治县',\n    210681: '东港市',\n    210682: '凤城市',\n    210702: '古塔区',\n    210703: '凌河区',\n    210711: '太和区',\n    210726: '黑山县',\n    210727: '义县',\n    210781: '凌海市',\n    210782: '北镇市',\n    210793: '经济技术开发区',\n    210802: '站前区',\n    210803: '西市区',\n    210804: '鲅鱼圈区',\n    210811: '老边区',\n    210881: '盖州市',\n    210882: '大石桥市',\n    210902: '海州区',\n    210903: '新邱区',\n    210904: '太平区',\n    210905: '清河门区',\n    210911: '细河区',\n    210921: '阜新蒙古族自治县',\n    210922: '彰武县',\n    211002: '白塔区',\n    211003: '文圣区',\n    211004: '宏伟区',\n    211005: '弓长岭区',\n    211011: '太子河区',\n    211021: '辽阳县',\n    211081: '灯塔市',\n    211102: '双台子区',\n    211103: '兴隆台区',\n    211104: '大洼区',\n    211122: '盘山县',\n    211202: '银州区',\n    211204: '清河区',\n    211221: '铁岭县',\n    211223: '西丰县',\n    211224: '昌图县',\n    211281: '调兵山市',\n    211282: '开原市',\n    211302: '双塔区',\n    211303: '龙城区',\n    211321: '朝阳县',\n    211322: '建平县',\n    211324: '喀喇沁左翼蒙古族自治县',\n    211381: '北票市',\n    211382: '凌源市',\n    211402: '连山区',\n    211403: '龙港区',\n    211404: '南票区',\n    211421: '绥中县',\n    211422: '建昌县',\n    211481: '兴城市',\n    220102: '南关区',\n    220103: '宽城区',\n    220104: '朝阳区',\n    220105: '二道区',\n    220106: '绿园区',\n    220112: '双阳区',\n    220113: '九台区',\n    220122: '农安县',\n    220182: '榆树市',\n    220183: '德惠市',\n    220192: '经济技术开发区',\n    220202: '昌邑区',\n    220203: '龙潭区',\n    220204: '船营区',\n    220211: '丰满区',\n    220221: '永吉县',\n    220281: '蛟河市',\n    220282: '桦甸市',\n    220283: '舒兰市',\n    220284: '磐石市',\n    220302: '铁西区',\n    220303: '铁东区',\n    220322: '梨树县',\n    220323: '伊通满族自治县',\n    220381: '公主岭市',\n    220382: '双辽市',\n    220402: '龙山区',\n    220403: '西安区',\n    220421: '东丰县',\n    220422: '东辽县',\n    220502: '东昌区',\n    220503: '二道江区',\n    220521: '通化县',\n    220523: '辉南县',\n    220524: '柳河县',\n    220581: '梅河口市',\n    220582: '集安市',\n    220602: '浑江区',\n    220605: '江源区',\n    220621: '抚松县',\n    220622: '靖宇县',\n    220623: '长白朝鲜族自治县',\n    220681: '临江市',\n    220702: '宁江区',\n    220721: '前郭尔罗斯蒙古族自治县',\n    220722: '长岭县',\n    220723: '乾安县',\n    220781: '扶余市',\n    220802: '洮北区',\n    220821: '镇赉县',\n    220822: '通榆县',\n    220881: '洮南市',\n    220882: '大安市',\n    222401: '延吉市',\n    222402: '图们市',\n    222403: '敦化市',\n    222404: '珲春市',\n    222405: '龙井市',\n    222406: '和龙市',\n    222424: '汪清县',\n    222426: '安图县',\n    230102: '道里区',\n    230103: '南岗区',\n    230104: '道外区',\n    230108: '平房区',\n    230109: '松北区',\n    230110: '香坊区',\n    230111: '呼兰区',\n    230112: '阿城区',\n    230113: '双城区',\n    230123: '依兰县',\n    230124: '方正县',\n    230125: '宾县',\n    230126: '巴彦县',\n    230127: '木兰县',\n    230128: '通河县',\n    230129: '延寿县',\n    230183: '尚志市',\n    230184: '五常市',\n    230202: '龙沙区',\n    230203: '建华区',\n    230204: '铁锋区',\n    230205: '昂昂溪区',\n    230206: '富拉尔基区',\n    230207: '碾子山区',\n    230208: '梅里斯达斡尔族区',\n    230221: '龙江县',\n    230223: '依安县',\n    230224: '泰来县',\n    230225: '甘南县',\n    230227: '富裕县',\n    230229: '克山县',\n    230230: '克东县',\n    230231: '拜泉县',\n    230281: '讷河市',\n    230302: '鸡冠区',\n    230303: '恒山区',\n    230304: '滴道区',\n    230305: '梨树区',\n    230306: '城子河区',\n    230307: '麻山区',\n    230321: '鸡东县',\n    230381: '虎林市',\n    230382: '密山市',\n    230402: '向阳区',\n    230403: '工农区',\n    230404: '南山区',\n    230405: '兴安区',\n    230406: '东山区',\n    230407: '兴山区',\n    230421: '萝北县',\n    230422: '绥滨县',\n    230502: '尖山区',\n    230503: '岭东区',\n    230505: '四方台区',\n    230506: '宝山区',\n    230521: '集贤县',\n    230522: '友谊县',\n    230523: '宝清县',\n    230524: '饶河县',\n    230602: '萨尔图区',\n    230603: '龙凤区',\n    230604: '让胡路区',\n    230605: '红岗区',\n    230606: '大同区',\n    230621: '肇州县',\n    230622: '肇源县',\n    230623: '林甸县',\n    230624: '杜尔伯特蒙古族自治县',\n    230702: '伊春区',\n    230703: '南岔区',\n    230704: '友好区',\n    230705: '西林区',\n    230706: '翠峦区',\n    230707: '新青区',\n    230708: '美溪区',\n    230709: '金山屯区',\n    230710: '五营区',\n    230711: '乌马河区',\n    230712: '汤旺河区',\n    230713: '带岭区',\n    230714: '乌伊岭区',\n    230715: '红星区',\n    230716: '上甘岭区',\n    230722: '嘉荫县',\n    230781: '铁力市',\n    230803: '向阳区',\n    230804: '前进区',\n    230805: '东风区',\n    230811: '郊区',\n    230822: '桦南县',\n    230826: '桦川县',\n    230828: '汤原县',\n    230881: '同江市',\n    230882: '富锦市',\n    230883: '抚远市',\n    230902: '新兴区',\n    230903: '桃山区',\n    230904: '茄子河区',\n    230921: '勃利县',\n    231002: '东安区',\n    231003: '阳明区',\n    231004: '爱民区',\n    231005: '西安区',\n    231025: '林口县',\n    231081: '绥芬河市',\n    231083: '海林市',\n    231084: '宁安市',\n    231085: '穆棱市',\n    231086: '东宁市',\n    231102: '爱辉区',\n    231121: '嫩江县',\n    231123: '逊克县',\n    231124: '孙吴县',\n    231181: '北安市',\n    231182: '五大连池市',\n    231202: '北林区',\n    231221: '望奎县',\n    231222: '兰西县',\n    231223: '青冈县',\n    231224: '庆安县',\n    231225: '明水县',\n    231226: '绥棱县',\n    231281: '安达市',\n    231282: '肇东市',\n    231283: '海伦市',\n    232701: '漠河市',\n    232721: '呼玛县',\n    232722: '塔河县',\n    232790: '松岭区',\n    232791: '呼中区',\n    232792: '加格达奇区',\n    232793: '新林区',\n    310101: '黄浦区',\n    310104: '徐汇区',\n    310105: '长宁区',\n    310106: '静安区',\n    310107: '普陀区',\n    310109: '虹口区',\n    310110: '杨浦区',\n    310112: '闵行区',\n    310113: '宝山区',\n    310114: '嘉定区',\n    310115: '浦东新区',\n    310116: '金山区',\n    310117: '松江区',\n    310118: '青浦区',\n    310120: '奉贤区',\n    310151: '崇明区',\n    320102: '玄武区',\n    320104: '秦淮区',\n    320105: '建邺区',\n    320106: '鼓楼区',\n    320111: '浦口区',\n    320113: '栖霞区',\n    320114: '雨花台区',\n    320115: '江宁区',\n    320116: '六合区',\n    320117: '溧水区',\n    320118: '高淳区',\n    320205: '锡山区',\n    320206: '惠山区',\n    320211: '滨湖区',\n    320213: '梁溪区',\n    320214: '新吴区',\n    320281: '江阴市',\n    320282: '宜兴市',\n    320302: '鼓楼区',\n    320303: '云龙区',\n    320305: '贾汪区',\n    320311: '泉山区',\n    320312: '铜山区',\n    320321: '丰县',\n    320322: '沛县',\n    320324: '睢宁县',\n    320381: '新沂市',\n    320382: '邳州市',\n    320391: '工业园区',\n    320402: '天宁区',\n    320404: '钟楼区',\n    320411: '新北区',\n    320412: '武进区',\n    320413: '金坛区',\n    320481: '溧阳市',\n    320505: '虎丘区',\n    320506: '吴中区',\n    320507: '相城区',\n    320508: '姑苏区',\n    320509: '吴江区',\n    320581: '常熟市',\n    320582: '张家港市',\n    320583: '昆山市',\n    320585: '太仓市',\n    320590: '工业园区',\n    320591: '高新区',\n    320602: '崇川区',\n    320611: '港闸区',\n    320612: '通州区',\n    320623: '如东县',\n    320681: '启东市',\n    320682: '如皋市',\n    320684: '海门市',\n    320685: '海安市',\n    320691: '高新区',\n    320703: '连云区',\n    320706: '海州区',\n    320707: '赣榆区',\n    320722: '东海县',\n    320723: '灌云县',\n    320724: '灌南县',\n    320803: '淮安区',\n    320804: '淮阴区',\n    320812: '清江浦区',\n    320813: '洪泽区',\n    320826: '涟水县',\n    320830: '盱眙县',\n    320831: '金湖县',\n    320890: '经济开发区',\n    320902: '亭湖区',\n    320903: '盐都区',\n    320904: '大丰区',\n    320921: '响水县',\n    320922: '滨海县',\n    320923: '阜宁县',\n    320924: '射阳县',\n    320925: '建湖县',\n    320981: '东台市',\n    321002: '广陵区',\n    321003: '邗江区',\n    321012: '江都区',\n    321023: '宝应县',\n    321081: '仪征市',\n    321084: '高邮市',\n    321090: '经济开发区',\n    321102: '京口区',\n    321111: '润州区',\n    321112: '丹徒区',\n    321181: '丹阳市',\n    321182: '扬中市',\n    321183: '句容市',\n    321202: '海陵区',\n    321203: '高港区',\n    321204: '姜堰区',\n    321281: '兴化市',\n    321282: '靖江市',\n    321283: '泰兴市',\n    321302: '宿城区',\n    321311: '宿豫区',\n    321322: '沭阳县',\n    321323: '泗阳县',\n    321324: '泗洪县',\n    330102: '上城区',\n    330103: '下城区',\n    330104: '江干区',\n    330105: '拱墅区',\n    330106: '西湖区',\n    330108: '滨江区',\n    330109: '萧山区',\n    330110: '余杭区',\n    330111: '富阳区',\n    330112: '临安区',\n    330122: '桐庐县',\n    330127: '淳安县',\n    330182: '建德市',\n    330203: '海曙区',\n    330205: '江北区',\n    330206: '北仑区',\n    330211: '镇海区',\n    330212: '鄞州区',\n    330213: '奉化区',\n    330225: '象山县',\n    330226: '宁海县',\n    330281: '余姚市',\n    330282: '慈溪市',\n    330302: '鹿城区',\n    330303: '龙湾区',\n    330304: '瓯海区',\n    330305: '洞头区',\n    330324: '永嘉县',\n    330326: '平阳县',\n    330327: '苍南县',\n    330328: '文成县',\n    330329: '泰顺县',\n    330381: '瑞安市',\n    330382: '乐清市',\n    330402: '南湖区',\n    330411: '秀洲区',\n    330421: '嘉善县',\n    330424: '海盐县',\n    330481: '海宁市',\n    330482: '平湖市',\n    330483: '桐乡市',\n    330502: '吴兴区',\n    330503: '南浔区',\n    330521: '德清县',\n    330522: '长兴县',\n    330523: '安吉县',\n    330602: '越城区',\n    330603: '柯桥区',\n    330604: '上虞区',\n    330624: '新昌县',\n    330681: '诸暨市',\n    330683: '嵊州市',\n    330702: '婺城区',\n    330703: '金东区',\n    330723: '武义县',\n    330726: '浦江县',\n    330727: '磐安县',\n    330781: '兰溪市',\n    330782: '义乌市',\n    330783: '东阳市',\n    330784: '永康市',\n    330802: '柯城区',\n    330803: '衢江区',\n    330822: '常山县',\n    330824: '开化县',\n    330825: '龙游县',\n    330881: '江山市',\n    330902: '定海区',\n    330903: '普陀区',\n    330921: '岱山县',\n    330922: '嵊泗县',\n    331002: '椒江区',\n    331003: '黄岩区',\n    331004: '路桥区',\n    331022: '三门县',\n    331023: '天台县',\n    331024: '仙居县',\n    331081: '温岭市',\n    331082: '临海市',\n    331083: '玉环市',\n    331102: '莲都区',\n    331121: '青田县',\n    331122: '缙云县',\n    331123: '遂昌县',\n    331124: '松阳县',\n    331125: '云和县',\n    331126: '庆元县',\n    331127: '景宁畲族自治县',\n    331181: '龙泉市',\n    340102: '瑶海区',\n    340103: '庐阳区',\n    340104: '蜀山区',\n    340111: '包河区',\n    340121: '长丰县',\n    340122: '肥东县',\n    340123: '肥西县',\n    340124: '庐江县',\n    340181: '巢湖市',\n    340190: '高新技术开发区',\n    340191: '经济技术开发区',\n    340202: '镜湖区',\n    340203: '弋江区',\n    340207: '鸠江区',\n    340208: '三山区',\n    340221: '芜湖县',\n    340222: '繁昌县',\n    340223: '南陵县',\n    340225: '无为县',\n    340302: '龙子湖区',\n    340303: '蚌山区',\n    340304: '禹会区',\n    340311: '淮上区',\n    340321: '怀远县',\n    340322: '五河县',\n    340323: '固镇县',\n    340402: '大通区',\n    340403: '田家庵区',\n    340404: '谢家集区',\n    340405: '八公山区',\n    340406: '潘集区',\n    340421: '凤台县',\n    340422: '寿县',\n    340503: '花山区',\n    340504: '雨山区',\n    340506: '博望区',\n    340521: '当涂县',\n    340522: '含山县',\n    340523: '和县',\n    340602: '杜集区',\n    340603: '相山区',\n    340604: '烈山区',\n    340621: '濉溪县',\n    340705: '铜官区',\n    340706: '义安区',\n    340711: '郊区',\n    340722: '枞阳县',\n    340802: '迎江区',\n    340803: '大观区',\n    340811: '宜秀区',\n    340822: '怀宁县',\n    340824: '潜山县',\n    340825: '太湖县',\n    340826: '宿松县',\n    340827: '望江县',\n    340828: '岳西县',\n    340881: '桐城市',\n    341002: '屯溪区',\n    341003: '黄山区',\n    341004: '徽州区',\n    341021: '歙县',\n    341022: '休宁县',\n    341023: '黟县',\n    341024: '祁门县',\n    341102: '琅琊区',\n    341103: '南谯区',\n    341122: '来安县',\n    341124: '全椒县',\n    341125: '定远县',\n    341126: '凤阳县',\n    341181: '天长市',\n    341182: '明光市',\n    341202: '颍州区',\n    341203: '颍东区',\n    341204: '颍泉区',\n    341221: '临泉县',\n    341222: '太和县',\n    341225: '阜南县',\n    341226: '颍上县',\n    341282: '界首市',\n    341302: '埇桥区',\n    341321: '砀山县',\n    341322: '萧县',\n    341323: '灵璧县',\n    341324: '泗县',\n    341390: '经济开发区',\n    341502: '金安区',\n    341503: '裕安区',\n    341504: '叶集区',\n    341522: '霍邱县',\n    341523: '舒城县',\n    341524: '金寨县',\n    341525: '霍山县',\n    341602: '谯城区',\n    341621: '涡阳县',\n    341622: '蒙城县',\n    341623: '利辛县',\n    341702: '贵池区',\n    341721: '东至县',\n    341722: '石台县',\n    341723: '青阳县',\n    341802: '宣州区',\n    341821: '郎溪县',\n    341822: '广德县',\n    341823: '泾县',\n    341824: '绩溪县',\n    341825: '旌德县',\n    341881: '宁国市',\n    350102: '鼓楼区',\n    350103: '台江区',\n    350104: '仓山区',\n    350105: '马尾区',\n    350111: '晋安区',\n    350112: '长乐区',\n    350121: '闽侯县',\n    350122: '连江县',\n    350123: '罗源县',\n    350124: '闽清县',\n    350125: '永泰县',\n    350128: '平潭县',\n    350181: '福清市',\n    350203: '思明区',\n    350205: '海沧区',\n    350206: '湖里区',\n    350211: '集美区',\n    350212: '同安区',\n    350213: '翔安区',\n    350302: '城厢区',\n    350303: '涵江区',\n    350304: '荔城区',\n    350305: '秀屿区',\n    350322: '仙游县',\n    350402: '梅列区',\n    350403: '三元区',\n    350421: '明溪县',\n    350423: '清流县',\n    350424: '宁化县',\n    350425: '大田县',\n    350426: '尤溪县',\n    350427: '沙县',\n    350428: '将乐县',\n    350429: '泰宁县',\n    350430: '建宁县',\n    350481: '永安市',\n    350502: '鲤城区',\n    350503: '丰泽区',\n    350504: '洛江区',\n    350505: '泉港区',\n    350521: '惠安县',\n    350524: '安溪县',\n    350525: '永春县',\n    350526: '德化县',\n    350527: '金门县',\n    350581: '石狮市',\n    350582: '晋江市',\n    350583: '南安市',\n    350602: '芗城区',\n    350603: '龙文区',\n    350622: '云霄县',\n    350623: '漳浦县',\n    350624: '诏安县',\n    350625: '长泰县',\n    350626: '东山县',\n    350627: '南靖县',\n    350628: '平和县',\n    350629: '华安县',\n    350681: '龙海市',\n    350702: '延平区',\n    350703: '建阳区',\n    350721: '顺昌县',\n    350722: '浦城县',\n    350723: '光泽县',\n    350724: '松溪县',\n    350725: '政和县',\n    350781: '邵武市',\n    350782: '武夷山市',\n    350783: '建瓯市',\n    350802: '新罗区',\n    350803: '永定区',\n    350821: '长汀县',\n    350823: '上杭县',\n    350824: '武平县',\n    350825: '连城县',\n    350881: '漳平市',\n    350902: '蕉城区',\n    350921: '霞浦县',\n    350922: '古田县',\n    350923: '屏南县',\n    350924: '寿宁县',\n    350925: '周宁县',\n    350926: '柘荣县',\n    350981: '福安市',\n    350982: '福鼎市',\n    360102: '东湖区',\n    360103: '西湖区',\n    360104: '青云谱区',\n    360105: '湾里区',\n    360111: '青山湖区',\n    360112: '新建区',\n    360121: '南昌县',\n    360123: '安义县',\n    360124: '进贤县',\n    360190: '经济技术开发区',\n    360192: '高新区',\n    360202: '昌江区',\n    360203: '珠山区',\n    360222: '浮梁县',\n    360281: '乐平市',\n    360302: '安源区',\n    360313: '湘东区',\n    360321: '莲花县',\n    360322: '上栗县',\n    360323: '芦溪县',\n    360402: '濂溪区',\n    360403: '浔阳区',\n    360404: '柴桑区',\n    360423: '武宁县',\n    360424: '修水县',\n    360425: '永修县',\n    360426: '德安县',\n    360428: '都昌县',\n    360429: '湖口县',\n    360430: '彭泽县',\n    360481: '瑞昌市',\n    360482: '共青城市',\n    360483: '庐山市',\n    360490: '经济技术开发区',\n    360502: '渝水区',\n    360521: '分宜县',\n    360602: '月湖区',\n    360603: '余江区',\n    360681: '贵溪市',\n    360702: '章贡区',\n    360703: '南康区',\n    360704: '赣县区',\n    360722: '信丰县',\n    360723: '大余县',\n    360724: '上犹县',\n    360725: '崇义县',\n    360726: '安远县',\n    360727: '龙南县',\n    360728: '定南县',\n    360729: '全南县',\n    360730: '宁都县',\n    360731: '于都县',\n    360732: '兴国县',\n    360733: '会昌县',\n    360734: '寻乌县',\n    360735: '石城县',\n    360781: '瑞金市',\n    360802: '吉州区',\n    360803: '青原区',\n    360821: '吉安县',\n    360822: '吉水县',\n    360823: '峡江县',\n    360824: '新干县',\n    360825: '永丰县',\n    360826: '泰和县',\n    360827: '遂川县',\n    360828: '万安县',\n    360829: '安福县',\n    360830: '永新县',\n    360881: '井冈山市',\n    360902: '袁州区',\n    360921: '奉新县',\n    360922: '万载县',\n    360923: '上高县',\n    360924: '宜丰县',\n    360925: '靖安县',\n    360926: '铜鼓县',\n    360981: '丰城市',\n    360982: '樟树市',\n    360983: '高安市',\n    361002: '临川区',\n    361003: '东乡区',\n    361021: '南城县',\n    361022: '黎川县',\n    361023: '南丰县',\n    361024: '崇仁县',\n    361025: '乐安县',\n    361026: '宜黄县',\n    361027: '金溪县',\n    361028: '资溪县',\n    361030: '广昌县',\n    361102: '信州区',\n    361103: '广丰区',\n    361121: '上饶县',\n    361123: '玉山县',\n    361124: '铅山县',\n    361125: '横峰县',\n    361126: '弋阳县',\n    361127: '余干县',\n    361128: '鄱阳县',\n    361129: '万年县',\n    361130: '婺源县',\n    361181: '德兴市',\n    370102: '历下区',\n    370103: '市中区',\n    370104: '槐荫区',\n    370105: '天桥区',\n    370112: '历城区',\n    370113: '长清区',\n    370114: '章丘区',\n    370115: '济阳区',\n    370124: '平阴县',\n    370126: '商河县',\n    370190: '高新区',\n    370191: '莱芜区',\n    370202: '市南区',\n    370203: '市北区',\n    370211: '黄岛区',\n    370212: '崂山区',\n    370213: '李沧区',\n    370214: '城阳区',\n    370215: '即墨区',\n    370281: '胶州市',\n    370283: '平度市',\n    370285: '莱西市',\n    370290: '开发区',\n    370302: '淄川区',\n    370303: '张店区',\n    370304: '博山区',\n    370305: '临淄区',\n    370306: '周村区',\n    370321: '桓台县',\n    370322: '高青县',\n    370323: '沂源县',\n    370402: '市中区',\n    370403: '薛城区',\n    370404: '峄城区',\n    370405: '台儿庄区',\n    370406: '山亭区',\n    370481: '滕州市',\n    370502: '东营区',\n    370503: '河口区',\n    370505: '垦利区',\n    370522: '利津县',\n    370523: '广饶县',\n    370602: '芝罘区',\n    370611: '福山区',\n    370612: '牟平区',\n    370613: '莱山区',\n    370634: '长岛县',\n    370681: '龙口市',\n    370682: '莱阳市',\n    370683: '莱州市',\n    370684: '蓬莱市',\n    370685: '招远市',\n    370686: '栖霞市',\n    370687: '海阳市',\n    370690: '开发区',\n    370702: '潍城区',\n    370703: '寒亭区',\n    370704: '坊子区',\n    370705: '奎文区',\n    370724: '临朐县',\n    370725: '昌乐县',\n    370781: '青州市',\n    370782: '诸城市',\n    370783: '寿光市',\n    370784: '安丘市',\n    370785: '高密市',\n    370786: '昌邑市',\n    370790: '开发区',\n    370791: '高新区',\n    370811: '任城区',\n    370812: '兖州区',\n    370826: '微山县',\n    370827: '鱼台县',\n    370828: '金乡县',\n    370829: '嘉祥县',\n    370830: '汶上县',\n    370831: '泗水县',\n    370832: '梁山县',\n    370881: '曲阜市',\n    370883: '邹城市',\n    370890: '高新区',\n    370902: '泰山区',\n    370911: '岱岳区',\n    370921: '宁阳县',\n    370923: '东平县',\n    370982: '新泰市',\n    370983: '肥城市',\n    371002: '环翠区',\n    371003: '文登区',\n    371082: '荣成市',\n    371083: '乳山市',\n    371091: '经济技术开发区',\n    371102: '东港区',\n    371103: '岚山区',\n    371121: '五莲县',\n    371122: '莒县',\n    371302: '兰山区',\n    371311: '罗庄区',\n    371312: '河东区',\n    371321: '沂南县',\n    371322: '郯城县',\n    371323: '沂水县',\n    371324: '兰陵县',\n    371325: '费县',\n    371326: '平邑县',\n    371327: '莒南县',\n    371328: '蒙阴县',\n    371329: '临沭县',\n    371402: '德城区',\n    371403: '陵城区',\n    371422: '宁津县',\n    371423: '庆云县',\n    371424: '临邑县',\n    371425: '齐河县',\n    371426: '平原县',\n    371427: '夏津县',\n    371428: '武城县',\n    371481: '乐陵市',\n    371482: '禹城市',\n    371502: '东昌府区',\n    371521: '阳谷县',\n    371522: '莘县',\n    371523: '茌平县',\n    371524: '东阿县',\n    371525: '冠县',\n    371526: '高唐县',\n    371581: '临清市',\n    371602: '滨城区',\n    371603: '沾化区',\n    371621: '惠民县',\n    371622: '阳信县',\n    371623: '无棣县',\n    371625: '博兴县',\n    371681: '邹平市',\n    371702: '牡丹区',\n    371703: '定陶区',\n    371721: '曹县',\n    371722: '单县',\n    371723: '成武县',\n    371724: '巨野县',\n    371725: '郓城县',\n    371726: '鄄城县',\n    371728: '东明县',\n    410102: '中原区',\n    410103: '二七区',\n    410104: '管城回族区',\n    410105: '金水区',\n    410106: '上街区',\n    410108: '惠济区',\n    410122: '中牟县',\n    410181: '巩义市',\n    410182: '荥阳市',\n    410183: '新密市',\n    410184: '新郑市',\n    410185: '登封市',\n    410190: '高新技术开发区',\n    410191: '经济技术开发区',\n    410202: '龙亭区',\n    410203: '顺河回族区',\n    410204: '鼓楼区',\n    410205: '禹王台区',\n    410212: '祥符区',\n    410221: '杞县',\n    410222: '通许县',\n    410223: '尉氏县',\n    410225: '兰考县',\n    410302: '老城区',\n    410303: '西工区',\n    410304: '瀍河回族区',\n    410305: '涧西区',\n    410306: '吉利区',\n    410311: '洛龙区',\n    410322: '孟津县',\n    410323: '新安县',\n    410324: '栾川县',\n    410325: '嵩县',\n    410326: '汝阳县',\n    410327: '宜阳县',\n    410328: '洛宁县',\n    410329: '伊川县',\n    410381: '偃师市',\n    410402: '新华区',\n    410403: '卫东区',\n    410404: '石龙区',\n    410411: '湛河区',\n    410421: '宝丰县',\n    410422: '叶县',\n    410423: '鲁山县',\n    410425: '郏县',\n    410481: '舞钢市',\n    410482: '汝州市',\n    410502: '文峰区',\n    410503: '北关区',\n    410505: '殷都区',\n    410506: '龙安区',\n    410522: '安阳县',\n    410523: '汤阴县',\n    410526: '滑县',\n    410527: '内黄县',\n    410581: '林州市',\n    410590: '开发区',\n    410602: '鹤山区',\n    410603: '山城区',\n    410611: '淇滨区',\n    410621: '浚县',\n    410622: '淇县',\n    410702: '红旗区',\n    410703: '卫滨区',\n    410704: '凤泉区',\n    410711: '牧野区',\n    410721: '新乡县',\n    410724: '获嘉县',\n    410725: '原阳县',\n    410726: '延津县',\n    410727: '封丘县',\n    410728: '长垣县',\n    410781: '卫辉市',\n    410782: '辉县市',\n    410802: '解放区',\n    410803: '中站区',\n    410804: '马村区',\n    410811: '山阳区',\n    410821: '修武县',\n    410822: '博爱县',\n    410823: '武陟县',\n    410825: '温县',\n    410882: '沁阳市',\n    410883: '孟州市',\n    410902: '华龙区',\n    410922: '清丰县',\n    410923: '南乐县',\n    410926: '范县',\n    410927: '台前县',\n    410928: '濮阳县',\n    411002: '魏都区',\n    411003: '建安区',\n    411024: '鄢陵县',\n    411025: '襄城县',\n    411081: '禹州市',\n    411082: '长葛市',\n    411102: '源汇区',\n    411103: '郾城区',\n    411104: '召陵区',\n    411121: '舞阳县',\n    411122: '临颍县',\n    411202: '湖滨区',\n    411203: '陕州区',\n    411221: '渑池县',\n    411224: '卢氏县',\n    411281: '义马市',\n    411282: '灵宝市',\n    411302: '宛城区',\n    411303: '卧龙区',\n    411321: '南召县',\n    411322: '方城县',\n    411323: '西峡县',\n    411324: '镇平县',\n    411325: '内乡县',\n    411326: '淅川县',\n    411327: '社旗县',\n    411328: '唐河县',\n    411329: '新野县',\n    411330: '桐柏县',\n    411381: '邓州市',\n    411402: '梁园区',\n    411403: '睢阳区',\n    411421: '民权县',\n    411422: '睢县',\n    411423: '宁陵县',\n    411424: '柘城县',\n    411425: '虞城县',\n    411426: '夏邑县',\n    411481: '永城市',\n    411502: '浉河区',\n    411503: '平桥区',\n    411521: '罗山县',\n    411522: '光山县',\n    411523: '新县',\n    411524: '商城县',\n    411525: '固始县',\n    411526: '潢川县',\n    411527: '淮滨县',\n    411528: '息县',\n    411602: '川汇区',\n    411621: '扶沟县',\n    411622: '西华县',\n    411623: '商水县',\n    411624: '沈丘县',\n    411625: '郸城县',\n    411626: '淮阳县',\n    411627: '太康县',\n    411628: '鹿邑县',\n    411681: '项城市',\n    411690: '经济开发区',\n    411702: '驿城区',\n    411721: '西平县',\n    411722: '上蔡县',\n    411723: '平舆县',\n    411724: '正阳县',\n    411725: '确山县',\n    411726: '泌阳县',\n    411727: '汝南县',\n    411728: '遂平县',\n    411729: '新蔡县',\n    419001: '济源市',\n    420102: '江岸区',\n    420103: '江汉区',\n    420104: '硚口区',\n    420105: '汉阳区',\n    420106: '武昌区',\n    420107: '青山区',\n    420111: '洪山区',\n    420112: '东西湖区',\n    420113: '汉南区',\n    420114: '蔡甸区',\n    420115: '江夏区',\n    420116: '黄陂区',\n    420117: '新洲区',\n    420202: '黄石港区',\n    420203: '西塞山区',\n    420204: '下陆区',\n    420205: '铁山区',\n    420222: '阳新县',\n    420281: '大冶市',\n    420302: '茅箭区',\n    420303: '张湾区',\n    420304: '郧阳区',\n    420322: '郧西县',\n    420323: '竹山县',\n    420324: '竹溪县',\n    420325: '房县',\n    420381: '丹江口市',\n    420502: '西陵区',\n    420503: '伍家岗区',\n    420504: '点军区',\n    420505: '猇亭区',\n    420506: '夷陵区',\n    420525: '远安县',\n    420526: '兴山县',\n    420527: '秭归县',\n    420528: '长阳土家族自治县',\n    420529: '五峰土家族自治县',\n    420581: '宜都市',\n    420582: '当阳市',\n    420583: '枝江市',\n    420590: '经济开发区',\n    420602: '襄城区',\n    420606: '樊城区',\n    420607: '襄州区',\n    420624: '南漳县',\n    420625: '谷城县',\n    420626: '保康县',\n    420682: '老河口市',\n    420683: '枣阳市',\n    420684: '宜城市',\n    420702: '梁子湖区',\n    420703: '华容区',\n    420704: '鄂城区',\n    420802: '东宝区',\n    420804: '掇刀区',\n    420822: '沙洋县',\n    420881: '钟祥市',\n    420882: '京山市',\n    420902: '孝南区',\n    420921: '孝昌县',\n    420922: '大悟县',\n    420923: '云梦县',\n    420981: '应城市',\n    420982: '安陆市',\n    420984: '汉川市',\n    421002: '沙市区',\n    421003: '荆州区',\n    421022: '公安县',\n    421023: '监利县',\n    421024: '江陵县',\n    421081: '石首市',\n    421083: '洪湖市',\n    421087: '松滋市',\n    421102: '黄州区',\n    421121: '团风县',\n    421122: '红安县',\n    421123: '罗田县',\n    421124: '英山县',\n    421125: '浠水县',\n    421126: '蕲春县',\n    421127: '黄梅县',\n    421181: '麻城市',\n    421182: '武穴市',\n    421202: '咸安区',\n    421221: '嘉鱼县',\n    421222: '通城县',\n    421223: '崇阳县',\n    421224: '通山县',\n    421281: '赤壁市',\n    421303: '曾都区',\n    421321: '随县',\n    421381: '广水市',\n    422801: '恩施市',\n    422802: '利川市',\n    422822: '建始县',\n    422823: '巴东县',\n    422825: '宣恩县',\n    422826: '咸丰县',\n    422827: '来凤县',\n    422828: '鹤峰县',\n    429004: '仙桃市',\n    429005: '潜江市',\n    429006: '天门市',\n    429021: '神农架林区',\n    430102: '芙蓉区',\n    430103: '天心区',\n    430104: '岳麓区',\n    430105: '开福区',\n    430111: '雨花区',\n    430112: '望城区',\n    430121: '长沙县',\n    430181: '浏阳市',\n    430182: '宁乡市',\n    430202: '荷塘区',\n    430203: '芦淞区',\n    430204: '石峰区',\n    430211: '天元区',\n    430212: '渌口区',\n    430223: '攸县',\n    430224: '茶陵县',\n    430225: '炎陵县',\n    430281: '醴陵市',\n    430302: '雨湖区',\n    430304: '岳塘区',\n    430321: '湘潭县',\n    430381: '湘乡市',\n    430382: '韶山市',\n    430405: '珠晖区',\n    430406: '雁峰区',\n    430407: '石鼓区',\n    430408: '蒸湘区',\n    430412: '南岳区',\n    430421: '衡阳县',\n    430422: '衡南县',\n    430423: '衡山县',\n    430424: '衡东县',\n    430426: '祁东县',\n    430481: '耒阳市',\n    430482: '常宁市',\n    430502: '双清区',\n    430503: '大祥区',\n    430511: '北塔区',\n    430521: '邵东县',\n    430522: '新邵县',\n    430523: '邵阳县',\n    430524: '隆回县',\n    430525: '洞口县',\n    430527: '绥宁县',\n    430528: '新宁县',\n    430529: '城步苗族自治县',\n    430581: '武冈市',\n    430602: '岳阳楼区',\n    430603: '云溪区',\n    430611: '君山区',\n    430621: '岳阳县',\n    430623: '华容县',\n    430624: '湘阴县',\n    430626: '平江县',\n    430681: '汨罗市',\n    430682: '临湘市',\n    430702: '武陵区',\n    430703: '鼎城区',\n    430721: '安乡县',\n    430722: '汉寿县',\n    430723: '澧县',\n    430724: '临澧县',\n    430725: '桃源县',\n    430726: '石门县',\n    430781: '津市市',\n    430802: '永定区',\n    430811: '武陵源区',\n    430821: '慈利县',\n    430822: '桑植县',\n    430902: '资阳区',\n    430903: '赫山区',\n    430921: '南县',\n    430922: '桃江县',\n    430923: '安化县',\n    430981: '沅江市',\n    431002: '北湖区',\n    431003: '苏仙区',\n    431021: '桂阳县',\n    431022: '宜章县',\n    431023: '永兴县',\n    431024: '嘉禾县',\n    431025: '临武县',\n    431026: '汝城县',\n    431027: '桂东县',\n    431028: '安仁县',\n    431081: '资兴市',\n    431102: '零陵区',\n    431103: '冷水滩区',\n    431121: '祁阳县',\n    431122: '东安县',\n    431123: '双牌县',\n    431124: '道县',\n    431125: '江永县',\n    431126: '宁远县',\n    431127: '蓝山县',\n    431128: '新田县',\n    431129: '江华瑶族自治县',\n    431202: '鹤城区',\n    431221: '中方县',\n    431222: '沅陵县',\n    431223: '辰溪县',\n    431224: '溆浦县',\n    431225: '会同县',\n    431226: '麻阳苗族自治县',\n    431227: '新晃侗族自治县',\n    431228: '芷江侗族自治县',\n    431229: '靖州苗族侗族自治县',\n    431230: '通道侗族自治县',\n    431281: '洪江市',\n    431302: '娄星区',\n    431321: '双峰县',\n    431322: '新化县',\n    431381: '冷水江市',\n    431382: '涟源市',\n    433101: '吉首市',\n    433122: '泸溪县',\n    433123: '凤凰县',\n    433124: '花垣县',\n    433125: '保靖县',\n    433126: '古丈县',\n    433127: '永顺县',\n    433130: '龙山县',\n    440103: '荔湾区',\n    440104: '越秀区',\n    440105: '海珠区',\n    440106: '天河区',\n    440111: '白云区',\n    440112: '黄埔区',\n    440113: '番禺区',\n    440114: '花都区',\n    440115: '南沙区',\n    440117: '从化区',\n    440118: '增城区',\n    440203: '武江区',\n    440204: '浈江区',\n    440205: '曲江区',\n    440222: '始兴县',\n    440224: '仁化县',\n    440229: '翁源县',\n    440232: '乳源瑶族自治县',\n    440233: '新丰县',\n    440281: '乐昌市',\n    440282: '南雄市',\n    440303: '罗湖区',\n    440304: '福田区',\n    440305: '南山区',\n    440306: '宝安区',\n    440307: '龙岗区',\n    440308: '盐田区',\n    440309: '龙华区',\n    440310: '坪山区',\n    440311: '光明区',\n    440402: '香洲区',\n    440403: '斗门区',\n    440404: '金湾区',\n    440507: '龙湖区',\n    440511: '金平区',\n    440512: '濠江区',\n    440513: '潮阳区',\n    440514: '潮南区',\n    440515: '澄海区',\n    440523: '南澳县',\n    440604: '禅城区',\n    440605: '南海区',\n    440606: '顺德区',\n    440607: '三水区',\n    440608: '高明区',\n    440703: '蓬江区',\n    440704: '江海区',\n    440705: '新会区',\n    440781: '台山市',\n    440783: '开平市',\n    440784: '鹤山市',\n    440785: '恩平市',\n    440802: '赤坎区',\n    440803: '霞山区',\n    440804: '坡头区',\n    440811: '麻章区',\n    440823: '遂溪县',\n    440825: '徐闻县',\n    440881: '廉江市',\n    440882: '雷州市',\n    440883: '吴川市',\n    440890: '经济技术开发区',\n    440902: '茂南区',\n    440904: '电白区',\n    440981: '高州市',\n    440982: '化州市',\n    440983: '信宜市',\n    441202: '端州区',\n    441203: '鼎湖区',\n    441204: '高要区',\n    441223: '广宁县',\n    441224: '怀集县',\n    441225: '封开县',\n    441226: '德庆县',\n    441284: '四会市',\n    441302: '惠城区',\n    441303: '惠阳区',\n    441322: '博罗县',\n    441323: '惠东县',\n    441324: '龙门县',\n    441402: '梅江区',\n    441403: '梅县区',\n    441422: '大埔县',\n    441423: '丰顺县',\n    441424: '五华县',\n    441426: '平远县',\n    441427: '蕉岭县',\n    441481: '兴宁市',\n    441502: '城区',\n    441521: '海丰县',\n    441523: '陆河县',\n    441581: '陆丰市',\n    441602: '源城区',\n    441621: '紫金县',\n    441622: '龙川县',\n    441623: '连平县',\n    441624: '和平县',\n    441625: '东源县',\n    441702: '江城区',\n    441704: '阳东区',\n    441721: '阳西县',\n    441781: '阳春市',\n    441802: '清城区',\n    441803: '清新区',\n    441821: '佛冈县',\n    441823: '阳山县',\n    441825: '连山壮族瑶族自治县',\n    441826: '连南瑶族自治县',\n    441881: '英德市',\n    441882: '连州市',\n    441901: '中堂镇',\n    441903: '南城街道办事处',\n    441904: '长安镇',\n    441905: '东坑镇',\n    441906: '樟木头镇',\n    441907: '莞城街道办事处',\n    441908: '石龙镇',\n    441909: '桥头镇',\n    441910: '万江街道办事处',\n    441911: '麻涌镇',\n    441912: '虎门镇',\n    441913: '谢岗镇',\n    441914: '石碣镇',\n    441915: '茶山镇',\n    441916: '东城街道办事处',\n    441917: '洪梅镇',\n    441918: '道滘镇',\n    441919: '高埗镇',\n    441920: '企石镇',\n    441921: '凤岗镇',\n    441922: '大岭山镇',\n    441923: '松山湖管委会',\n    441924: '清溪镇',\n    441925: '望牛墩镇',\n    441926: '厚街镇',\n    441927: '常平镇',\n    441928: '寮步镇',\n    441929: '石排镇',\n    441930: '横沥镇',\n    441931: '塘厦镇',\n    441932: '黄江镇',\n    441933: '大朗镇',\n    441934: '东莞港',\n    441935: '东莞生态园',\n    441990: '沙田镇',\n    442001: '南头镇',\n    442002: '神湾镇',\n    442003: '东凤镇',\n    442004: '五桂山街道办事处',\n    442005: '黄圃镇',\n    442006: '小榄镇',\n    442007: '石岐区街道办事处',\n    442008: '横栏镇',\n    442009: '三角镇',\n    442010: '三乡镇',\n    442011: '港口镇',\n    442012: '沙溪镇',\n    442013: '板芙镇',\n    442015: '东升镇',\n    442016: '阜沙镇',\n    442017: '民众镇',\n    442018: '东区街道办事处',\n    442019: '火炬开发区街道办事处',\n    442020: '西区街道办事处',\n    442021: '南区街道办事处',\n    442022: '古镇镇',\n    442023: '坦洲镇',\n    442024: '大涌镇',\n    442025: '南朗镇',\n    445102: '湘桥区',\n    445103: '潮安区',\n    445122: '饶平县',\n    445202: '榕城区',\n    445203: '揭东区',\n    445222: '揭西县',\n    445224: '惠来县',\n    445281: '普宁市',\n    445302: '云城区',\n    445303: '云安区',\n    445321: '新兴县',\n    445322: '郁南县',\n    445381: '罗定市',\n    450102: '兴宁区',\n    450103: '青秀区',\n    450105: '江南区',\n    450107: '西乡塘区',\n    450108: '良庆区',\n    450109: '邕宁区',\n    450110: '武鸣区',\n    450123: '隆安县',\n    450124: '马山县',\n    450125: '上林县',\n    450126: '宾阳县',\n    450127: '横县',\n    450202: '城中区',\n    450203: '鱼峰区',\n    450204: '柳南区',\n    450205: '柳北区',\n    450206: '柳江区',\n    450222: '柳城县',\n    450223: '鹿寨县',\n    450224: '融安县',\n    450225: '融水苗族自治县',\n    450226: '三江侗族自治县',\n    450302: '秀峰区',\n    450303: '叠彩区',\n    450304: '象山区',\n    450305: '七星区',\n    450311: '雁山区',\n    450312: '临桂区',\n    450321: '阳朔县',\n    450323: '灵川县',\n    450324: '全州县',\n    450325: '兴安县',\n    450326: '永福县',\n    450327: '灌阳县',\n    450328: '龙胜各族自治县',\n    450329: '资源县',\n    450330: '平乐县',\n    450332: '恭城瑶族自治县',\n    450381: '荔浦市',\n    450403: '万秀区',\n    450405: '长洲区',\n    450406: '龙圩区',\n    450421: '苍梧县',\n    450422: '藤县',\n    450423: '蒙山县',\n    450481: '岑溪市',\n    450502: '海城区',\n    450503: '银海区',\n    450512: '铁山港区',\n    450521: '合浦县',\n    450602: '港口区',\n    450603: '防城区',\n    450621: '上思县',\n    450681: '东兴市',\n    450702: '钦南区',\n    450703: '钦北区',\n    450721: '灵山县',\n    450722: '浦北县',\n    450802: '港北区',\n    450803: '港南区',\n    450804: '覃塘区',\n    450821: '平南县',\n    450881: '桂平市',\n    450902: '玉州区',\n    450903: '福绵区',\n    450921: '容县',\n    450922: '陆川县',\n    450923: '博白县',\n    450924: '兴业县',\n    450981: '北流市',\n    451002: '右江区',\n    451021: '田阳县',\n    451022: '田东县',\n    451023: '平果县',\n    451024: '德保县',\n    451026: '那坡县',\n    451027: '凌云县',\n    451028: '乐业县',\n    451029: '田林县',\n    451030: '西林县',\n    451031: '隆林各族自治县',\n    451081: '靖西市',\n    451102: '八步区',\n    451103: '平桂区',\n    451121: '昭平县',\n    451122: '钟山县',\n    451123: '富川瑶族自治县',\n    451202: '金城江区',\n    451203: '宜州区',\n    451221: '南丹县',\n    451222: '天峨县',\n    451223: '凤山县',\n    451224: '东兰县',\n    451225: '罗城仫佬族自治县',\n    451226: '环江毛南族自治县',\n    451227: '巴马瑶族自治县',\n    451228: '都安瑶族自治县',\n    451229: '大化瑶族自治县',\n    451302: '兴宾区',\n    451321: '忻城县',\n    451322: '象州县',\n    451323: '武宣县',\n    451324: '金秀瑶族自治县',\n    451381: '合山市',\n    451402: '江州区',\n    451421: '扶绥县',\n    451422: '宁明县',\n    451423: '龙州县',\n    451424: '大新县',\n    451425: '天等县',\n    451481: '凭祥市',\n    460105: '秀英区',\n    460106: '龙华区',\n    460107: '琼山区',\n    460108: '美兰区',\n    460202: '海棠区',\n    460203: '吉阳区',\n    460204: '天涯区',\n    460205: '崖州区',\n    460321: '西沙群岛',\n    460322: '南沙群岛',\n    460323: '中沙群岛的岛礁及其海域',\n    460401: '那大镇',\n    460402: '和庆镇',\n    460403: '南丰镇',\n    460404: '大成镇',\n    460405: '雅星镇',\n    460406: '兰洋镇',\n    460407: '光村镇',\n    460408: '木棠镇',\n    460409: '海头镇',\n    460410: '峨蔓镇',\n    460411: '王五镇',\n    460412: '白马井镇',\n    460413: '中和镇',\n    460414: '排浦镇',\n    460415: '东成镇',\n    460416: '新州镇',\n    460417: '洋浦经济开发区',\n    460418: '华南热作学院',\n    469001: '五指山市',\n    469002: '琼海市',\n    469005: '文昌市',\n    469006: '万宁市',\n    469007: '东方市',\n    469021: '定安县',\n    469022: '屯昌县',\n    469023: '澄迈县',\n    469024: '临高县',\n    469025: '白沙黎族自治县',\n    469026: '昌江黎族自治县',\n    469027: '乐东黎族自治县',\n    469028: '陵水黎族自治县',\n    469029: '保亭黎族苗族自治县',\n    469030: '琼中黎族苗族自治县',\n    500101: '万州区',\n    500102: '涪陵区',\n    500103: '渝中区',\n    500104: '大渡口区',\n    500105: '江北区',\n    500106: '沙坪坝区',\n    500107: '九龙坡区',\n    500108: '南岸区',\n    500109: '北碚区',\n    500110: '綦江区',\n    500111: '大足区',\n    500112: '渝北区',\n    500113: '巴南区',\n    500114: '黔江区',\n    500115: '长寿区',\n    500116: '江津区',\n    500117: '合川区',\n    500118: '永川区',\n    500119: '南川区',\n    500120: '璧山区',\n    500151: '铜梁区',\n    500152: '潼南区',\n    500153: '荣昌区',\n    500154: '开州区',\n    500155: '梁平区',\n    500156: '武隆区',\n    500229: '城口县',\n    500230: '丰都县',\n    500231: '垫江县',\n    500233: '忠县',\n    500235: '云阳县',\n    500236: '奉节县',\n    500237: '巫山县',\n    500238: '巫溪县',\n    500240: '石柱土家族自治县',\n    500241: '秀山土家族苗族自治县',\n    500242: '酉阳土家族苗族自治县',\n    500243: '彭水苗族土家族自治县',\n    510104: '锦江区',\n    510105: '青羊区',\n    510106: '金牛区',\n    510107: '武侯区',\n    510108: '成华区',\n    510112: '龙泉驿区',\n    510113: '青白江区',\n    510114: '新都区',\n    510115: '温江区',\n    510116: '双流区',\n    510117: '郫都区',\n    510121: '金堂县',\n    510129: '大邑县',\n    510131: '蒲江县',\n    510132: '新津县',\n    510181: '都江堰市',\n    510182: '彭州市',\n    510183: '邛崃市',\n    510184: '崇州市',\n    510185: '简阳市',\n    510191: '高新区',\n    510302: '自流井区',\n    510303: '贡井区',\n    510304: '大安区',\n    510311: '沿滩区',\n    510321: '荣县',\n    510322: '富顺县',\n    510402: '东区',\n    510403: '西区',\n    510411: '仁和区',\n    510421: '米易县',\n    510422: '盐边县',\n    510502: '江阳区',\n    510503: '纳溪区',\n    510504: '龙马潭区',\n    510521: '泸县',\n    510522: '合江县',\n    510524: '叙永县',\n    510525: '古蔺县',\n    510603: '旌阳区',\n    510604: '罗江区',\n    510623: '中江县',\n    510681: '广汉市',\n    510682: '什邡市',\n    510683: '绵竹市',\n    510703: '涪城区',\n    510704: '游仙区',\n    510705: '安州区',\n    510722: '三台县',\n    510723: '盐亭县',\n    510725: '梓潼县',\n    510726: '北川羌族自治县',\n    510727: '平武县',\n    510781: '江油市',\n    510791: '高新区',\n    510802: '利州区',\n    510811: '昭化区',\n    510812: '朝天区',\n    510821: '旺苍县',\n    510822: '青川县',\n    510823: '剑阁县',\n    510824: '苍溪县',\n    510903: '船山区',\n    510904: '安居区',\n    510921: '蓬溪县',\n    510922: '射洪县',\n    510923: '大英县',\n    511002: '市中区',\n    511011: '东兴区',\n    511024: '威远县',\n    511025: '资中县',\n    511083: '隆昌市',\n    511102: '市中区',\n    511111: '沙湾区',\n    511112: '五通桥区',\n    511113: '金口河区',\n    511123: '犍为县',\n    511124: '井研县',\n    511126: '夹江县',\n    511129: '沐川县',\n    511132: '峨边彝族自治县',\n    511133: '马边彝族自治县',\n    511181: '峨眉山市',\n    511302: '顺庆区',\n    511303: '高坪区',\n    511304: '嘉陵区',\n    511321: '南部县',\n    511322: '营山县',\n    511323: '蓬安县',\n    511324: '仪陇县',\n    511325: '西充县',\n    511381: '阆中市',\n    511402: '东坡区',\n    511403: '彭山区',\n    511421: '仁寿县',\n    511423: '洪雅县',\n    511424: '丹棱县',\n    511425: '青神县',\n    511502: '翠屏区',\n    511503: '南溪区',\n    511504: '叙州区',\n    511523: '江安县',\n    511524: '长宁县',\n    511525: '高县',\n    511526: '珙县',\n    511527: '筠连县',\n    511528: '兴文县',\n    511529: '屏山县',\n    511602: '广安区',\n    511603: '前锋区',\n    511621: '岳池县',\n    511622: '武胜县',\n    511623: '邻水县',\n    511681: '华蓥市',\n    511702: '通川区',\n    511703: '达川区',\n    511722: '宣汉县',\n    511723: '开江县',\n    511724: '大竹县',\n    511725: '渠县',\n    511781: '万源市',\n    511802: '雨城区',\n    511803: '名山区',\n    511822: '荥经县',\n    511823: '汉源县',\n    511824: '石棉县',\n    511825: '天全县',\n    511826: '芦山县',\n    511827: '宝兴县',\n    511902: '巴州区',\n    511903: '恩阳区',\n    511921: '通江县',\n    511922: '南江县',\n    511923: '平昌县',\n    512002: '雁江区',\n    512021: '安岳县',\n    512022: '乐至县',\n    513201: '马尔康市',\n    513221: '汶川县',\n    513222: '理县',\n    513223: '茂县',\n    513224: '松潘县',\n    513225: '九寨沟县',\n    513226: '金川县',\n    513227: '小金县',\n    513228: '黑水县',\n    513230: '壤塘县',\n    513231: '阿坝县',\n    513232: '若尔盖县',\n    513233: '红原县',\n    513301: '康定市',\n    513322: '泸定县',\n    513323: '丹巴县',\n    513324: '九龙县',\n    513325: '雅江县',\n    513326: '道孚县',\n    513327: '炉霍县',\n    513328: '甘孜县',\n    513329: '新龙县',\n    513330: '德格县',\n    513331: '白玉县',\n    513332: '石渠县',\n    513333: '色达县',\n    513334: '理塘县',\n    513335: '巴塘县',\n    513336: '乡城县',\n    513337: '稻城县',\n    513338: '得荣县',\n    513401: '西昌市',\n    513422: '木里藏族自治县',\n    513423: '盐源县',\n    513424: '德昌县',\n    513425: '会理县',\n    513426: '会东县',\n    513427: '宁南县',\n    513428: '普格县',\n    513429: '布拖县',\n    513430: '金阳县',\n    513431: '昭觉县',\n    513432: '喜德县',\n    513433: '冕宁县',\n    513434: '越西县',\n    513435: '甘洛县',\n    513436: '美姑县',\n    513437: '雷波县',\n    520102: '南明区',\n    520103: '云岩区',\n    520111: '花溪区',\n    520112: '乌当区',\n    520113: '白云区',\n    520115: '观山湖区',\n    520121: '开阳县',\n    520122: '息烽县',\n    520123: '修文县',\n    520181: '清镇市',\n    520201: '钟山区',\n    520203: '六枝特区',\n    520221: '水城县',\n    520281: '盘州市',\n    520302: '红花岗区',\n    520303: '汇川区',\n    520304: '播州区',\n    520322: '桐梓县',\n    520323: '绥阳县',\n    520324: '正安县',\n    520325: '道真仡佬族苗族自治县',\n    520326: '务川仡佬族苗族自治县',\n    520327: '凤冈县',\n    520328: '湄潭县',\n    520329: '余庆县',\n    520330: '习水县',\n    520381: '赤水市',\n    520382: '仁怀市',\n    520402: '西秀区',\n    520403: '平坝区',\n    520422: '普定县',\n    520423: '镇宁布依族苗族自治县',\n    520424: '关岭布依族苗族自治县',\n    520425: '紫云苗族布依族自治县',\n    520502: '七星关区',\n    520521: '大方县',\n    520522: '黔西县',\n    520523: '金沙县',\n    520524: '织金县',\n    520525: '纳雍县',\n    520526: '威宁彝族回族苗族自治县',\n    520527: '赫章县',\n    520602: '碧江区',\n    520603: '万山区',\n    520621: '江口县',\n    520622: '玉屏侗族自治县',\n    520623: '石阡县',\n    520624: '思南县',\n    520625: '印江土家族苗族自治县',\n    520626: '德江县',\n    520627: '沿河土家族自治县',\n    520628: '松桃苗族自治县',\n    522301: '兴义市',\n    522302: '兴仁市',\n    522323: '普安县',\n    522324: '晴隆县',\n    522325: '贞丰县',\n    522326: '望谟县',\n    522327: '册亨县',\n    522328: '安龙县',\n    522601: '凯里市',\n    522622: '黄平县',\n    522623: '施秉县',\n    522624: '三穗县',\n    522625: '镇远县',\n    522626: '岑巩县',\n    522627: '天柱县',\n    522628: '锦屏县',\n    522629: '剑河县',\n    522630: '台江县',\n    522631: '黎平县',\n    522632: '榕江县',\n    522633: '从江县',\n    522634: '雷山县',\n    522635: '麻江县',\n    522636: '丹寨县',\n    522701: '都匀市',\n    522702: '福泉市',\n    522722: '荔波县',\n    522723: '贵定县',\n    522725: '瓮安县',\n    522726: '独山县',\n    522727: '平塘县',\n    522728: '罗甸县',\n    522729: '长顺县',\n    522730: '龙里县',\n    522731: '惠水县',\n    522732: '三都水族自治县',\n    530102: '五华区',\n    530103: '盘龙区',\n    530111: '官渡区',\n    530112: '西山区',\n    530113: '东川区',\n    530114: '呈贡区',\n    530115: '晋宁区',\n    530124: '富民县',\n    530125: '宜良县',\n    530126: '石林彝族自治县',\n    530127: '嵩明县',\n    530128: '禄劝彝族苗族自治县',\n    530129: '寻甸回族彝族自治县',\n    530181: '安宁市',\n    530302: '麒麟区',\n    530303: '沾益区',\n    530304: '马龙区',\n    530322: '陆良县',\n    530323: '师宗县',\n    530324: '罗平县',\n    530325: '富源县',\n    530326: '会泽县',\n    530381: '宣威市',\n    530402: '红塔区',\n    530403: '江川区',\n    530422: '澄江县',\n    530423: '通海县',\n    530424: '华宁县',\n    530425: '易门县',\n    530426: '峨山彝族自治县',\n    530427: '新平彝族傣族自治县',\n    530428: '元江哈尼族彝族傣族自治县',\n    530502: '隆阳区',\n    530521: '施甸县',\n    530523: '龙陵县',\n    530524: '昌宁县',\n    530581: '腾冲市',\n    530602: '昭阳区',\n    530621: '鲁甸县',\n    530622: '巧家县',\n    530623: '盐津县',\n    530624: '大关县',\n    530625: '永善县',\n    530626: '绥江县',\n    530627: '镇雄县',\n    530628: '彝良县',\n    530629: '威信县',\n    530681: '水富市',\n    530702: '古城区',\n    530721: '玉龙纳西族自治县',\n    530722: '永胜县',\n    530723: '华坪县',\n    530724: '宁蒗彝族自治县',\n    530802: '思茅区',\n    530821: '宁洱哈尼族彝族自治县',\n    530822: '墨江哈尼族自治县',\n    530823: '景东彝族自治县',\n    530824: '景谷傣族彝族自治县',\n    530825: '镇沅彝族哈尼族拉祜族自治县',\n    530826: '江城哈尼族彝族自治县',\n    530827: '孟连傣族拉祜族佤族自治县',\n    530828: '澜沧拉祜族自治县',\n    530829: '西盟佤族自治县',\n    530902: '临翔区',\n    530921: '凤庆县',\n    530922: '云县',\n    530923: '永德县',\n    530924: '镇康县',\n    530925: '双江拉祜族佤族布朗族傣族自治县',\n    530926: '耿马傣族佤族自治县',\n    530927: '沧源佤族自治县',\n    532301: '楚雄市',\n    532322: '双柏县',\n    532323: '牟定县',\n    532324: '南华县',\n    532325: '姚安县',\n    532326: '大姚县',\n    532327: '永仁县',\n    532328: '元谋县',\n    532329: '武定县',\n    532331: '禄丰县',\n    532501: '个旧市',\n    532502: '开远市',\n    532503: '蒙自市',\n    532504: '弥勒市',\n    532523: '屏边苗族自治县',\n    532524: '建水县',\n    532525: '石屏县',\n    532527: '泸西县',\n    532528: '元阳县',\n    532529: '红河县',\n    532530: '金平苗族瑶族傣族自治县',\n    532531: '绿春县',\n    532532: '河口瑶族自治县',\n    532601: '文山市',\n    532622: '砚山县',\n    532623: '西畴县',\n    532624: '麻栗坡县',\n    532625: '马关县',\n    532626: '丘北县',\n    532627: '广南县',\n    532628: '富宁县',\n    532801: '景洪市',\n    532822: '勐海县',\n    532823: '勐腊县',\n    532901: '大理市',\n    532922: '漾濞彝族自治县',\n    532923: '祥云县',\n    532924: '宾川县',\n    532925: '弥渡县',\n    532926: '南涧彝族自治县',\n    532927: '巍山彝族回族自治县',\n    532928: '永平县',\n    532929: '云龙县',\n    532930: '洱源县',\n    532931: '剑川县',\n    532932: '鹤庆县',\n    533102: '瑞丽市',\n    533103: '芒市',\n    533122: '梁河县',\n    533123: '盈江县',\n    533124: '陇川县',\n    533301: '泸水市',\n    533323: '福贡县',\n    533324: '贡山独龙族怒族自治县',\n    533325: '兰坪白族普米族自治县',\n    533401: '香格里拉市',\n    533422: '德钦县',\n    533423: '维西傈僳族自治县',\n    540102: '城关区',\n    540103: '堆龙德庆区',\n    540104: '达孜区',\n    540121: '林周县',\n    540122: '当雄县',\n    540123: '尼木县',\n    540124: '曲水县',\n    540127: '墨竹工卡县',\n    540202: '桑珠孜区',\n    540221: '南木林县',\n    540222: '江孜县',\n    540223: '定日县',\n    540224: '萨迦县',\n    540225: '拉孜县',\n    540226: '昂仁县',\n    540227: '谢通门县',\n    540228: '白朗县',\n    540229: '仁布县',\n    540230: '康马县',\n    540231: '定结县',\n    540232: '仲巴县',\n    540233: '亚东县',\n    540234: '吉隆县',\n    540235: '聂拉木县',\n    540236: '萨嘎县',\n    540237: '岗巴县',\n    540302: '卡若区',\n    540321: '江达县',\n    540322: '贡觉县',\n    540323: '类乌齐县',\n    540324: '丁青县',\n    540325: '察雅县',\n    540326: '八宿县',\n    540327: '左贡县',\n    540328: '芒康县',\n    540329: '洛隆县',\n    540330: '边坝县',\n    540402: '巴宜区',\n    540421: '工布江达县',\n    540422: '米林县',\n    540423: '墨脱县',\n    540424: '波密县',\n    540425: '察隅县',\n    540426: '朗县',\n    540502: '乃东区',\n    540521: '扎囊县',\n    540522: '贡嘎县',\n    540523: '桑日县',\n    540524: '琼结县',\n    540525: '曲松县',\n    540526: '措美县',\n    540527: '洛扎县',\n    540528: '加查县',\n    540529: '隆子县',\n    540530: '错那县',\n    540531: '浪卡子县',\n    540602: '色尼区',\n    540621: '嘉黎县',\n    540622: '比如县',\n    540623: '聂荣县',\n    540624: '安多县',\n    540625: '申扎县',\n    540626: '索县',\n    540627: '班戈县',\n    540628: '巴青县',\n    540629: '尼玛县',\n    540630: '双湖县',\n    542521: '普兰县',\n    542522: '札达县',\n    542523: '噶尔县',\n    542524: '日土县',\n    542525: '革吉县',\n    542526: '改则县',\n    542527: '措勤县',\n    610102: '新城区',\n    610103: '碑林区',\n    610104: '莲湖区',\n    610111: '灞桥区',\n    610112: '未央区',\n    610113: '雁塔区',\n    610114: '阎良区',\n    610115: '临潼区',\n    610116: '长安区',\n    610117: '高陵区',\n    610118: '鄠邑区',\n    610122: '蓝田县',\n    610124: '周至县',\n    610202: '王益区',\n    610203: '印台区',\n    610204: '耀州区',\n    610222: '宜君县',\n    610302: '渭滨区',\n    610303: '金台区',\n    610304: '陈仓区',\n    610322: '凤翔县',\n    610323: '岐山县',\n    610324: '扶风县',\n    610326: '眉县',\n    610327: '陇县',\n    610328: '千阳县',\n    610329: '麟游县',\n    610330: '凤县',\n    610331: '太白县',\n    610402: '秦都区',\n    610403: '杨陵区',\n    610404: '渭城区',\n    610422: '三原县',\n    610423: '泾阳县',\n    610424: '乾县',\n    610425: '礼泉县',\n    610426: '永寿县',\n    610428: '长武县',\n    610429: '旬邑县',\n    610430: '淳化县',\n    610431: '武功县',\n    610481: '兴平市',\n    610482: '彬州市',\n    610502: '临渭区',\n    610503: '华州区',\n    610522: '潼关县',\n    610523: '大荔县',\n    610524: '合阳县',\n    610525: '澄城县',\n    610526: '蒲城县',\n    610527: '白水县',\n    610528: '富平县',\n    610581: '韩城市',\n    610582: '华阴市',\n    610602: '宝塔区',\n    610603: '安塞区',\n    610621: '延长县',\n    610622: '延川县',\n    610623: '子长县',\n    610625: '志丹县',\n    610626: '吴起县',\n    610627: '甘泉县',\n    610628: '富县',\n    610629: '洛川县',\n    610630: '宜川县',\n    610631: '黄龙县',\n    610632: '黄陵县',\n    610702: '汉台区',\n    610703: '南郑区',\n    610722: '城固县',\n    610723: '洋县',\n    610724: '西乡县',\n    610725: '勉县',\n    610726: '宁强县',\n    610727: '略阳县',\n    610728: '镇巴县',\n    610729: '留坝县',\n    610730: '佛坪县',\n    610802: '榆阳区',\n    610803: '横山区',\n    610822: '府谷县',\n    610824: '靖边县',\n    610825: '定边县',\n    610826: '绥德县',\n    610827: '米脂县',\n    610828: '佳县',\n    610829: '吴堡县',\n    610830: '清涧县',\n    610831: '子洲县',\n    610881: '神木市',\n    610902: '汉滨区',\n    610921: '汉阴县',\n    610922: '石泉县',\n    610923: '宁陕县',\n    610924: '紫阳县',\n    610925: '岚皋县',\n    610926: '平利县',\n    610927: '镇坪县',\n    610928: '旬阳县',\n    610929: '白河县',\n    611002: '商州区',\n    611021: '洛南县',\n    611022: '丹凤县',\n    611023: '商南县',\n    611024: '山阳县',\n    611025: '镇安县',\n    611026: '柞水县',\n    620102: '城关区',\n    620103: '七里河区',\n    620104: '西固区',\n    620105: '安宁区',\n    620111: '红古区',\n    620121: '永登县',\n    620122: '皋兰县',\n    620123: '榆中县',\n    620201: '市辖区',\n    620290: '雄关区',\n    620291: '长城区',\n    620292: '镜铁区',\n    620293: '新城镇',\n    620294: '峪泉镇',\n    620295: '文殊镇',\n    620302: '金川区',\n    620321: '永昌县',\n    620402: '白银区',\n    620403: '平川区',\n    620421: '靖远县',\n    620422: '会宁县',\n    620423: '景泰县',\n    620502: '秦州区',\n    620503: '麦积区',\n    620521: '清水县',\n    620522: '秦安县',\n    620523: '甘谷县',\n    620524: '武山县',\n    620525: '张家川回族自治县',\n    620602: '凉州区',\n    620621: '民勤县',\n    620622: '古浪县',\n    620623: '天祝藏族自治县',\n    620702: '甘州区',\n    620721: '肃南裕固族自治县',\n    620722: '民乐县',\n    620723: '临泽县',\n    620724: '高台县',\n    620725: '山丹县',\n    620802: '崆峒区',\n    620821: '泾川县',\n    620822: '灵台县',\n    620823: '崇信县',\n    620825: '庄浪县',\n    620826: '静宁县',\n    620881: '华亭市',\n    620902: '肃州区',\n    620921: '金塔县',\n    620922: '瓜州县',\n    620923: '肃北蒙古族自治县',\n    620924: '阿克塞哈萨克族自治县',\n    620981: '玉门市',\n    620982: '敦煌市',\n    621002: '西峰区',\n    621021: '庆城县',\n    621022: '环县',\n    621023: '华池县',\n    621024: '合水县',\n    621025: '正宁县',\n    621026: '宁县',\n    621027: '镇原县',\n    621102: '安定区',\n    621121: '通渭县',\n    621122: '陇西县',\n    621123: '渭源县',\n    621124: '临洮县',\n    621125: '漳县',\n    621126: '岷县',\n    621202: '武都区',\n    621221: '成县',\n    621222: '文县',\n    621223: '宕昌县',\n    621224: '康县',\n    621225: '西和县',\n    621226: '礼县',\n    621227: '徽县',\n    621228: '两当县',\n    622901: '临夏市',\n    622921: '临夏县',\n    622922: '康乐县',\n    622923: '永靖县',\n    622924: '广河县',\n    622925: '和政县',\n    622926: '东乡族自治县',\n    622927: '积石山保安族东乡族撒拉族自治县',\n    623001: '合作市',\n    623021: '临潭县',\n    623022: '卓尼县',\n    623023: '舟曲县',\n    623024: '迭部县',\n    623025: '玛曲县',\n    623026: '碌曲县',\n    623027: '夏河县',\n    630102: '城东区',\n    630103: '城中区',\n    630104: '城西区',\n    630105: '城北区',\n    630121: '大通回族土族自治县',\n    630122: '湟中县',\n    630123: '湟源县',\n    630202: '乐都区',\n    630203: '平安区',\n    630222: '民和回族土族自治县',\n    630223: '互助土族自治县',\n    630224: '化隆回族自治县',\n    630225: '循化撒拉族自治县',\n    632221: '门源回族自治县',\n    632222: '祁连县',\n    632223: '海晏县',\n    632224: '刚察县',\n    632321: '同仁县',\n    632322: '尖扎县',\n    632323: '泽库县',\n    632324: '河南蒙古族自治县',\n    632521: '共和县',\n    632522: '同德县',\n    632523: '贵德县',\n    632524: '兴海县',\n    632525: '贵南县',\n    632621: '玛沁县',\n    632622: '班玛县',\n    632623: '甘德县',\n    632624: '达日县',\n    632625: '久治县',\n    632626: '玛多县',\n    632701: '玉树市',\n    632722: '杂多县',\n    632723: '称多县',\n    632724: '治多县',\n    632725: '囊谦县',\n    632726: '曲麻莱县',\n    632801: '格尔木市',\n    632802: '德令哈市',\n    632803: '茫崖市',\n    632821: '乌兰县',\n    632822: '都兰县',\n    632823: '天峻县',\n    640104: '兴庆区',\n    640105: '西夏区',\n    640106: '金凤区',\n    640121: '永宁县',\n    640122: '贺兰县',\n    640181: '灵武市',\n    640202: '大武口区',\n    640205: '惠农区',\n    640221: '平罗县',\n    640302: '利通区',\n    640303: '红寺堡区',\n    640323: '盐池县',\n    640324: '同心县',\n    640381: '青铜峡市',\n    640402: '原州区',\n    640422: '西吉县',\n    640423: '隆德县',\n    640424: '泾源县',\n    640425: '彭阳县',\n    640502: '沙坡头区',\n    640521: '中宁县',\n    640522: '海原县',\n    650102: '天山区',\n    650103: '沙依巴克区',\n    650104: '新市区',\n    650105: '水磨沟区',\n    650106: '头屯河区',\n    650107: '达坂城区',\n    650109: '米东区',\n    650121: '乌鲁木齐县',\n    650202: '独山子区',\n    650203: '克拉玛依区',\n    650204: '白碱滩区',\n    650205: '乌尔禾区',\n    650402: '高昌区',\n    650421: '鄯善县',\n    650422: '托克逊县',\n    650502: '伊州区',\n    650521: '巴里坤哈萨克自治县',\n    650522: '伊吾县',\n    652301: '昌吉市',\n    652302: '阜康市',\n    652323: '呼图壁县',\n    652324: '玛纳斯县',\n    652325: '奇台县',\n    652327: '吉木萨尔县',\n    652328: '木垒哈萨克自治县',\n    652701: '博乐市',\n    652702: '阿拉山口市',\n    652722: '精河县',\n    652723: '温泉县',\n    652801: '库尔勒市',\n    652822: '轮台县',\n    652823: '尉犁县',\n    652824: '若羌县',\n    652825: '且末县',\n    652826: '焉耆回族自治县',\n    652827: '和静县',\n    652828: '和硕县',\n    652829: '博湖县',\n    652901: '阿克苏市',\n    652922: '温宿县',\n    652923: '库车县',\n    652924: '沙雅县',\n    652925: '新和县',\n    652926: '拜城县',\n    652927: '乌什县',\n    652928: '阿瓦提县',\n    652929: '柯坪县',\n    653001: '阿图什市',\n    653022: '阿克陶县',\n    653023: '阿合奇县',\n    653024: '乌恰县',\n    653101: '喀什市',\n    653121: '疏附县',\n    653122: '疏勒县',\n    653123: '英吉沙县',\n    653124: '泽普县',\n    653125: '莎车县',\n    653126: '叶城县',\n    653127: '麦盖提县',\n    653128: '岳普湖县',\n    653129: '伽师县',\n    653130: '巴楚县',\n    653131: '塔什库尔干塔吉克自治县',\n    653201: '和田市',\n    653221: '和田县',\n    653222: '墨玉县',\n    653223: '皮山县',\n    653224: '洛浦县',\n    653225: '策勒县',\n    653226: '于田县',\n    653227: '民丰县',\n    654002: '伊宁市',\n    654003: '奎屯市',\n    654004: '霍尔果斯市',\n    654021: '伊宁县',\n    654022: '察布查尔锡伯自治县',\n    654023: '霍城县',\n    654024: '巩留县',\n    654025: '新源县',\n    654026: '昭苏县',\n    654027: '特克斯县',\n    654028: '尼勒克县',\n    654201: '塔城市',\n    654202: '乌苏市',\n    654221: '额敏县',\n    654223: '沙湾县',\n    654224: '托里县',\n    654225: '裕民县',\n    654226: '和布克赛尔蒙古自治县',\n    654301: '阿勒泰市',\n    654321: '布尔津县',\n    654322: '富蕴县',\n    654323: '福海县',\n    654324: '哈巴河县',\n    654325: '青河县',\n    654326: '吉木乃县',\n    659001: '石河子市',\n    659002: '阿拉尔市',\n    659003: '图木舒克市',\n    659004: '五家渠市',\n    659005: '北屯市',\n    659006: '铁门关市',\n    659007: '双河市',\n    659008: '可克达拉市',\n    659009: '昆玉市',\n    710101: '中正区',\n    710102: '大同区',\n    710103: '中山区',\n    710104: '松山区',\n    710105: '大安区',\n    710106: '万华区',\n    710107: '信义区',\n    710108: '士林区',\n    710109: '北投区',\n    710110: '内湖区',\n    710111: '南港区',\n    710112: '文山区',\n    710199: '其它区',\n    710201: '新兴区',\n    710202: '前金区',\n    710203: '芩雅区',\n    710204: '盐埕区',\n    710205: '鼓山区',\n    710206: '旗津区',\n    710207: '前镇区',\n    710208: '三民区',\n    710209: '左营区',\n    710210: '楠梓区',\n    710211: '小港区',\n    710241: '苓雅区',\n    710242: '仁武区',\n    710243: '大社区',\n    710244: '冈山区',\n    710245: '路竹区',\n    710246: '阿莲区',\n    710247: '田寮区',\n    710248: '燕巢区',\n    710249: '桥头区',\n    710250: '梓官区',\n    710251: '弥陀区',\n    710252: '永安区',\n    710253: '湖内区',\n    710254: '凤山区',\n    710255: '大寮区',\n    710256: '林园区',\n    710257: '鸟松区',\n    710258: '大树区',\n    710259: '旗山区',\n    710260: '美浓区',\n    710261: '六龟区',\n    710262: '内门区',\n    710263: '杉林区',\n    710264: '甲仙区',\n    710265: '桃源区',\n    710266: '那玛夏区',\n    710267: '茂林区',\n    710268: '茄萣区',\n    710299: '其它区',\n    710301: '中西区',\n    710302: '东区',\n    710303: '南区',\n    710304: '北区',\n    710305: '安平区',\n    710306: '安南区',\n    710339: '永康区',\n    710340: '归仁区',\n    710341: '新化区',\n    710342: '左镇区',\n    710343: '玉井区',\n    710344: '楠西区',\n    710345: '南化区',\n    710346: '仁德区',\n    710347: '关庙区',\n    710348: '龙崎区',\n    710349: '官田区',\n    710350: '麻豆区',\n    710351: '佳里区',\n    710352: '西港区',\n    710353: '七股区',\n    710354: '将军区',\n    710355: '学甲区',\n    710356: '北门区',\n    710357: '新营区',\n    710358: '后壁区',\n    710359: '白河区',\n    710360: '东山区',\n    710361: '六甲区',\n    710362: '下营区',\n    710363: '柳营区',\n    710364: '盐水区',\n    710365: '善化区',\n    710366: '大内区',\n    710367: '山上区',\n    710368: '新市区',\n    710369: '安定区',\n    710399: '其它区',\n    710401: '中区',\n    710402: '东区',\n    710403: '南区',\n    710404: '西区',\n    710405: '北区',\n    710406: '北屯区',\n    710407: '西屯区',\n    710408: '南屯区',\n    710431: '太平区',\n    710432: '大里区',\n    710433: '雾峰区',\n    710434: '乌日区',\n    710435: '丰原区',\n    710436: '后里区',\n    710437: '石冈区',\n    710438: '东势区',\n    710439: '和平区',\n    710440: '新社区',\n    710441: '潭子区',\n    710442: '大雅区',\n    710443: '神冈区',\n    710444: '大肚区',\n    710445: '沙鹿区',\n    710446: '龙井区',\n    710447: '梧栖区',\n    710448: '清水区',\n    710449: '大甲区',\n    710450: '外埔区',\n    710451: '大安区',\n    710499: '其它区',\n    710507: '金沙镇',\n    710508: '金湖镇',\n    710509: '金宁乡',\n    710510: '金城镇',\n    710511: '烈屿乡',\n    710512: '乌坵乡',\n    710614: '南投市',\n    710615: '中寮乡',\n    710616: '草屯镇',\n    710617: '国姓乡',\n    710618: '埔里镇',\n    710619: '仁爱乡',\n    710620: '名间乡',\n    710621: '集集镇',\n    710622: '水里乡',\n    710623: '鱼池乡',\n    710624: '信义乡',\n    710625: '竹山镇',\n    710626: '鹿谷乡',\n    710701: '仁爱区',\n    710702: '信义区',\n    710703: '中正区',\n    710704: '中山区',\n    710705: '安乐区',\n    710706: '暖暖区',\n    710707: '七堵区',\n    710799: '其它区',\n    710801: '东区',\n    710802: '北区',\n    710803: '香山区',\n    710899: '其它区',\n    710901: '东区',\n    710902: '西区',\n    710999: '其它区',\n    711130: '万里区',\n    711132: '板桥区',\n    711133: '汐止区',\n    711134: '深坑区',\n    711135: '石碇区',\n    711136: '瑞芳区',\n    711137: '平溪区',\n    711138: '双溪区',\n    711139: '贡寮区',\n    711140: '新店区',\n    711141: '坪林区',\n    711142: '乌来区',\n    711143: '永和区',\n    711144: '中和区',\n    711145: '土城区',\n    711146: '三峡区',\n    711147: '树林区',\n    711148: '莺歌区',\n    711149: '三重区',\n    711150: '新庄区',\n    711151: '泰山区',\n    711152: '林口区',\n    711153: '芦洲区',\n    711154: '五股区',\n    711155: '八里区',\n    711156: '淡水区',\n    711157: '三芝区',\n    711158: '石门区',\n    711287: '宜兰市',\n    711288: '头城镇',\n    711289: '礁溪乡',\n    711290: '壮围乡',\n    711291: '员山乡',\n    711292: '罗东镇',\n    711293: '三星乡',\n    711294: '大同乡',\n    711295: '五结乡',\n    711296: '冬山乡',\n    711297: '苏澳镇',\n    711298: '南澳乡',\n    711299: '钓鱼台',\n    711387: '竹北市',\n    711388: '湖口乡',\n    711389: '新丰乡',\n    711390: '新埔镇',\n    711391: '关西镇',\n    711392: '芎林乡',\n    711393: '宝山乡',\n    711394: '竹东镇',\n    711395: '五峰乡',\n    711396: '横山乡',\n    711397: '尖石乡',\n    711398: '北埔乡',\n    711399: '峨眉乡',\n    711414: '中坜区',\n    711415: '平镇区',\n    711417: '杨梅区',\n    711418: '新屋区',\n    711419: '观音区',\n    711420: '桃园区',\n    711421: '龟山区',\n    711422: '八德区',\n    711423: '大溪区',\n    711425: '大园区',\n    711426: '芦竹区',\n    711487: '中坜市',\n    711488: '平镇市',\n    711489: '龙潭乡',\n    711490: '杨梅市',\n    711491: '新屋乡',\n    711492: '观音乡',\n    711493: '桃园市',\n    711494: '龟山乡',\n    711495: '八德市',\n    711496: '大溪镇',\n    711497: '复兴乡',\n    711498: '大园乡',\n    711499: '芦竹乡',\n    711520: '头份市',\n    711582: '竹南镇',\n    711583: '头份镇',\n    711584: '三湾乡',\n    711585: '南庄乡',\n    711586: '狮潭乡',\n    711587: '后龙镇',\n    711588: '通霄镇',\n    711589: '苑里镇',\n    711590: '苗栗市',\n    711591: '造桥乡',\n    711592: '头屋乡',\n    711593: '公馆乡',\n    711594: '大湖乡',\n    711595: '泰安乡',\n    711596: '铜锣乡',\n    711597: '三义乡',\n    711598: '西湖乡',\n    711599: '卓兰镇',\n    711736: '员林市',\n    711774: '彰化市',\n    711775: '芬园乡',\n    711776: '花坛乡',\n    711777: '秀水乡',\n    711778: '鹿港镇',\n    711779: '福兴乡',\n    711780: '线西乡',\n    711781: '和美镇',\n    711782: '伸港乡',\n    711783: '员林镇',\n    711784: '社头乡',\n    711785: '永靖乡',\n    711786: '埔心乡',\n    711787: '溪湖镇',\n    711788: '大村乡',\n    711789: '埔盐乡',\n    711790: '田中镇',\n    711791: '北斗镇',\n    711792: '田尾乡',\n    711793: '埤头乡',\n    711794: '溪州乡',\n    711795: '竹塘乡',\n    711796: '二林镇',\n    711797: '大城乡',\n    711798: '芳苑乡',\n    711799: '二水乡',\n    711982: '番路乡',\n    711983: '梅山乡',\n    711984: '竹崎乡',\n    711985: '阿里山乡',\n    711986: '中埔乡',\n    711987: '大埔乡',\n    711988: '水上乡',\n    711989: '鹿草乡',\n    711990: '太保市',\n    711991: '朴子市',\n    711992: '东石乡',\n    711993: '六脚乡',\n    711994: '新港乡',\n    711995: '民雄乡',\n    711996: '大林镇',\n    711997: '溪口乡',\n    711998: '义竹乡',\n    711999: '布袋镇',\n    712180: '斗南镇',\n    712181: '大埤乡',\n    712182: '虎尾镇',\n    712183: '土库镇',\n    712184: '褒忠乡',\n    712185: '东势乡',\n    712186: '台西乡',\n    712187: '仑背乡',\n    712188: '麦寮乡',\n    712189: '斗六市',\n    712190: '林内乡',\n    712191: '古坑乡',\n    712192: '莿桐乡',\n    712193: '西螺镇',\n    712194: '二仑乡',\n    712195: '北港镇',\n    712196: '水林乡',\n    712197: '口湖乡',\n    712198: '四湖乡',\n    712199: '元长乡',\n    712451: '崁顶乡',\n    712467: '屏东市',\n    712468: '三地门乡',\n    712469: '雾台乡',\n    712470: '玛家乡',\n    712471: '九如乡',\n    712472: '里港乡',\n    712473: '高树乡',\n    712474: '盐埔乡',\n    712475: '长治乡',\n    712476: '麟洛乡',\n    712477: '竹田乡',\n    712478: '内埔乡',\n    712479: '万丹乡',\n    712480: '潮州镇',\n    712481: '泰武乡',\n    712482: '来义乡',\n    712483: '万峦乡',\n    712484: '莰顶乡',\n    712485: '新埤乡',\n    712486: '南州乡',\n    712487: '林边乡',\n    712488: '东港镇',\n    712489: '琉球乡',\n    712490: '佳冬乡',\n    712491: '新园乡',\n    712492: '枋寮乡',\n    712493: '枋山乡',\n    712494: '春日乡',\n    712495: '狮子乡',\n    712496: '车城乡',\n    712497: '牡丹乡',\n    712498: '恒春镇',\n    712499: '满州乡',\n    712584: '台东市',\n    712585: '绿岛乡',\n    712586: '兰屿乡',\n    712587: '延平乡',\n    712588: '卑南乡',\n    712589: '鹿野乡',\n    712590: '关山镇',\n    712591: '海端乡',\n    712592: '池上乡',\n    712593: '东河乡',\n    712594: '成功镇',\n    712595: '长滨乡',\n    712596: '金峰乡',\n    712597: '大武乡',\n    712598: '达仁乡',\n    712599: '太麻里乡',\n    712686: '花莲市',\n    712687: '新城乡',\n    712688: '太鲁阁',\n    712689: '秀林乡',\n    712690: '吉安乡',\n    712691: '寿丰乡',\n    712692: '凤林镇',\n    712693: '光复乡',\n    712694: '丰滨乡',\n    712695: '瑞穗乡',\n    712696: '万荣乡',\n    712697: '玉里镇',\n    712698: '卓溪乡',\n    712699: '富里乡',\n    712794: '马公市',\n    712795: '西屿乡',\n    712796: '望安乡',\n    712797: '七美乡',\n    712798: '白沙乡',\n    712799: '湖西乡',\n    712896: '南竿乡',\n    712897: '北竿乡',\n    712898: '东引乡',\n    712899: '莒光乡',\n    810101: '中西区',\n    810102: '湾仔区',\n    810103: '东区',\n    810104: '南区',\n    810201: '九龙城区',\n    810202: '油尖旺区',\n    810203: '深水埗区',\n    810204: '黄大仙区',\n    810205: '观塘区',\n    810301: '北区',\n    810302: '大埔区',\n    810303: '沙田区',\n    810304: '西贡区',\n    810305: '元朗区',\n    810306: '屯门区',\n    810307: '荃湾区',\n    810308: '葵青区',\n    810309: '离岛区',\n    820101: '澳门半岛',\n    820201: '离岛' } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n");

/***/ }),

/***/ 4:
/*!********************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/pages.json ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@alpha\",\"_id\":\"@dcloudio/uni-stat@2.0.0-alpha-25720200116005\",\"_inBundle\":false,\"_integrity\":\"sha512-RZFw3WAaS/CZTzzv9JPaWvmoNitojD/06vPdHSzlqZi8GbuE222lFuyochEjrGkG8rPPrWHAnwfoPBuQVtkfdg==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@alpha\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"alpha\",\"saveSpec\":null,\"fetchSpec\":\"alpha\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-alpha-25720200116005.tgz\",\"_shasum\":\"08bb17aba91c84a981f33d74153aa3dd07b578ad\",\"_spec\":\"@dcloudio/uni-stat@alpha\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/alpha/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"a129bde60de35f7ef497f43d5a45b4556231995c\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-alpha-25720200116005\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!*************************************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/pages.json?{"type":"style"} ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/index/index\": { \"navigationBarTitleText\": \"凉安租房\" }, \"pages/product/product\": {}, \"pages/goodHouse/goodHouse\": {}, \"pages/productList/productList\": {}, \"pages/rentalHouse/rentalHouse\": {}, \"pages/rentalHouse/viewfrom/viewfrom\": {}, \"pages/rentalHouse/datafrom/datafrom\": {}, \"pages/rentalHouse/photofrom/photofrom\": {}, \"pages/rentalHouse/infofrom/infofrom\": {}, \"pages/rentalHouse/adressfrom/adressfrom\": {}, \"pages/beingCustodian/beingCustodian\": {}, \"pages/myInfo/myInfo\": {}, \"pages/login/login\": {}, \"pages/login/forget\": {}, \"pages/login/register\": {}, \"pages/message/message\": {}, \"pages/im-chat/im-list\": {}, \"pages/im-chat/im-chat\": {} }, \"globalStyle\": { \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"凉安租房\", \"navigationBarBackgroundColor\": \"#F8F8F8\", \"backgroundColor\": \"#F8F8F8\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsRUFBQyxxQkFBb0IsRUFBQywwQkFBeUIsTUFBMUIsRUFBckIsRUFBdUQseUJBQXdCLEVBQS9FLEVBQWtGLDZCQUE0QixFQUE5RyxFQUFpSCxpQ0FBZ0MsRUFBakosRUFBb0osaUNBQWdDLEVBQXBMLEVBQXVMLHVDQUFzQyxFQUE3TixFQUFnTyx1Q0FBc0MsRUFBdFEsRUFBeVEseUNBQXdDLEVBQWpULEVBQW9ULHVDQUFzQyxFQUExVixFQUE2ViwyQ0FBMEMsRUFBdlksRUFBMFksdUNBQXNDLEVBQWhiLEVBQW1iLHVCQUFzQixFQUF6YyxFQUE0YyxxQkFBb0IsRUFBaGUsRUFBbWUsc0JBQXFCLEVBQXhmLEVBQTJmLHdCQUF1QixFQUFsaEIsRUFBcWhCLHlCQUF3QixFQUE3aUIsRUFBZ2pCLHlCQUF3QixFQUF4a0IsRUFBMmtCLHlCQUF3QixFQUFubUIsRUFBVCxFQUFnbkIsZUFBYyxFQUFDLDBCQUF5QixPQUExQixFQUFrQywwQkFBeUIsTUFBM0QsRUFBa0UsZ0NBQStCLFNBQWpHLEVBQTJHLG1CQUFrQixTQUE3SCxFQUE5bkIsRSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wicGFnZXNcIjp7XCJwYWdlcy9pbmRleC9pbmRleFwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuWHieWuieenn+aIv1wifSxcInBhZ2VzL3Byb2R1Y3QvcHJvZHVjdFwiOnt9LFwicGFnZXMvZ29vZEhvdXNlL2dvb2RIb3VzZVwiOnt9LFwicGFnZXMvcHJvZHVjdExpc3QvcHJvZHVjdExpc3RcIjp7fSxcInBhZ2VzL3JlbnRhbEhvdXNlL3JlbnRhbEhvdXNlXCI6e30sXCJwYWdlcy9yZW50YWxIb3VzZS92aWV3ZnJvbS92aWV3ZnJvbVwiOnt9LFwicGFnZXMvcmVudGFsSG91c2UvZGF0YWZyb20vZGF0YWZyb21cIjp7fSxcInBhZ2VzL3JlbnRhbEhvdXNlL3Bob3RvZnJvbS9waG90b2Zyb21cIjp7fSxcInBhZ2VzL3JlbnRhbEhvdXNlL2luZm9mcm9tL2luZm9mcm9tXCI6e30sXCJwYWdlcy9yZW50YWxIb3VzZS9hZHJlc3Nmcm9tL2FkcmVzc2Zyb21cIjp7fSxcInBhZ2VzL2JlaW5nQ3VzdG9kaWFuL2JlaW5nQ3VzdG9kaWFuXCI6e30sXCJwYWdlcy9teUluZm8vbXlJbmZvXCI6e30sXCJwYWdlcy9sb2dpbi9sb2dpblwiOnt9LFwicGFnZXMvbG9naW4vZm9yZ2V0XCI6e30sXCJwYWdlcy9sb2dpbi9yZWdpc3RlclwiOnt9LFwicGFnZXMvbWVzc2FnZS9tZXNzYWdlXCI6e30sXCJwYWdlcy9pbS1jaGF0L2ltLWxpc3RcIjp7fSxcInBhZ2VzL2ltLWNoYXQvaW0tY2hhdFwiOnt9fSxcImdsb2JhbFN0eWxlXCI6e1wibmF2aWdhdGlvbkJhclRleHRTdHlsZVwiOlwiYmxhY2tcIixcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuWHieWuieenn+aIv1wiLFwibmF2aWdhdGlvbkJhckJhY2tncm91bmRDb2xvclwiOlwiI0Y4RjhGOFwiLFwiYmFja2dyb3VuZENvbG9yXCI6XCIjRjhGOEY4XCJ9fSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!************************************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/pages.json?{"type":"stat"} ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__17B8044\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX18xN0I4MDQ0XCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),

/***/ 9:
/*!*************************************************!*\
  !*** E:/2016171102李冠儒毕设源码/凉安租房/common/utils.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\nvar baseUrl = 'http://192.168.43.143:3000'; //192.168.43.143\nvar _default = {\n  baseUrl: baseUrl };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL3V0aWxzLmpzIl0sIm5hbWVzIjpbImJhc2VVcmwiXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFNQSxPQUFPLEdBQUcsNEJBQWhCLEMsQ0FBNEM7ZUFDOUI7QUFDYkEsU0FBTyxFQUFQQSxPQURhLEUiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5jb25zdCBiYXNlVXJsID0gJ2h0dHA6Ly8xOTIuMTY4LjQzLjE0MzozMDAwJy8vMTkyLjE2OC40My4xNDNcclxuZXhwb3J0IGRlZmF1bHR7XHJcblx0YmFzZVVybFxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ })

}]);